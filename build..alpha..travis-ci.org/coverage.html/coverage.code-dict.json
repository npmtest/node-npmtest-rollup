{"/home/travis/build/npmtest/node-npmtest-rollup/test.js":"/* istanbul instrument in package npmtest_rollup */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-rollup/lib.npmtest_rollup.js":"/* istanbul instrument in package npmtest_rollup */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_rollup = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_rollup = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-rollup/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-rollup && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_rollup */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_rollup\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_rollup.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        local.assetsDict['/assets.npmtest_rollup.rollup.js'] =\n            local.assetsDict['/assets.npmtest_rollup.rollup.js'] ||\n            local.fs.readFileSync(\n                // buildCustomOrg-hack\n                local.npmtest_rollup.__dirname +\n                    '/lib.npmtest_rollup.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-rollup/node_modules/rollup/dist/rollup.js":"/*\n\tRollup.js v0.41.6\n\tThu Mar 16 2017 00:50:25 GMT-0400 (EDT) - commit a96a923d631b9d2c471137542b9c4f578b8faa53\n\n\n\thttps://github.com/rollup/rollup\n\n\tReleased under the MIT License.\n*/\n\n'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar path = require('path');\nvar fs = require('fs');\n\nvar DEBUG = false;\nvar map = new Map;\n\nvar timeStartHelper;\nvar timeEndHelper;\n\nif ( typeof process === 'undefined' ) {\n\ttimeStartHelper = function timeStartHelper () {\n\t\treturn window.performance.now();\n\t};\n\n\ttimeEndHelper = function timeEndHelper ( previous ) {\n\t\treturn window.performance.now() - previous;\n\t};\n} else {\n\ttimeStartHelper = function timeStartHelper () {\n\t\treturn process.hrtime();\n\t};\n\n\ttimeEndHelper = function timeEndHelper ( previous ) {\n\t\tvar hrtime = process.hrtime( previous );\n\t\treturn hrtime[0] * 1e3 + Math.floor( hrtime[1] / 1e6 );\n\t};\n}\n\nfunction timeStart ( label ) {\n\tif ( !map.has( label ) ) {\n\t\tmap.set( label, {\n\t\t\ttime: 0\n\t\t});\n\t}\n\tmap.get( label ).start = timeStartHelper();\n}\n\nfunction timeEnd ( label ) {\n\tif ( map.has( label ) ) {\n\t\tvar item = map.get( label );\n\t\titem.time += timeEndHelper( item.start );\n\t}\n}\n\nfunction flushTime ( log ) {\n\tif ( log === void 0 ) log = defaultLog;\n\n\tfor ( var item of map.entries() ) {\n\t\tlog( item[0], item[1].time );\n\t}\n\tmap.clear();\n}\n\nfunction defaultLog ( label, time ) {\n\tif ( DEBUG ) {\n\t\t/* eslint-disable no-console */\n\t\tconsole.info( '%dms: %s', time, label );\n\t\t/* eslint-enable no-console */\n\t}\n}\n\nvar absolutePath = /^(?:\\/|(?:[A-Za-z]:)?[\\\\|\\/])/;\nvar relativePath = /^\\.?\\.\\//;\n\nfunction isAbsolute ( path$$1 ) {\n\treturn absolutePath.test( path$$1 );\n}\n\nfunction isRelative ( path$$1 ) {\n\treturn relativePath.test( path$$1 );\n}\n\nfunction normalize ( path$$1 ) {\n\treturn path$$1.replace( /\\\\/g, '/' );\n}\n\nfunction mkdirpath ( path$$1 ) {\n\tvar dir = path.dirname( path$$1 );\n\ttry {\n\t\tfs.readdirSync( dir );\n\t} catch ( err ) {\n\t\tmkdirpath( dir );\n\t\tfs.mkdirSync( dir );\n\t}\n}\n\nfunction writeFile$1 ( dest, data ) {\n\treturn new Promise( function ( fulfil, reject ) {\n\t\tmkdirpath( dest );\n\n\t\tfs.writeFile( dest, data, function (err) {\n\t\t\tif ( err ) {\n\t\t\t\treject( err );\n\t\t\t} else {\n\t\t\t\tfulfil();\n\t\t\t}\n\t\t});\n\t});\n}\n\nvar keys = Object.keys;\n\nfunction blank () {\n\treturn Object.create( null );\n}\n\nfunction forOwn ( object, func ) {\n\tObject.keys( object ).forEach( function (key) { return func( object[ key ], key ); } );\n}\n\nfunction assign ( target ) {\n\tvar sources = [], len = arguments.length - 1;\n\twhile ( len-- > 0 ) sources[ len ] = arguments[ len + 1 ];\n\n\tsources.forEach( function (source) {\n\t\tfor ( var key in source ) {\n\t\t\tif ( source.hasOwnProperty( key ) ) target[ key ] = source[ key ];\n\t\t}\n\t});\n\n\treturn target;\n}\n\nfunction mapSequence ( array, fn ) {\n\tvar results = [];\n\tvar promise = Promise.resolve();\n\n\tfunction next ( member, i ) {\n\t\treturn fn( member ).then( function (value) { return results[i] = value; } );\n\t}\n\n\tvar loop = function ( i ) {\n\t\tpromise = promise.then( function () { return next( array[i], i ); } );\n\t};\n\n\tfor ( var i = 0; i < array.length; i += 1 ) loop( i );\n\n\treturn promise.then( function () { return results; } );\n}\n\nfunction validateKeys ( actualKeys, allowedKeys ) {\n\tvar i = actualKeys.length;\n\n\twhile ( i-- ) {\n\t\tvar key = actualKeys[i];\n\n\t\tif ( allowedKeys.indexOf( key ) === -1 ) {\n\t\t\treturn new Error(\n\t\t\t\t(\"Unexpected key '\" + key + \"' found, expected one of: \" + (allowedKeys.join( ', ' )))\n\t\t\t);\n\t\t}\n\t}\n}\n\nfunction error ( props ) {\n\tvar err = new Error( props.message );\n\n\tObject.keys( props ).forEach( function (key) {\n\t\terr[ key ] = props[ key ];\n\t});\n\n\tthrow err;\n}\n\n// this looks ridiculous, but it prevents sourcemap tooling from mistaking\n// this for an actual sourceMappingURL\nvar SOURCEMAPPING_URL = 'sourceMa';\nSOURCEMAPPING_URL += 'ppingURL';\n\nvar SOURCEMAPPING_URL_RE = new RegExp( (\"^#\\\\s+\" + SOURCEMAPPING_URL + \"=.+\\\\n?\") );\n\nvar charToInteger = {};\nvar integerToChar = {};\n\n'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/='.split( '' ).forEach( function ( char, i ) {\n\tcharToInteger[ char ] = i;\n\tintegerToChar[ i ] = char;\n});\n\nfunction decode$1 ( string ) {\n\tvar result = [],\n\t\tlen = string.length,\n\t\ti,\n\t\thasContinuationBit,\n\t\tshift = 0,\n\t\tvalue = 0,\n\t\tinteger,\n\t\tshouldNegate;\n\n\tfor ( i = 0; i < len; i += 1 ) {\n\t\tinteger = charToInteger[ string[i] ];\n\n\t\tif ( integer === undefined ) {\n\t\t\tthrow new Error( 'Invalid character (' + string[i] + ')' );\n\t\t}\n\n\t\thasContinuationBit = integer & 32;\n\n\t\tinteger &= 31;\n\t\tvalue += integer << shift;\n\n\t\tif ( hasContinuationBit ) {\n\t\t\tshift += 5;\n\t\t} else {\n\t\t\tshouldNegate = value & 1;\n\t\t\tvalue >>= 1;\n\n\t\t\tresult.push( shouldNegate ? -value : value );\n\n\t\t\t// reset\n\t\t\tvalue = shift = 0;\n\t\t}\n\t}\n\n\treturn result;\n}\n\nfunction encode$1 ( value ) {\n\tvar result, i;\n\n\tif ( typeof value === 'number' ) {\n\t\tresult = encodeInteger( value );\n\t} else {\n\t\tresult = '';\n\t\tfor ( i = 0; i < value.length; i += 1 ) {\n\t\t\tresult += encodeInteger( value[i] );\n\t\t}\n\t}\n\n\treturn result;\n}\n\nfunction encodeInteger ( num ) {\n\tvar result = '', clamped;\n\n\tif ( num < 0 ) {\n\t\tnum = ( -num << 1 ) | 1;\n\t} else {\n\t\tnum <<= 1;\n\t}\n\n\tdo {\n\t\tclamped = num & 31;\n\t\tnum >>= 5;\n\n\t\tif ( num > 0 ) {\n\t\t\tclamped |= 32;\n\t\t}\n\n\t\tresult += integerToChar[ clamped ];\n\t} while ( num > 0 );\n\n\treturn result;\n}\n\nfunction decodeSegments(encodedSegments) {\n\tvar i = encodedSegments.length;\n\tvar segments = new Array(i);\n\n\twhile (i--) {\n\t\tsegments[i] = decode$1(encodedSegments[i]);\n\t}return segments;\n}\n\nfunction decode(mappings) {\n\tvar sourceFileIndex = 0; // second field\n\tvar sourceCodeLine = 0; // third field\n\tvar sourceCodeColumn = 0; // fourth field\n\tvar nameIndex = 0; // fifth field\n\n\tvar lines = mappings.split(';');\n\tvar numLines = lines.length;\n\tvar decoded = new Array(numLines);\n\n\tvar i = undefined;\n\tvar j = undefined;\n\tvar line = undefined;\n\tvar generatedCodeColumn = undefined;\n\tvar decodedLine = undefined;\n\tvar segments = undefined;\n\tvar segment = undefined;\n\tvar result = undefined;\n\n\tfor (i = 0; i < numLines; i += 1) {\n\t\tline = lines[i];\n\n\t\tgeneratedCodeColumn = 0; // first field - reset each time\n\t\tdecodedLine = [];\n\n\t\tsegments = decodeSegments(line.split(','));\n\n\t\tfor (j = 0; j < segments.length; j += 1) {\n\t\t\tsegment = segments[j];\n\n\t\t\tif (!segment.length) {\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tgeneratedCodeColumn += segment[0];\n\n\t\t\tresult = [generatedCodeColumn];\n\t\t\tdecodedLine.push(result);\n\n\t\t\tif (segment.length === 1) {\n\t\t\t\t// only one field!\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tsourceFileIndex += segment[1];\n\t\t\tsourceCodeLine += segment[2];\n\t\t\tsourceCodeColumn += segment[3];\n\n\t\t\tresult.push(sourceFileIndex, sourceCodeLine, sourceCodeColumn);\n\n\t\t\tif (segment.length === 5) {\n\t\t\t\tnameIndex += segment[4];\n\t\t\t\tresult.push(nameIndex);\n\t\t\t}\n\t\t}\n\n\t\tdecoded[i] = decodedLine;\n\t}\n\n\treturn decoded;\n}\n\nfunction encode(decoded) {\n\tvar offsets = {\n\t\tgeneratedCodeColumn: 0,\n\t\tsourceFileIndex: 0, // second field\n\t\tsourceCodeLine: 0, // third field\n\t\tsourceCodeColumn: 0, // fourth field\n\t\tnameIndex: 0 // fifth field\n\t};\n\n\treturn decoded.map(function (line) {\n\t\toffsets.generatedCodeColumn = 0; // first field - reset each time\n\t\treturn line.map(encodeSegment).join(',');\n\t}).join(';');\n\n\tfunction encodeSegment(segment) {\n\t\tif (!segment.length) {\n\t\t\treturn segment;\n\t\t}\n\n\t\tvar result = new Array(segment.length);\n\n\t\tresult[0] = segment[0] - offsets.generatedCodeColumn;\n\t\toffsets.generatedCodeColumn = segment[0];\n\n\t\tif (segment.length === 1) {\n\t\t\t// only one field!\n\t\t\treturn encode$1(result);\n\t\t}\n\n\t\tresult[1] = segment[1] - offsets.sourceFileIndex;\n\t\tresult[2] = segment[2] - offsets.sourceCodeLine;\n\t\tresult[3] = segment[3] - offsets.sourceCodeColumn;\n\n\t\toffsets.sourceFileIndex = segment[1];\n\t\toffsets.sourceCodeLine = segment[2];\n\t\toffsets.sourceCodeColumn = segment[3];\n\n\t\tif (segment.length === 5) {\n\t\t\tresult[4] = segment[4] - offsets.nameIndex;\n\t\t\toffsets.nameIndex = segment[4];\n\t\t}\n\n\t\treturn encode$1(result);\n\t}\n}\n\nvar charToInteger$1 = {};\nvar integerToChar$1 = {};\n\n'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/='.split( '' ).forEach( function ( char, i ) {\n\tcharToInteger$1[ char ] = i;\n\tintegerToChar$1[ i ] = char;\n});\n\n\n\nfunction encode$1$1 ( value ) {\n\tvar result, i;\n\n\tif ( typeof value === 'number' ) {\n\t\tresult = encodeInteger$1( value );\n\t} else {\n\t\tresult = '';\n\t\tfor ( i = 0; i < value.length; i += 1 ) {\n\t\t\tresult += encodeInteger$1( value[i] );\n\t\t}\n\t}\n\n\treturn result;\n}\n\nfunction encodeInteger$1 ( num ) {\n\tvar result = '', clamped;\n\n\tif ( num < 0 ) {\n\t\tnum = ( -num << 1 ) | 1;\n\t} else {\n\t\tnum <<= 1;\n\t}\n\n\tdo {\n\t\tclamped = num & 31;\n\t\tnum >>= 5;\n\n\t\tif ( num > 0 ) {\n\t\t\tclamped |= 32;\n\t\t}\n\n\t\tresult += integerToChar$1[ clamped ];\n\t} while ( num > 0 );\n\n\treturn result;\n}\n\nfunction Chunk ( start, end, content ) {\n\tthis.start = start;\n\tthis.end = end;\n\tthis.original = content;\n\n\tthis.intro = '';\n\tthis.outro = '';\n\n\tthis.content = content;\n\tthis.storeName = false;\n\tthis.edited = false;\n\n\t// we make these non-enumerable, for sanity while debugging\n\tObject.defineProperties( this, {\n\t\tprevious: { writable: true, value: null },\n\t\tnext: { writable: true, value: null }\n\t});\n}\n\nChunk.prototype = {\n\tappend: function append ( content ) {\n\t\tthis.outro += content;\n\t},\n\n\tclone: function clone () {\n\t\tvar chunk = new Chunk( this.start, this.end, this.original );\n\n\t\tchunk.intro = this.intro;\n\t\tchunk.outro = this.outro;\n\t\tchunk.content = this.content;\n\t\tchunk.storeName = this.storeName;\n\t\tchunk.edited = this.edited;\n\n\t\treturn chunk;\n\t},\n\n\tcontains: function contains ( index ) {\n\t\treturn this.start < index && index < this.end;\n\t},\n\n\teachNext: function eachNext ( fn ) {\n\t\tvar chunk = this;\n\t\twhile ( chunk ) {\n\t\t\tfn( chunk );\n\t\t\tchunk = chunk.next;\n\t\t}\n\t},\n\n\teachPrevious: function eachPrevious ( fn ) {\n\t\tvar chunk = this;\n\t\twhile ( chunk ) {\n\t\t\tfn( chunk );\n\t\t\tchunk = chunk.previous;\n\t\t}\n\t},\n\n\tedit: function edit ( content, storeName ) {\n\t\tthis.content = content;\n\t\tthis.storeName = storeName;\n\n\t\tthis.edited = true;\n\n\t\treturn this;\n\t},\n\n\tprepend: function prepend ( content ) {\n\t\tthis.intro = content + this.intro;\n\t},\n\n\tsplit: function split ( index ) {\n\t\tvar sliceIndex = index - this.start;\n\n\t\tvar originalBefore = this.original.slice( 0, sliceIndex );\n\t\tvar originalAfter = this.original.slice( sliceIndex );\n\n\t\tthis.original = originalBefore;\n\n\t\tvar newChunk = new Chunk( index, this.end, originalAfter );\n\t\tnewChunk.outro = this.outro;\n\t\tthis.outro = '';\n\n\t\tthis.end = index;\n\n\t\tif ( this.edited ) {\n\t\t\t// TODO is this block necessary?...\n\t\t\tnewChunk.edit( '', false );\n\t\t\tthis.content = '';\n\t\t} else {\n\t\t\tthis.content = originalBefore;\n\t\t}\n\n\t\tnewChunk.next = this.next;\n\t\tif ( newChunk.next ) newChunk.next.previous = newChunk;\n\t\tnewChunk.previous = this;\n\t\tthis.next = newChunk;\n\n\t\treturn newChunk;\n\t},\n\n\ttoString: function toString () {\n\t\treturn this.intro + this.content + this.outro;\n\t},\n\n\ttrimEnd: function trimEnd ( rx ) {\n\t\tthis.outro = this.outro.replace( rx, '' );\n\t\tif ( this.outro.length ) return true;\n\n\t\tvar trimmed = this.content.replace( rx, '' );\n\n\t\tif ( trimmed.length ) {\n\t\t\tif ( trimmed !== this.content ) {\n\t\t\t\tthis.split( this.start + trimmed.length ).edit( '', false );\n\t\t\t}\n\n\t\t\treturn true;\n\t\t} else {\n\t\t\tthis.edit( '', false );\n\n\t\t\tthis.intro = this.intro.replace( rx, '' );\n\t\t\tif ( this.intro.length ) return true;\n\t\t}\n\t},\n\n\ttrimStart: function trimStart ( rx ) {\n\t\tthis.intro = this.intro.replace( rx, '' );\n\t\tif ( this.intro.length ) return true;\n\n\t\tvar trimmed = this.content.replace( rx, '' );\n\n\t\tif ( trimmed.length ) {\n\t\t\tif ( trimmed !== this.content ) {\n\t\t\t\tthis.split( this.end - trimmed.length );\n\t\t\t\tthis.edit( '', false );\n\t\t\t}\n\n\t\t\treturn true;\n\t\t} else {\n\t\t\tthis.edit( '', false );\n\n\t\t\tthis.outro = this.outro.replace( rx, '' );\n\t\t\tif ( this.outro.length ) return true;\n\t\t}\n\t}\n};\n\nvar _btoa;\n\nif ( typeof window !== 'undefined' && typeof window.btoa === 'function' ) {\n\t_btoa = window.btoa;\n} else if ( typeof Buffer === 'function' ) {\n\t_btoa = function (str) { return new Buffer( str ).toString( 'base64' ); };\n} else {\n\t_btoa = function () {\n\t\tthrow new Error( 'Unsupported environment: `window.btoa` or `Buffer` should be supported.' );\n\t};\n}\n\nvar btoa = _btoa;\n\nfunction SourceMap ( properties ) {\n\tthis.version = 3;\n\n\tthis.file           = properties.file;\n\tthis.sources        = properties.sources;\n\tthis.sourcesContent = properties.sourcesContent;\n\tthis.names          = properties.names;\n\tthis.mappings       = properties.mappings;\n}\n\nSourceMap.prototype = {\n\ttoString: function toString () {\n\t\treturn JSON.stringify( this );\n\t},\n\n\ttoUrl: function toUrl () {\n\t\treturn 'data:application/json;charset=utf-8;base64,' + btoa( this.toString() );\n\t}\n};\n\nfunction guessIndent ( code ) {\n\tvar lines = code.split( '\\n' );\n\n\tvar tabbed = lines.filter( function (line) { return /^\\t+/.test( line ); } );\n\tvar spaced = lines.filter( function (line) { return /^ {2,}/.test( line ); } );\n\n\tif ( tabbed.length === 0 && spaced.length === 0 ) {\n\t\treturn null;\n\t}\n\n\t// More lines tabbed than spaced? Assume tabs, and\n\t// default to tabs in the case of a tie (or nothing\n\t// to go on)\n\tif ( tabbed.length >= spaced.length ) {\n\t\treturn '\\t';\n\t}\n\n\t// Otherwise, we need to guess the multiple\n\tvar min = spaced.reduce( function ( previous, current ) {\n\t\tvar numSpaces = /^ +/.exec( current )[0].length;\n\t\treturn Math.min( numSpaces, previous );\n\t}, Infinity );\n\n\treturn new Array( min + 1 ).join( ' ' );\n}\n\nfunction getLocator ( source ) {\n\tvar originalLines = source.split( '\\n' );\n\n\tvar start = 0;\n\tvar lineRanges = originalLines.map( function ( line, i ) {\n\t\tvar end = start + line.length + 1;\n\t\tvar range = { start: start, end: end, line: i };\n\n\t\tstart = end;\n\t\treturn range;\n\t});\n\n\tvar i = 0;\n\n\tfunction rangeContains ( range, index ) {\n\t\treturn range.start <= index && index < range.end;\n\t}\n\n\tfunction getLocation ( range, index ) {\n\t\treturn { line: range.line, column: index - range.start };\n\t}\n\n\treturn function locate ( index ) {\n\t\tvar range = lineRanges[i];\n\n\t\tvar d = index >= range.end ? 1 : -1;\n\n\t\twhile ( range ) {\n\t\t\tif ( rangeContains( range, index ) ) return getLocation( range, index );\n\n\t\t\ti += d;\n\t\t\trange = lineRanges[i];\n\t\t}\n\t};\n}\n\nvar nonWhitespace = /\\S/;\n\nfunction encodeMappings ( original, intro, outro, chunk, hires, sourcemapLocations, sourceIndex, offsets, names ) {\n\tvar rawLines = [];\n\n\tvar generatedCodeLine = intro.split( '\\n' ).length - 1;\n\tvar rawSegments = rawLines[ generatedCodeLine ] = [];\n\n\tvar generatedCodeColumn = 0;\n\n\tvar locate = getLocator( original );\n\n\tfunction addEdit ( content, original, loc, nameIndex, i ) {\n\t\tif ( i || ( content.length && nonWhitespace.test( content ) ) ) {\n\t\t\trawSegments.push({\n\t\t\t\tgeneratedCodeLine: generatedCodeLine,\n\t\t\t\tgeneratedCodeColumn: generatedCodeColumn,\n\t\t\t\tsourceCodeLine: loc.line,\n\t\t\t\tsourceCodeColumn: loc.column,\n\t\t\t\tsourceCodeName: nameIndex,\n\t\t\t\tsourceIndex: sourceIndex\n\t\t\t});\n\t\t}\n\n\t\tvar lines = content.split( '\\n' );\n\t\tvar lastLine = lines.pop();\n\n\t\tif ( lines.length ) {\n\t\t\tgeneratedCodeLine += lines.length;\n\t\t\trawLines[ generatedCodeLine ] = rawSegments = [];\n\t\t\tgeneratedCodeColumn = lastLine.length;\n\t\t} else {\n\t\t\tgeneratedCodeColumn += lastLine.length;\n\t\t}\n\n\t\tlines = original.split( '\\n' );\n\t\tlastLine = lines.pop();\n\n\t\tif ( lines.length ) {\n\t\t\tloc.line += lines.length;\n\t\t\tloc.column = lastLine.length;\n\t\t} else {\n\t\t\tloc.column += lastLine.length;\n\t\t}\n\t}\n\n\tfunction addUneditedChunk ( chunk, loc ) {\n\t\tvar originalCharIndex = chunk.start;\n\t\tvar first = true;\n\n\t\twhile ( originalCharIndex < chunk.end ) {\n\t\t\tif ( hires || first || sourcemapLocations[ originalCharIndex ] ) {\n\t\t\t\trawSegments.push({\n\t\t\t\t\tgeneratedCodeLine: generatedCodeLine,\n\t\t\t\t\tgeneratedCodeColumn: generatedCodeColumn,\n\t\t\t\t\tsourceCodeLine: loc.line,\n\t\t\t\t\tsourceCodeColumn: loc.column,\n\t\t\t\t\tsourceCodeName: -1,\n\t\t\t\t\tsourceIndex: sourceIndex\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tif ( original[ originalCharIndex ] === '\\n' ) {\n\t\t\t\tloc.line += 1;\n\t\t\t\tloc.column = 0;\n\t\t\t\tgeneratedCodeLine += 1;\n\t\t\t\trawLines[ generatedCodeLine ] = rawSegments = [];\n\t\t\t\tgeneratedCodeColumn = 0;\n\t\t\t} else {\n\t\t\t\tloc.column += 1;\n\t\t\t\tgeneratedCodeColumn += 1;\n\t\t\t}\n\n\t\t\toriginalCharIndex += 1;\n\t\t\tfirst = false;\n\t\t}\n\t}\n\n\tvar hasContent = false;\n\n\twhile ( chunk ) {\n\t\tvar loc = locate( chunk.start );\n\n\t\tif ( chunk.intro.length ) {\n\t\t\taddEdit( chunk.intro, '', loc, -1, hasContent );\n\t\t}\n\n\t\tif ( chunk.edited ) {\n\t\t\taddEdit( chunk.content, chunk.original, loc, chunk.storeName ? names.indexOf( chunk.original ) : -1, hasContent );\n\t\t} else {\n\t\t\taddUneditedChunk( chunk, loc );\n\t\t}\n\n\t\tif ( chunk.outro.length ) {\n\t\t\taddEdit( chunk.outro, '', loc, -1, hasContent );\n\t\t}\n\n\t\tif ( chunk.content || chunk.intro || chunk.outro ) hasContent = true;\n\n\t\tvar nextChunk = chunk.next;\n\t\tchunk = nextChunk;\n\t}\n\n\toffsets.sourceIndex = offsets.sourceIndex || 0;\n\toffsets.sourceCodeLine = offsets.sourceCodeLine || 0;\n\toffsets.sourceCodeColumn = offsets.sourceCodeColumn || 0;\n\toffsets.sourceCodeName = offsets.sourceCodeName || 0;\n\n\tvar outroSemis = outro.split( '\\n' ).map( function () { return ''; } ).join( ';' );\n\n\tvar encoded = rawLines.map( function (segments) {\n\t\tvar generatedCodeColumn = 0;\n\n\t\treturn segments.map( function (segment) {\n\t\t\tvar arr = [\n\t\t\t\tsegment.generatedCodeColumn - generatedCodeColumn,\n\t\t\t\tsegment.sourceIndex - offsets.sourceIndex,\n\t\t\t\tsegment.sourceCodeLine - offsets.sourceCodeLine,\n\t\t\t\tsegment.sourceCodeColumn - offsets.sourceCodeColumn\n\t\t\t];\n\n\t\t\tgeneratedCodeColumn = segment.generatedCodeColumn;\n\t\t\toffsets.sourceIndex = segment.sourceIndex;\n\t\t\toffsets.sourceCodeLine = segment.sourceCodeLine;\n\t\t\toffsets.sourceCodeColumn = segment.sourceCodeColumn;\n\n\t\t\tif ( ~segment.sourceCodeName ) {\n\t\t\t\tarr.push( segment.sourceCodeName - offsets.sourceCodeName );\n\t\t\t\toffsets.sourceCodeName = segment.sourceCodeName;\n\t\t\t}\n\n\t\t\treturn encode$1$1( arr );\n\t\t}).join( ',' );\n\t}).join( ';' ) + outroSemis;\n\n\treturn encoded;\n}\n\nfunction getRelativePath ( from, to ) {\n\tvar fromParts = from.split( /[\\/\\\\]/ );\n\tvar toParts = to.split( /[\\/\\\\]/ );\n\n\tfromParts.pop(); // get dirname\n\n\twhile ( fromParts[0] === toParts[0] ) {\n\t\tfromParts.shift();\n\t\ttoParts.shift();\n\t}\n\n\tif ( fromParts.length ) {\n\t\tvar i = fromParts.length;\n\t\twhile ( i-- ) fromParts[i] = '..';\n\t}\n\n\treturn fromParts.concat( toParts ).join( '/' );\n}\n\nvar toString = Object.prototype.toString;\n\nfunction isObject ( thing ) {\n\treturn toString.call( thing ) === '[object Object]';\n}\n\nfunction MagicString ( string, options ) {\n\tif ( options === void 0 ) options = {};\n\n\tvar chunk = new Chunk( 0, string.length, string );\n\n\tObject.defineProperties( this, {\n\t\toriginal:              { writable: true, value: string },\n\t\toutro:                 { writable: true, value: '' },\n\t\tintro:                 { writable: true, value: '' },\n\t\tfirstChunk:            { writable: true, value: chunk },\n\t\tlastChunk:             { writable: true, value: chunk },\n\t\tlastSearchedChunk:     { writable: true, value: chunk },\n\t\tbyStart:               { writable: true, value: {} },\n\t\tbyEnd:                 { writable: true, value: {} },\n\t\tfilename:              { writable: true, value: options.filename },\n\t\tindentExclusionRanges: { writable: true, value: options.indentExclusionRanges },\n\t\tsourcemapLocations:    { writable: true, value: {} },\n\t\tstoredNames:           { writable: true, value: {} },\n\t\tindentStr:             { writable: true, value: guessIndent( string ) }\n\t});\n\n\tthis.byStart[ 0 ] = chunk;\n\tthis.byEnd[ string.length ] = chunk;\n}\n\nMagicString.prototype = {\n\taddSourcemapLocation: function addSourcemapLocation ( char ) {\n\t\tthis.sourcemapLocations[ char ] = true;\n\t},\n\n\tappend: function append ( content ) {\n\t\tif ( typeof content !== 'string' ) throw new TypeError( 'outro content must be a string' );\n\n\t\tthis.outro += content;\n\t\treturn this;\n\t},\n\n\tclone: function clone () {\n\t\tvar cloned = new MagicString( this.original, { filename: this.filename });\n\n\t\tvar originalChunk = this.firstChunk;\n\t\tvar clonedChunk = cloned.firstChunk = cloned.lastSearchedChunk = originalChunk.clone();\n\n\t\twhile ( originalChunk ) {\n\t\t\tcloned.byStart[ clonedChunk.start ] = clonedChunk;\n\t\t\tcloned.byEnd[ clonedChunk.end ] = clonedChunk;\n\n\t\t\tvar nextOriginalChunk = originalChunk.next;\n\t\t\tvar nextClonedChunk = nextOriginalChunk && nextOriginalChunk.clone();\n\n\t\t\tif ( nextClonedChunk ) {\n\t\t\t\tclonedChunk.next = nextClonedChunk;\n\t\t\t\tnextClonedChunk.previous = clonedChunk;\n\n\t\t\t\tclonedChunk = nextClonedChunk;\n\t\t\t}\n\n\t\t\toriginalChunk = nextOriginalChunk;\n\t\t}\n\n\t\tcloned.lastChunk = clonedChunk;\n\n\t\tif ( this.indentExclusionRanges ) {\n\t\t\tcloned.indentExclusionRanges = typeof this.indentExclusionRanges[0] === 'number' ?\n\t\t\t\t[ this.indentExclusionRanges[0], this.indentExclusionRanges[1] ] :\n\t\t\t\tthis.indentExclusionRanges.map( function (range) { return [ range.start, range.end ]; } );\n\t\t}\n\n\t\tObject.keys( this.sourcemapLocations ).forEach( function (loc) {\n\t\t\tcloned.sourcemapLocations[ loc ] = true;\n\t\t});\n\n\t\treturn cloned;\n\t},\n\n\tgenerateMap: function generateMap ( options ) {\n\t\toptions = options || {};\n\n\t\tvar names = Object.keys( this.storedNames );\n\n\t\tvar map = new SourceMap({\n\t\t\tfile: ( options.file ? options.file.split( /[\\/\\\\]/ ).pop() : null ),\n\t\t\tsources: [ options.source ? getRelativePath( options.file || '', options.source ) : null ],\n\t\t\tsourcesContent: options.includeContent ? [ this.original ] : [ null ],\n\t\t\tnames: names,\n\t\t\tmappings: this.getMappings( options.hires, 0, {}, names )\n\t\t});\n\t\treturn map;\n\t},\n\n\tgetIndentString: function getIndentString () {\n\t\treturn this.indentStr === null ? '\\t' : this.indentStr;\n\t},\n\n\tgetMappings: function getMappings ( hires, sourceIndex, offsets, names ) {\n\t\treturn encodeMappings( this.original, this.intro, this.outro, this.firstChunk, hires, this.sourcemapLocations, sourceIndex, offsets, names );\n\t},\n\n\tindent: function indent ( indentStr, options ) {\n\t\tvar this$1 = this;\n\n\t\tvar pattern = /^[^\\r\\n]/gm;\n\n\t\tif ( isObject( indentStr ) ) {\n\t\t\toptions = indentStr;\n\t\t\tindentStr = undefined;\n\t\t}\n\n\t\tindentStr = indentStr !== undefined ? indentStr : ( this.indentStr || '\\t' );\n\n\t\tif ( indentStr === '' ) return this; // noop\n\n\t\toptions = options || {};\n\n\t\t// Process exclusion ranges\n\t\tvar isExcluded = {};\n\n\t\tif ( options.exclude ) {\n\t\t\tvar exclusions = typeof options.exclude[0] === 'number' ? [ options.exclude ] : options.exclude;\n\t\t\texclusions.forEach( function (exclusion) {\n\t\t\t\tfor ( var i = exclusion[0]; i < exclusion[1]; i += 1 ) {\n\t\t\t\t\tisExcluded[i] = true;\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\tvar shouldIndentNextCharacter = options.indentStart !== false;\n\t\tvar replacer = function (match) {\n\t\t\tif ( shouldIndentNextCharacter ) return (\"\" + indentStr + match);\n\t\t\tshouldIndentNextCharacter = true;\n\t\t\treturn match;\n\t\t};\n\n\t\tthis.intro = this.intro.replace( pattern, replacer );\n\n\t\tvar charIndex = 0;\n\n\t\tvar chunk = this.firstChunk;\n\n\t\twhile ( chunk ) {\n\t\t\tvar end = chunk.end;\n\n\t\t\tif ( chunk.edited ) {\n\t\t\t\tif ( !isExcluded[ charIndex ] ) {\n\t\t\t\t\tchunk.content = chunk.content.replace( pattern, replacer );\n\n\t\t\t\t\tif ( chunk.content.length ) {\n\t\t\t\t\t\tshouldIndentNextCharacter = chunk.content[ chunk.content.length - 1 ] === '\\n';\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tcharIndex = chunk.start;\n\n\t\t\t\twhile ( charIndex < end ) {\n\t\t\t\t\tif ( !isExcluded[ charIndex ] ) {\n\t\t\t\t\t\tvar char = this$1.original[ charIndex ];\n\n\t\t\t\t\t\tif ( char === '\\n' ) {\n\t\t\t\t\t\t\tshouldIndentNextCharacter = true;\n\t\t\t\t\t\t} else if ( char !== '\\r' && shouldIndentNextCharacter ) {\n\t\t\t\t\t\t\tshouldIndentNextCharacter = false;\n\n\t\t\t\t\t\t\tif ( charIndex === chunk.start ) {\n\t\t\t\t\t\t\t\tchunk.prepend( indentStr );\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tvar rhs = chunk.split( charIndex );\n\t\t\t\t\t\t\t\trhs.prepend( indentStr );\n\n\t\t\t\t\t\t\t\tthis$1.byStart[ charIndex ] = rhs;\n\t\t\t\t\t\t\t\tthis$1.byEnd[ charIndex ] = chunk;\n\n\t\t\t\t\t\t\t\tchunk = rhs;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tcharIndex += 1;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tcharIndex = chunk.end;\n\t\t\tchunk = chunk.next;\n\t\t}\n\n\t\tthis.outro = this.outro.replace( pattern, replacer );\n\n\t\treturn this;\n\t},\n\n\tinsert: function insert () {\n\t\tthrow new Error( 'magicString.insert(...) is deprecated. Use insertRight(...) or insertLeft(...)' );\n\t},\n\n\tinsertLeft: function insertLeft ( index, content ) {\n\t\tif ( typeof content !== 'string' ) throw new TypeError( 'inserted content must be a string' );\n\n\t\tthis._split( index );\n\n\t\tvar chunk = this.byEnd[ index ];\n\n\t\tif ( chunk ) {\n\t\t\tchunk.append( content );\n\t\t} else {\n\t\t\tthis.intro += content;\n\t\t}\n\n\t\treturn this;\n\t},\n\n\tinsertRight: function insertRight ( index, content ) {\n\t\tif ( typeof content !== 'string' ) throw new TypeError( 'inserted content must be a string' );\n\n\t\tthis._split( index );\n\n\t\tvar chunk = this.byStart[ index ];\n\n\t\tif ( chunk ) {\n\t\t\tchunk.prepend( content );\n\t\t} else {\n\t\t\tthis.outro += content;\n\t\t}\n\n\t\treturn this;\n\t},\n\n\tmove: function move ( start, end, index ) {\n\t\tif ( index >= start && index <= end ) throw new Error( 'Cannot move a selection inside itself' );\n\n\t\tthis._split( start );\n\t\tthis._split( end );\n\t\tthis._split( index );\n\n\t\tvar first = this.byStart[ start ];\n\t\tvar last = this.byEnd[ end ];\n\n\t\tvar oldLeft = first.previous;\n\t\tvar oldRight = last.next;\n\n\t\tvar newRight = this.byStart[ index ];\n\t\tif ( !newRight && last === this.lastChunk ) return this;\n\t\tvar newLeft = newRight ? newRight.previous : this.lastChunk;\n\n\t\tif ( oldLeft ) oldLeft.next = oldRight;\n\t\tif ( oldRight ) oldRight.previous = oldLeft;\n\n\t\tif ( newLeft ) newLeft.next = first;\n\t\tif ( newRight ) newRight.previous = last;\n\n\t\tif ( !first.previous ) this.firstChunk = last.next;\n\t\tif ( !last.next ) {\n\t\t\tthis.lastChunk = first.previous;\n\t\t\tthis.lastChunk.next = null;\n\t\t}\n\n\t\tfirst.previous = newLeft;\n\t\tlast.next = newRight;\n\n\t\tif ( !newLeft ) this.firstChunk = first;\n\t\tif ( !newRight ) this.lastChunk = last;\n\n\t\treturn this;\n\t},\n\n\toverwrite: function overwrite ( start, end, content, storeName ) {\n\t\tvar this$1 = this;\n\n\t\tif ( typeof content !== 'string' ) throw new TypeError( 'replacement content must be a string' );\n\n\t\twhile ( start < 0 ) start += this$1.original.length;\n\t\twhile ( end < 0 ) end += this$1.original.length;\n\n\t\tif ( end > this.original.length ) throw new Error( 'end is out of bounds' );\n\t\tif ( start === end ) throw new Error( 'Cannot overwrite a zero-length range – use insertLeft or insertRight instead' );\n\n\t\tthis._split( start );\n\t\tthis._split( end );\n\n\t\tif ( storeName ) {\n\t\t\tvar original = this.original.slice( start, end );\n\t\t\tthis.storedNames[ original ] = true;\n\t\t}\n\n\t\tvar first = this.byStart[ start ];\n\t\tvar last = this.byEnd[ end ];\n\n\t\tif ( first ) {\n\t\t\tfirst.edit( content, storeName );\n\n\t\t\tif ( first !== last ) {\n\t\t\t\tfirst.outro = '';\n\n\t\t\t\tvar chunk = first.next;\n\t\t\t\twhile ( chunk !== last ) {\n\t\t\t\t\tchunk.edit( '', false );\n\t\t\t\t\tchunk.intro = chunk.outro = '';\n\t\t\t\t\tchunk = chunk.next;\n\t\t\t\t}\n\n\t\t\t\tchunk.edit( '', false );\n\t\t\t\tchunk.intro = '';\n\t\t\t}\n\t\t}\n\n\t\telse {\n\t\t\t// must be inserting at the end\n\t\t\tvar newChunk = new Chunk( start, end, '' ).edit( content, storeName );\n\n\t\t\t// TODO last chunk in the array may not be the last chunk, if it's moved...\n\t\t\tlast.next = newChunk;\n\t\t\tnewChunk.previous = last;\n\t\t}\n\n\t\treturn this;\n\t},\n\n\tprepend: function prepend ( content ) {\n\t\tif ( typeof content !== 'string' ) throw new TypeError( 'outro content must be a string' );\n\n\t\tthis.intro = content + this.intro;\n\t\treturn this;\n\t},\n\n\tremove: function remove ( start, end ) {\n\t\tvar this$1 = this;\n\n\t\twhile ( start < 0 ) start += this$1.original.length;\n\t\twhile ( end < 0 ) end += this$1.original.length;\n\n\t\tif ( start === end ) return this;\n\n\t\tif ( start < 0 || end > this.original.length ) throw new Error( 'Character is out of bounds' );\n\t\tif ( start > end ) throw new Error( 'end must be greater than start' );\n\n\t\treturn this.overwrite( start, end, '', false );\n\t},\n\n\tslice: function slice ( start, end ) {\n\t\tvar this$1 = this;\n\t\tif ( start === void 0 ) start = 0;\n\t\tif ( end === void 0 ) end = this.original.length;\n\n\t\twhile ( start < 0 ) start += this$1.original.length;\n\t\twhile ( end < 0 ) end += this$1.original.length;\n\n\t\tvar result = '';\n\n\t\t// find start chunk\n\t\tvar chunk = this.firstChunk;\n\t\twhile ( chunk && ( chunk.start > start || chunk.end <= start ) ) {\n\n\t\t\t// found end chunk before start\n\t\t\tif ( chunk.start < end && chunk.end >= end ) {\n\t\t\t\treturn result;\n\t\t\t}\n\n\t\t\tchunk = chunk.next;\n\t\t}\n\n\t\tif ( chunk && chunk.edited && chunk.start !== start ) throw new Error((\"Cannot use replaced character \" + start + \" as slice start anchor.\"));\n\n\t\tvar startChunk = chunk;\n\t\twhile ( chunk ) {\n\t\t\tif ( chunk.intro && ( startChunk !== chunk || chunk.start === start ) ) {\n\t\t\t\tresult += chunk.intro;\n\t\t\t}\n\n\t\t\tvar containsEnd = chunk.start < end && chunk.end >= end;\n\t\t\tif ( containsEnd && chunk.edited && chunk.end !== end ) throw new Error((\"Cannot use replaced character \" + end + \" as slice end anchor.\"));\n\n\t\t\tvar sliceStart = startChunk === chunk ? start - chunk.start : 0;\n\t\t\tvar sliceEnd = containsEnd ? chunk.content.length + end - chunk.end : chunk.content.length;\n\n\t\t\tresult += chunk.content.slice( sliceStart, sliceEnd );\n\n\t\t\tif ( chunk.outro && ( !containsEnd || chunk.end === end ) ) {\n\t\t\t\tresult += chunk.outro;\n\t\t\t}\n\n\t\t\tif ( containsEnd ) {\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tchunk = chunk.next;\n\t\t}\n\n\t\treturn result;\n\t},\n\n\t// TODO deprecate this? not really very useful\n\tsnip: function snip ( start, end ) {\n\t\tvar clone = this.clone();\n\t\tclone.remove( 0, start );\n\t\tclone.remove( end, clone.original.length );\n\n\t\treturn clone;\n\t},\n\n\t_split: function _split ( index ) {\n\t\tvar this$1 = this;\n\n\t\tif ( this.byStart[ index ] || this.byEnd[ index ] ) return;\n\n\t\tvar chunk = this.lastSearchedChunk;\n\t\tvar searchForward = index > chunk.end;\n\n\t\twhile ( true ) {\n\t\t\tif ( chunk.contains( index ) ) return this$1._splitChunk( chunk, index );\n\n\t\t\tchunk = searchForward ?\n\t\t\t\tthis$1.byStart[ chunk.end ] :\n\t\t\t\tthis$1.byEnd[ chunk.start ];\n\t\t}\n\t},\n\n\t_splitChunk: function _splitChunk ( chunk, index ) {\n\t\tif ( chunk.edited && chunk.content.length ) { // zero-length edited chunks are a special case (overlapping replacements)\n\t\t\tvar loc = getLocator( this.original )( index );\n\t\t\tthrow new Error( (\"Cannot split a chunk that has already been edited (\" + (loc.line) + \":\" + (loc.column) + \" – \\\"\" + (chunk.original) + \"\\\")\") );\n\t\t}\n\n\t\tvar newChunk = chunk.split( index );\n\n\t\tthis.byEnd[ index ] = chunk;\n\t\tthis.byStart[ index ] = newChunk;\n\t\tthis.byEnd[ newChunk.end ] = newChunk;\n\n\t\tif ( chunk === this.lastChunk ) this.lastChunk = newChunk;\n\n\t\tthis.lastSearchedChunk = chunk;\n\t\treturn true;\n\t},\n\n\ttoString: function toString () {\n\t\tvar str = this.intro;\n\n\t\tvar chunk = this.firstChunk;\n\t\twhile ( chunk ) {\n\t\t\tstr += chunk.toString();\n\t\t\tchunk = chunk.next;\n\t\t}\n\n\t\treturn str + this.outro;\n\t},\n\n\ttrimLines: function trimLines () {\n\t\treturn this.trim('[\\\\r\\\\n]');\n\t},\n\n\ttrim: function trim ( charType ) {\n\t\treturn this.trimStart( charType ).trimEnd( charType );\n\t},\n\n\ttrimEnd: function trimEnd ( charType ) {\n\t\tvar this$1 = this;\n\n\t\tvar rx = new RegExp( ( charType || '\\\\s' ) + '+$' );\n\n\t\tthis.outro = this.outro.replace( rx, '' );\n\t\tif ( this.outro.length ) return this;\n\n\t\tvar chunk = this.lastChunk;\n\n\t\tdo {\n\t\t\tvar end = chunk.end;\n\t\t\tvar aborted = chunk.trimEnd( rx );\n\n\t\t\t// if chunk was trimmed, we have a new lastChunk\n\t\t\tif ( chunk.end !== end ) {\n\t\t\t\tthis$1.lastChunk = chunk.next;\n\n\t\t\t\tthis$1.byEnd[ chunk.end ] = chunk;\n\t\t\t\tthis$1.byStart[ chunk.next.start ] = chunk.next;\n\t\t\t}\n\n\t\t\tif ( aborted ) return this$1;\n\t\t\tchunk = chunk.previous;\n\t\t} while ( chunk );\n\n\t\treturn this;\n\t},\n\n\ttrimStart: function trimStart ( charType ) {\n\t\tvar this$1 = this;\n\n\t\tvar rx = new RegExp( '^' + ( charType || '\\\\s' ) + '+' );\n\n\t\tthis.intro = this.intro.replace( rx, '' );\n\t\tif ( this.intro.length ) return this;\n\n\t\tvar chunk = this.firstChunk;\n\n\t\tdo {\n\t\t\tvar end = chunk.end;\n\t\t\tvar aborted = chunk.trimStart( rx );\n\n\t\t\tif ( chunk.end !== end ) {\n\t\t\t\t// special case...\n\t\t\t\tif ( chunk === this$1.lastChunk ) this$1.lastChunk = chunk.next;\n\n\t\t\t\tthis$1.byEnd[ chunk.end ] = chunk;\n\t\t\t\tthis$1.byStart[ chunk.next.start ] = chunk.next;\n\t\t\t}\n\n\t\t\tif ( aborted ) return this$1;\n\t\t\tchunk = chunk.next;\n\t\t} while ( chunk );\n\n\t\treturn this;\n\t}\n};\n\nvar hasOwnProp = Object.prototype.hasOwnProperty;\n\nfunction Bundle$2 ( options ) {\n\tif ( options === void 0 ) options = {};\n\n\tthis.intro = options.intro || '';\n\tthis.separator = options.separator !== undefined ? options.separator : '\\n';\n\n\tthis.sources = [];\n\n\tthis.uniqueSources = [];\n\tthis.uniqueSourceIndexByFilename = {};\n}\n\nBundle$2.prototype = {\n\taddSource: function addSource ( source ) {\n\t\tif ( source instanceof MagicString ) {\n\t\t\treturn this.addSource({\n\t\t\t\tcontent: source,\n\t\t\t\tfilename: source.filename,\n\t\t\t\tseparator: this.separator\n\t\t\t});\n\t\t}\n\n\t\tif ( !isObject( source ) || !source.content ) {\n\t\t\tthrow new Error( 'bundle.addSource() takes an object with a `content` property, which should be an instance of MagicString, and an optional `filename`' );\n\t\t}\n\n\t\t[ 'filename', 'indentExclusionRanges', 'separator' ].forEach( function (option) {\n\t\t\tif ( !hasOwnProp.call( source, option ) ) source[ option ] = source.content[ option ];\n\t\t});\n\n\t\tif ( source.separator === undefined ) { // TODO there's a bunch of this sort of thing, needs cleaning up\n\t\t\tsource.separator = this.separator;\n\t\t}\n\n\t\tif ( source.filename ) {\n\t\t\tif ( !hasOwnProp.call( this.uniqueSourceIndexByFilename, source.filename ) ) {\n\t\t\t\tthis.uniqueSourceIndexByFilename[ source.filename ] = this.uniqueSources.length;\n\t\t\t\tthis.uniqueSources.push({ filename: source.filename, content: source.content.original });\n\t\t\t} else {\n\t\t\t\tvar uniqueSource = this.uniqueSources[ this.uniqueSourceIndexByFilename[ source.filename ] ];\n\t\t\t\tif ( source.content.original !== uniqueSource.content ) {\n\t\t\t\t\tthrow new Error( (\"Illegal source: same filename (\" + (source.filename) + \"), different contents\") );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tthis.sources.push( source );\n\t\treturn this;\n\t},\n\n\tappend: function append ( str, options ) {\n\t\tthis.addSource({\n\t\t\tcontent: new MagicString( str ),\n\t\t\tseparator: ( options && options.separator ) || ''\n\t\t});\n\n\t\treturn this;\n\t},\n\n\tclone: function clone () {\n\t\tvar bundle = new Bundle$2({\n\t\t\tintro: this.intro,\n\t\t\tseparator: this.separator\n\t\t});\n\n\t\tthis.sources.forEach( function (source) {\n\t\t\tbundle.addSource({\n\t\t\t\tfilename: source.filename,\n\t\t\t\tcontent: source.content.clone(),\n\t\t\t\tseparator: source.separator\n\t\t\t});\n\t\t});\n\n\t\treturn bundle;\n\t},\n\n\tgenerateMap: function generateMap ( options ) {\n\t\tvar this$1 = this;\n\n\t\tvar offsets = {};\n\n\t\tvar names = [];\n\t\tthis.sources.forEach( function (source) {\n\t\t\tObject.keys( source.content.storedNames ).forEach( function (name) {\n\t\t\t\tif ( !~names.indexOf( name ) ) names.push( name );\n\t\t\t});\n\t\t});\n\n\t\tvar encoded = (\n\t\t\tgetSemis( this.intro ) +\n\t\t\tthis.sources.map( function ( source, i ) {\n\t\t\t\tvar prefix = ( i > 0 ) ? ( getSemis( source.separator ) || ',' ) : '';\n\t\t\t\tvar mappings;\n\n\t\t\t\t// we don't bother encoding sources without a filename\n\t\t\t\tif ( !source.filename ) {\n\t\t\t\t\tmappings = getSemis( source.content.toString() );\n\t\t\t\t} else {\n\t\t\t\t\tvar sourceIndex = this$1.uniqueSourceIndexByFilename[ source.filename ];\n\t\t\t\t\tmappings = source.content.getMappings( options.hires, sourceIndex, offsets, names );\n\t\t\t\t}\n\n\t\t\t\treturn prefix + mappings;\n\t\t\t}).join( '' )\n\t\t);\n\n\t\treturn new SourceMap({\n\t\t\tfile: ( options.file ? options.file.split( /[\\/\\\\]/ ).pop() : null ),\n\t\t\tsources: this.uniqueSources.map( function (source) {\n\t\t\t\treturn options.file ? getRelativePath( options.file, source.filename ) : source.filename;\n\t\t\t}),\n\t\t\tsourcesContent: this.uniqueSources.map( function (source) {\n\t\t\t\treturn options.includeContent ? source.content : null;\n\t\t\t}),\n\t\t\tnames: names,\n\t\t\tmappings: encoded\n\t\t});\n\t},\n\n\tgetIndentString: function getIndentString () {\n\t\tvar indentStringCounts = {};\n\n\t\tthis.sources.forEach( function (source) {\n\t\t\tvar indentStr = source.content.indentStr;\n\n\t\t\tif ( indentStr === null ) return;\n\n\t\t\tif ( !indentStringCounts[ indentStr ] ) indentStringCounts[ indentStr ] = 0;\n\t\t\tindentStringCounts[ indentStr ] += 1;\n\t\t});\n\n\t\treturn ( Object.keys( indentStringCounts ).sort( function ( a, b ) {\n\t\t\treturn indentStringCounts[a] - indentStringCounts[b];\n\t\t})[0] ) || '\\t';\n\t},\n\n\tindent: function indent ( indentStr ) {\n\t\tvar this$1 = this;\n\n\t\tif ( !arguments.length ) {\n\t\t\tindentStr = this.getIndentString();\n\t\t}\n\n\t\tif ( indentStr === '' ) return this; // noop\n\n\t\tvar trailingNewline = !this.intro || this.intro.slice( -1 ) === '\\n';\n\n\t\tthis.sources.forEach( function ( source, i ) {\n\t\t\tvar separator = source.separator !== undefined ? source.separator : this$1.separator;\n\t\t\tvar indentStart = trailingNewline || ( i > 0 && /\\r?\\n$/.test( separator ) );\n\n\t\t\tsource.content.indent( indentStr, {\n\t\t\t\texclude: source.indentExclusionRanges,\n\t\t\t\tindentStart: indentStart//: trailingNewline || /\\r?\\n$/.test( separator )  //true///\\r?\\n/.test( separator )\n\t\t\t});\n\n\t\t\t// TODO this is a very slow way to determine this\n\t\t\ttrailingNewline = source.content.toString().slice( 0, -1 ) === '\\n';\n\t\t});\n\n\t\tif ( this.intro ) {\n\t\t\tthis.intro = indentStr + this.intro.replace( /^[^\\n]/gm, function ( match, index ) {\n\t\t\t\treturn index > 0 ? indentStr + match : match;\n\t\t\t});\n\t\t}\n\n\t\treturn this;\n\t},\n\n\tprepend: function prepend ( str ) {\n\t\tthis.intro = str + this.intro;\n\t\treturn this;\n\t},\n\n\ttoString: function toString () {\n\t\tvar this$1 = this;\n\n\t\tvar body = this.sources.map( function ( source, i ) {\n\t\t\tvar separator = source.separator !== undefined ? source.separator : this$1.separator;\n\t\t\tvar str = ( i > 0 ? separator : '' ) + source.content.toString();\n\n\t\t\treturn str;\n\t\t}).join( '' );\n\n\t\treturn this.intro + body;\n\t},\n\n\ttrimLines: function trimLines () {\n\t\treturn this.trim('[\\\\r\\\\n]');\n\t},\n\n\ttrim: function trim ( charType ) {\n\t\treturn this.trimStart( charType ).trimEnd( charType );\n\t},\n\n\ttrimStart: function trimStart ( charType ) {\n\t\tvar this$1 = this;\n\n\t\tvar rx = new RegExp( '^' + ( charType || '\\\\s' ) + '+' );\n\t\tthis.intro = this.intro.replace( rx, '' );\n\n\t\tif ( !this.intro ) {\n\t\t\tvar source;\n\t\t\tvar i = 0;\n\n\t\t\tdo {\n\t\t\t\tsource = this$1.sources[i];\n\n\t\t\t\tif ( !source ) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tsource.content.trimStart( charType );\n\t\t\t\ti += 1;\n\t\t\t} while ( source.content.toString() === '' ); // TODO faster way to determine non-empty source?\n\t\t}\n\n\t\treturn this;\n\t},\n\n\ttrimEnd: function trimEnd ( charType ) {\n\t\tvar this$1 = this;\n\n\t\tvar rx = new RegExp( ( charType || '\\\\s' ) + '+$' );\n\n\t\tvar source;\n\t\tvar i = this.sources.length - 1;\n\n\t\tdo {\n\t\t\tsource = this$1.sources[i];\n\n\t\t\tif ( !source ) {\n\t\t\t\tthis$1.intro = this$1.intro.replace( rx, '' );\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tsource.content.trimEnd( charType );\n\t\t\ti -= 1;\n\t\t} while ( source.content.toString() === '' ); // TODO faster way to determine non-empty source?\n\n\t\treturn this;\n\t}\n};\n\nfunction getSemis ( str ) {\n\treturn new Array( str.split( '\\n' ).length ).join( ';' );\n}\n\n// Return the first non-falsy result from an array of\n// maybe-sync, maybe-promise-returning functions\nfunction first ( candidates ) {\n\treturn function () {\n\t\tvar args = [], len = arguments.length;\n\t\twhile ( len-- ) args[ len ] = arguments[ len ];\n\n\t\treturn candidates.reduce( function ( promise, candidate ) {\n\t\t\treturn promise.then( function (result) { return result != null ?\n\t\t\t\tresult :\n\t\t\t\tPromise.resolve( candidate.apply( void 0, args ) ); } );\n\t\t}, Promise.resolve() );\n\t};\n}\n\nfunction find ( array, fn ) {\n\tfor ( var i = 0; i < array.length; i += 1 ) {\n\t\tif ( fn( array[i], i ) ) return array[i];\n\t}\n\n\treturn null;\n}\n\n// Reserved word lists for various dialects of the language\n\nvar reservedWords = {\n  3: \"abstract boolean byte char class double enum export extends final float goto implements import int interface long native package private protected public short static super synchronized throws transient volatile\",\n  5: \"class enum extends super const export import\",\n  6: \"enum\",\n  strict: \"implements interface let package private protected public static yield\",\n  strictBind: \"eval arguments\"\n};\n\n// And the keywords\n\nvar ecma5AndLessKeywords = \"break case catch continue debugger default do else finally for function if return switch throw try var while with null true false instanceof typeof void delete new in this\";\n\nvar keywords = {\n  5: ecma5AndLessKeywords,\n  6: ecma5AndLessKeywords + \" const class extends export import super\"\n};\n\n// ## Character categories\n\n// Big ugly regular expressions that match characters in the\n// whitespace, identifier, and identifier-start categories. These\n// are only applied when a character is found to actually have a\n// code point above 128.\n// Generated by `bin/generate-identifier-regex.js`.\n\nvar nonASCIIidentifierStartChars = \"\\xaa\\xb5\\xba\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02c1\\u02c6-\\u02d1\\u02e0-\\u02e4\\u02ec\\u02ee\\u0370-\\u0374\\u0376\\u0377\\u037a-\\u037d\\u037f\\u0386\\u0388-\\u038a\\u038c\\u038e-\\u03a1\\u03a3-\\u03f5\\u03f7-\\u0481\\u048a-\\u052f\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u05d0-\\u05ea\\u05f0-\\u05f2\\u0620-\\u064a\\u066e\\u066f\\u0671-\\u06d3\\u06d5\\u06e5\\u06e6\\u06ee\\u06ef\\u06fa-\\u06fc\\u06ff\\u0710\\u0712-\\u072f\\u074d-\\u07a5\\u07b1\\u07ca-\\u07ea\\u07f4\\u07f5\\u07fa\\u0800-\\u0815\\u081a\\u0824\\u0828\\u0840-\\u0858\\u08a0-\\u08b4\\u08b6-\\u08bd\\u0904-\\u0939\\u093d\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098c\\u098f\\u0990\\u0993-\\u09a8\\u09aa-\\u09b0\\u09b2\\u09b6-\\u09b9\\u09bd\\u09ce\\u09dc\\u09dd\\u09df-\\u09e1\\u09f0\\u09f1\\u0a05-\\u0a0a\\u0a0f\\u0a10\\u0a13-\\u0a28\\u0a2a-\\u0a30\\u0a32\\u0a33\\u0a35\\u0a36\\u0a38\\u0a39\\u0a59-\\u0a5c\\u0a5e\\u0a72-\\u0a74\\u0a85-\\u0a8d\\u0a8f-\\u0a91\\u0a93-\\u0aa8\\u0aaa-\\u0ab0\\u0ab2\\u0ab3\\u0ab5-\\u0ab9\\u0abd\\u0ad0\\u0ae0\\u0ae1\\u0af9\\u0b05-\\u0b0c\\u0b0f\\u0b10\\u0b13-\\u0b28\\u0b2a-\\u0b30\\u0b32\\u0b33\\u0b35-\\u0b39\\u0b3d\\u0b5c\\u0b5d\\u0b5f-\\u0b61\\u0b71\\u0b83\\u0b85-\\u0b8a\\u0b8e-\\u0b90\\u0b92-\\u0b95\\u0b99\\u0b9a\\u0b9c\\u0b9e\\u0b9f\\u0ba3\\u0ba4\\u0ba8-\\u0baa\\u0bae-\\u0bb9\\u0bd0\\u0c05-\\u0c0c\\u0c0e-\\u0c10\\u0c12-\\u0c28\\u0c2a-\\u0c39\\u0c3d\\u0c58-\\u0c5a\\u0c60\\u0c61\\u0c80\\u0c85-\\u0c8c\\u0c8e-\\u0c90\\u0c92-\\u0ca8\\u0caa-\\u0cb3\\u0cb5-\\u0cb9\\u0cbd\\u0cde\\u0ce0\\u0ce1\\u0cf1\\u0cf2\\u0d05-\\u0d0c\\u0d0e-\\u0d10\\u0d12-\\u0d3a\\u0d3d\\u0d4e\\u0d54-\\u0d56\\u0d5f-\\u0d61\\u0d7a-\\u0d7f\\u0d85-\\u0d96\\u0d9a-\\u0db1\\u0db3-\\u0dbb\\u0dbd\\u0dc0-\\u0dc6\\u0e01-\\u0e30\\u0e32\\u0e33\\u0e40-\\u0e46\\u0e81\\u0e82\\u0e84\\u0e87\\u0e88\\u0e8a\\u0e8d\\u0e94-\\u0e97\\u0e99-\\u0e9f\\u0ea1-\\u0ea3\\u0ea5\\u0ea7\\u0eaa\\u0eab\\u0ead-\\u0eb0\\u0eb2\\u0eb3\\u0ebd\\u0ec0-\\u0ec4\\u0ec6\\u0edc-\\u0edf\\u0f00\\u0f40-\\u0f47\\u0f49-\\u0f6c\\u0f88-\\u0f8c\\u1000-\\u102a\\u103f\\u1050-\\u1055\\u105a-\\u105d\\u1061\\u1065\\u1066\\u106e-\\u1070\\u1075-\\u1081\\u108e\\u10a0-\\u10c5\\u10c7\\u10cd\\u10d0-\\u10fa\\u10fc-\\u1248\\u124a-\\u124d\\u1250-\\u1256\\u1258\\u125a-\\u125d\\u1260-\\u1288\\u128a-\\u128d\\u1290-\\u12b0\\u12b2-\\u12b5\\u12b8-\\u12be\\u12c0\\u12c2-\\u12c5\\u12c8-\\u12d6\\u12d8-\\u1310\\u1312-\\u1315\\u1318-\\u135a\\u1380-\\u138f\\u13a0-\\u13f5\\u13f8-\\u13fd\\u1401-\\u166c\\u166f-\\u167f\\u1681-\\u169a\\u16a0-\\u16ea\\u16ee-\\u16f8\\u1700-\\u170c\\u170e-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176c\\u176e-\\u1770\\u1780-\\u17b3\\u17d7\\u17dc\\u1820-\\u1877\\u1880-\\u18a8\\u18aa\\u18b0-\\u18f5\\u1900-\\u191e\\u1950-\\u196d\\u1970-\\u1974\\u1980-\\u19ab\\u19b0-\\u19c9\\u1a00-\\u1a16\\u1a20-\\u1a54\\u1aa7\\u1b05-\\u1b33\\u1b45-\\u1b4b\\u1b83-\\u1ba0\\u1bae\\u1baf\\u1bba-\\u1be5\\u1c00-\\u1c23\\u1c4d-\\u1c4f\\u1c5a-\\u1c7d\\u1c80-\\u1c88\\u1ce9-\\u1cec\\u1cee-\\u1cf1\\u1cf5\\u1cf6\\u1d00-\\u1dbf\\u1e00-\\u1f15\\u1f18-\\u1f1d\\u1f20-\\u1f45\\u1f48-\\u1f4d\\u1f50-\\u1f57\\u1f59\\u1f5b\\u1f5d\\u1f5f-\\u1f7d\\u1f80-\\u1fb4\\u1fb6-\\u1fbc\\u1fbe\\u1fc2-\\u1fc4\\u1fc6-\\u1fcc\\u1fd0-\\u1fd3\\u1fd6-\\u1fdb\\u1fe0-\\u1fec\\u1ff2-\\u1ff4\\u1ff6-\\u1ffc\\u2071\\u207f\\u2090-\\u209c\\u2102\\u2107\\u210a-\\u2113\\u2115\\u2118-\\u211d\\u2124\\u2126\\u2128\\u212a-\\u2139\\u213c-\\u213f\\u2145-\\u2149\\u214e\\u2160-\\u2188\\u2c00-\\u2c2e\\u2c30-\\u2c5e\\u2c60-\\u2ce4\\u2ceb-\\u2cee\\u2cf2\\u2cf3\\u2d00-\\u2d25\\u2d27\\u2d2d\\u2d30-\\u2d67\\u2d6f\\u2d80-\\u2d96\\u2da0-\\u2da6\\u2da8-\\u2dae\\u2db0-\\u2db6\\u2db8-\\u2dbe\\u2dc0-\\u2dc6\\u2dc8-\\u2dce\\u2dd0-\\u2dd6\\u2dd8-\\u2dde\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303c\\u3041-\\u3096\\u309b-\\u309f\\u30a1-\\u30fa\\u30fc-\\u30ff\\u3105-\\u312d\\u3131-\\u318e\\u31a0-\\u31ba\\u31f0-\\u31ff\\u3400-\\u4db5\\u4e00-\\u9fd5\\ua000-\\ua48c\\ua4d0-\\ua4fd\\ua500-\\ua60c\\ua610-\\ua61f\\ua62a\\ua62b\\ua640-\\ua66e\\ua67f-\\ua69d\\ua6a0-\\ua6ef\\ua717-\\ua71f\\ua722-\\ua788\\ua78b-\\ua7ae\\ua7b0-\\ua7b7\\ua7f7-\\ua801\\ua803-\\ua805\\ua807-\\ua80a\\ua80c-\\ua822\\ua840-\\ua873\\ua882-\\ua8b3\\ua8f2-\\ua8f7\\ua8fb\\ua8fd\\ua90a-\\ua925\\ua930-\\ua946\\ua960-\\ua97c\\ua984-\\ua9b2\\ua9cf\\ua9e0-\\ua9e4\\ua9e6-\\ua9ef\\ua9fa-\\ua9fe\\uaa00-\\uaa28\\uaa40-\\uaa42\\uaa44-\\uaa4b\\uaa60-\\uaa76\\uaa7a\\uaa7e-\\uaaaf\\uaab1\\uaab5\\uaab6\\uaab9-\\uaabd\\uaac0\\uaac2\\uaadb-\\uaadd\\uaae0-\\uaaea\\uaaf2-\\uaaf4\\uab01-\\uab06\\uab09-\\uab0e\\uab11-\\uab16\\uab20-\\uab26\\uab28-\\uab2e\\uab30-\\uab5a\\uab5c-\\uab65\\uab70-\\uabe2\\uac00-\\ud7a3\\ud7b0-\\ud7c6\\ud7cb-\\ud7fb\\uf900-\\ufa6d\\ufa70-\\ufad9\\ufb00-\\ufb06\\ufb13-\\ufb17\\ufb1d\\ufb1f-\\ufb28\\ufb2a-\\ufb36\\ufb38-\\ufb3c\\ufb3e\\ufb40\\ufb41\\ufb43\\ufb44\\ufb46-\\ufbb1\\ufbd3-\\ufd3d\\ufd50-\\ufd8f\\ufd92-\\ufdc7\\ufdf0-\\ufdfb\\ufe70-\\ufe74\\ufe76-\\ufefc\\uff21-\\uff3a\\uff41-\\uff5a\\uff66-\\uffbe\\uffc2-\\uffc7\\uffca-\\uffcf\\uffd2-\\uffd7\\uffda-\\uffdc\";\nvar nonASCIIidentifierChars = \"\\u200c\\u200d\\xb7\\u0300-\\u036f\\u0387\\u0483-\\u0487\\u0591-\\u05bd\\u05bf\\u05c1\\u05c2\\u05c4\\u05c5\\u05c7\\u0610-\\u061a\\u064b-\\u0669\\u0670\\u06d6-\\u06dc\\u06df-\\u06e4\\u06e7\\u06e8\\u06ea-\\u06ed\\u06f0-\\u06f9\\u0711\\u0730-\\u074a\\u07a6-\\u07b0\\u07c0-\\u07c9\\u07eb-\\u07f3\\u0816-\\u0819\\u081b-\\u0823\\u0825-\\u0827\\u0829-\\u082d\\u0859-\\u085b\\u08d4-\\u08e1\\u08e3-\\u0903\\u093a-\\u093c\\u093e-\\u094f\\u0951-\\u0957\\u0962\\u0963\\u0966-\\u096f\\u0981-\\u0983\\u09bc\\u09be-\\u09c4\\u09c7\\u09c8\\u09cb-\\u09cd\\u09d7\\u09e2\\u09e3\\u09e6-\\u09ef\\u0a01-\\u0a03\\u0a3c\\u0a3e-\\u0a42\\u0a47\\u0a48\\u0a4b-\\u0a4d\\u0a51\\u0a66-\\u0a71\\u0a75\\u0a81-\\u0a83\\u0abc\\u0abe-\\u0ac5\\u0ac7-\\u0ac9\\u0acb-\\u0acd\\u0ae2\\u0ae3\\u0ae6-\\u0aef\\u0b01-\\u0b03\\u0b3c\\u0b3e-\\u0b44\\u0b47\\u0b48\\u0b4b-\\u0b4d\\u0b56\\u0b57\\u0b62\\u0b63\\u0b66-\\u0b6f\\u0b82\\u0bbe-\\u0bc2\\u0bc6-\\u0bc8\\u0bca-\\u0bcd\\u0bd7\\u0be6-\\u0bef\\u0c00-\\u0c03\\u0c3e-\\u0c44\\u0c46-\\u0c48\\u0c4a-\\u0c4d\\u0c55\\u0c56\\u0c62\\u0c63\\u0c66-\\u0c6f\\u0c81-\\u0c83\\u0cbc\\u0cbe-\\u0cc4\\u0cc6-\\u0cc8\\u0cca-\\u0ccd\\u0cd5\\u0cd6\\u0ce2\\u0ce3\\u0ce6-\\u0cef\\u0d01-\\u0d03\\u0d3e-\\u0d44\\u0d46-\\u0d48\\u0d4a-\\u0d4d\\u0d57\\u0d62\\u0d63\\u0d66-\\u0d6f\\u0d82\\u0d83\\u0dca\\u0dcf-\\u0dd4\\u0dd6\\u0dd8-\\u0ddf\\u0de6-\\u0def\\u0df2\\u0df3\\u0e31\\u0e34-\\u0e3a\\u0e47-\\u0e4e\\u0e50-\\u0e59\\u0eb1\\u0eb4-\\u0eb9\\u0ebb\\u0ebc\\u0ec8-\\u0ecd\\u0ed0-\\u0ed9\\u0f18\\u0f19\\u0f20-\\u0f29\\u0f35\\u0f37\\u0f39\\u0f3e\\u0f3f\\u0f71-\\u0f84\\u0f86\\u0f87\\u0f8d-\\u0f97\\u0f99-\\u0fbc\\u0fc6\\u102b-\\u103e\\u1040-\\u1049\\u1056-\\u1059\\u105e-\\u1060\\u1062-\\u1064\\u1067-\\u106d\\u1071-\\u1074\\u1082-\\u108d\\u108f-\\u109d\\u135d-\\u135f\\u1369-\\u1371\\u1712-\\u1714\\u1732-\\u1734\\u1752\\u1753\\u1772\\u1773\\u17b4-\\u17d3\\u17dd\\u17e0-\\u17e9\\u180b-\\u180d\\u1810-\\u1819\\u18a9\\u1920-\\u192b\\u1930-\\u193b\\u1946-\\u194f\\u19d0-\\u19da\\u1a17-\\u1a1b\\u1a55-\\u1a5e\\u1a60-\\u1a7c\\u1a7f-\\u1a89\\u1a90-\\u1a99\\u1ab0-\\u1abd\\u1b00-\\u1b04\\u1b34-\\u1b44\\u1b50-\\u1b59\\u1b6b-\\u1b73\\u1b80-\\u1b82\\u1ba1-\\u1bad\\u1bb0-\\u1bb9\\u1be6-\\u1bf3\\u1c24-\\u1c37\\u1c40-\\u1c49\\u1c50-\\u1c59\\u1cd0-\\u1cd2\\u1cd4-\\u1ce8\\u1ced\\u1cf2-\\u1cf4\\u1cf8\\u1cf9\\u1dc0-\\u1df5\\u1dfb-\\u1dff\\u203f\\u2040\\u2054\\u20d0-\\u20dc\\u20e1\\u20e5-\\u20f0\\u2cef-\\u2cf1\\u2d7f\\u2de0-\\u2dff\\u302a-\\u302f\\u3099\\u309a\\ua620-\\ua629\\ua66f\\ua674-\\ua67d\\ua69e\\ua69f\\ua6f0\\ua6f1\\ua802\\ua806\\ua80b\\ua823-\\ua827\\ua880\\ua881\\ua8b4-\\ua8c5\\ua8d0-\\ua8d9\\ua8e0-\\ua8f1\\ua900-\\ua909\\ua926-\\ua92d\\ua947-\\ua953\\ua980-\\ua983\\ua9b3-\\ua9c0\\ua9d0-\\ua9d9\\ua9e5\\ua9f0-\\ua9f9\\uaa29-\\uaa36\\uaa43\\uaa4c\\uaa4d\\uaa50-\\uaa59\\uaa7b-\\uaa7d\\uaab0\\uaab2-\\uaab4\\uaab7\\uaab8\\uaabe\\uaabf\\uaac1\\uaaeb-\\uaaef\\uaaf5\\uaaf6\\uabe3-\\uabea\\uabec\\uabed\\uabf0-\\uabf9\\ufb1e\\ufe00-\\ufe0f\\ufe20-\\ufe2f\\ufe33\\ufe34\\ufe4d-\\ufe4f\\uff10-\\uff19\\uff3f\";\n\nvar nonASCIIidentifierStart = new RegExp(\"[\" + nonASCIIidentifierStartChars + \"]\");\nvar nonASCIIidentifier = new RegExp(\"[\" + nonASCIIidentifierStartChars + nonASCIIidentifierChars + \"]\");\n\nnonASCIIidentifierStartChars = nonASCIIidentifierChars = null;\n\n// These are a run-length and offset encoded representation of the\n// >0xffff code points that are a valid part of identifiers. The\n// offset starts at 0x10000, and each pair of numbers represents an\n// offset to the next range, and then a size of the range. They were\n// generated by bin/generate-identifier-regex.js\nvar astralIdentifierStartCodes = [0,11,2,25,2,18,2,1,2,14,3,13,35,122,70,52,268,28,4,48,48,31,17,26,6,37,11,29,3,35,5,7,2,4,43,157,19,35,5,35,5,39,9,51,157,310,10,21,11,7,153,5,3,0,2,43,2,1,4,0,3,22,11,22,10,30,66,18,2,1,11,21,11,25,71,55,7,1,65,0,16,3,2,2,2,26,45,28,4,28,36,7,2,27,28,53,11,21,11,18,14,17,111,72,56,50,14,50,785,52,76,44,33,24,27,35,42,34,4,0,13,47,15,3,22,0,2,0,36,17,2,24,85,6,2,0,2,3,2,14,2,9,8,46,39,7,3,1,3,21,2,6,2,1,2,4,4,0,19,0,13,4,159,52,19,3,54,47,21,1,2,0,185,46,42,3,37,47,21,0,60,42,86,25,391,63,32,0,449,56,264,8,2,36,18,0,50,29,881,921,103,110,18,195,2749,1070,4050,582,8634,568,8,30,114,29,19,47,17,3,32,20,6,18,881,68,12,0,67,12,65,0,32,6124,20,754,9486,1,3071,106,6,12,4,8,8,9,5991,84,2,70,2,1,3,0,3,1,3,3,2,11,2,0,2,6,2,64,2,3,3,7,2,6,2,27,2,3,2,4,2,0,4,6,2,339,3,24,2,24,2,30,2,24,2,30,2,24,2,30,2,24,2,30,2,24,2,7,4149,196,60,67,1213,3,2,26,2,1,2,0,3,0,2,9,2,3,2,0,2,0,7,0,5,0,2,0,2,0,2,2,2,1,2,0,3,0,2,0,2,0,2,0,2,0,2,1,2,0,3,3,2,6,2,3,2,3,2,0,2,9,2,16,6,2,2,4,2,16,4421,42710,42,4148,12,221,3,5761,10591,541];\nvar astralIdentifierCodes = [509,0,227,0,150,4,294,9,1368,2,2,1,6,3,41,2,5,0,166,1,1306,2,54,14,32,9,16,3,46,10,54,9,7,2,37,13,2,9,52,0,13,2,49,13,10,2,4,9,83,11,7,0,161,11,6,9,7,3,57,0,2,6,3,1,3,2,10,0,11,1,3,6,4,4,193,17,10,9,87,19,13,9,214,6,3,8,28,1,83,16,16,9,82,12,9,9,84,14,5,9,423,9,838,7,2,7,17,9,57,21,2,13,19882,9,135,4,60,6,26,9,1016,45,17,3,19723,1,5319,4,4,5,9,7,3,6,31,3,149,2,1418,49,513,54,5,49,9,0,15,0,23,4,2,14,1361,6,2,16,3,6,2,1,2,4,2214,6,110,6,6,9,792487,239];\n\n// This has a complexity linear to the value of the code. The\n// assumption is that looking up astral identifier characters is\n// rare.\nfunction isInAstralSet(code, set) {\n  var pos = 0x10000;\n  for (var i = 0; i < set.length; i += 2) {\n    pos += set[i];\n    if (pos > code) return false\n    pos += set[i + 1];\n    if (pos >= code) return true\n  }\n}\n\n// Test whether a given character code starts an identifier.\n\nfunction isIdentifierStart(code, astral) {\n  if (code < 65) return code === 36\n  if (code < 91) return true\n  if (code < 97) return code === 95\n  if (code < 123) return true\n  if (code <= 0xffff) return code >= 0xaa && nonASCIIidentifierStart.test(String.fromCharCode(code))\n  if (astral === false) return false\n  return isInAstralSet(code, astralIdentifierStartCodes)\n}\n\n// Test whether a given character is part of an identifier.\n\nfunction isIdentifierChar(code, astral) {\n  if (code < 48) return code === 36\n  if (code < 58) return true\n  if (code < 65) return false\n  if (code < 91) return true\n  if (code < 97) return code === 95\n  if (code < 123) return true\n  if (code <= 0xffff) return code >= 0xaa && nonASCIIidentifier.test(String.fromCharCode(code))\n  if (astral === false) return false\n  return isInAstralSet(code, astralIdentifierStartCodes) || isInAstralSet(code, astralIdentifierCodes)\n}\n\n// ## Token types\n\n// The assignment of fine-grained, information-carrying type objects\n// allows the tokenizer to store the information it has about a\n// token in a way that is very cheap for the parser to look up.\n\n// All token type variables start with an underscore, to make them\n// easy to recognize.\n\n// The `beforeExpr` property is used to disambiguate between regular\n// expressions and divisions. It is set on all token types that can\n// be followed by an expression (thus, a slash after them would be a\n// regular expression).\n//\n// The `startsExpr` property is used to check if the token ends a\n// `yield` expression. It is set on all token types that either can\n// directly start an expression (like a quotation mark) or can\n// continue an expression (like the body of a string).\n//\n// `isLoop` marks a keyword as starting a loop, which is important\n// to know when parsing a label, in order to allow or disallow\n// continue jumps to that label.\n\nvar TokenType = function TokenType(label, conf) {\n  if ( conf === void 0 ) conf = {};\n\n  this.label = label;\n  this.keyword = conf.keyword;\n  this.beforeExpr = !!conf.beforeExpr;\n  this.startsExpr = !!conf.startsExpr;\n  this.isLoop = !!conf.isLoop;\n  this.isAssign = !!conf.isAssign;\n  this.prefix = !!conf.prefix;\n  this.postfix = !!conf.postfix;\n  this.binop = conf.binop || null;\n  this.updateContext = null;\n};\n\nfunction binop(name, prec) {\n  return new TokenType(name, {beforeExpr: true, binop: prec})\n}\nvar beforeExpr = {beforeExpr: true};\nvar startsExpr = {startsExpr: true};\n\n// Map keyword names to token types.\n\nvar keywords$1 = {};\n\n// Succinct definitions of keyword token types\nfunction kw(name, options) {\n  if ( options === void 0 ) options = {};\n\n  options.keyword = name;\n  return keywords$1[name] = new TokenType(name, options)\n}\n\nvar types = {\n  num: new TokenType(\"num\", startsExpr),\n  regexp: new TokenType(\"regexp\", startsExpr),\n  string: new TokenType(\"string\", startsExpr),\n  name: new TokenType(\"name\", startsExpr),\n  eof: new TokenType(\"eof\"),\n\n  // Punctuation token types.\n  bracketL: new TokenType(\"[\", {beforeExpr: true, startsExpr: true}),\n  bracketR: new TokenType(\"]\"),\n  braceL: new TokenType(\"{\", {beforeExpr: true, startsExpr: true}),\n  braceR: new TokenType(\"}\"),\n  parenL: new TokenType(\"(\", {beforeExpr: true, startsExpr: true}),\n  parenR: new TokenType(\")\"),\n  comma: new TokenType(\",\", beforeExpr),\n  semi: new TokenType(\";\", beforeExpr),\n  colon: new TokenType(\":\", beforeExpr),\n  dot: new TokenType(\".\"),\n  question: new TokenType(\"?\", beforeExpr),\n  arrow: new TokenType(\"=>\", beforeExpr),\n  template: new TokenType(\"template\"),\n  ellipsis: new TokenType(\"...\", beforeExpr),\n  backQuote: new TokenType(\"`\", startsExpr),\n  dollarBraceL: new TokenType(\"${\", {beforeExpr: true, startsExpr: true}),\n\n  // Operators. These carry several kinds of properties to help the\n  // parser use them properly (the presence of these properties is\n  // what categorizes them as operators).\n  //\n  // `binop`, when present, specifies that this operator is a binary\n  // operator, and will refer to its precedence.\n  //\n  // `prefix` and `postfix` mark the operator as a prefix or postfix\n  // unary operator.\n  //\n  // `isAssign` marks all of `=`, `+=`, `-=` etcetera, which act as\n  // binary operators with a very low precedence, that should result\n  // in AssignmentExpression nodes.\n\n  eq: new TokenType(\"=\", {beforeExpr: true, isAssign: true}),\n  assign: new TokenType(\"_=\", {beforeExpr: true, isAssign: true}),\n  incDec: new TokenType(\"++/--\", {prefix: true, postfix: true, startsExpr: true}),\n  prefix: new TokenType(\"prefix\", {beforeExpr: true, prefix: true, startsExpr: true}),\n  logicalOR: binop(\"||\", 1),\n  logicalAND: binop(\"&&\", 2),\n  bitwiseOR: binop(\"|\", 3),\n  bitwiseXOR: binop(\"^\", 4),\n  bitwiseAND: binop(\"&\", 5),\n  equality: binop(\"==/!=\", 6),\n  relational: binop(\"</>\", 7),\n  bitShift: binop(\"<</>>\", 8),\n  plusMin: new TokenType(\"+/-\", {beforeExpr: true, binop: 9, prefix: true, startsExpr: true}),\n  modulo: binop(\"%\", 10),\n  star: binop(\"*\", 10),\n  slash: binop(\"/\", 10),\n  starstar: new TokenType(\"**\", {beforeExpr: true}),\n\n  // Keyword token types.\n  _break: kw(\"break\"),\n  _case: kw(\"case\", beforeExpr),\n  _catch: kw(\"catch\"),\n  _continue: kw(\"continue\"),\n  _debugger: kw(\"debugger\"),\n  _default: kw(\"default\", beforeExpr),\n  _do: kw(\"do\", {isLoop: true, beforeExpr: true}),\n  _else: kw(\"else\", beforeExpr),\n  _finally: kw(\"finally\"),\n  _for: kw(\"for\", {isLoop: true}),\n  _function: kw(\"function\", startsExpr),\n  _if: kw(\"if\"),\n  _return: kw(\"return\", beforeExpr),\n  _switch: kw(\"switch\"),\n  _throw: kw(\"throw\", beforeExpr),\n  _try: kw(\"try\"),\n  _var: kw(\"var\"),\n  _const: kw(\"const\"),\n  _while: kw(\"while\", {isLoop: true}),\n  _with: kw(\"with\"),\n  _new: kw(\"new\", {beforeExpr: true, startsExpr: true}),\n  _this: kw(\"this\", startsExpr),\n  _super: kw(\"super\", startsExpr),\n  _class: kw(\"class\"),\n  _extends: kw(\"extends\", beforeExpr),\n  _export: kw(\"export\"),\n  _import: kw(\"import\"),\n  _null: kw(\"null\", startsExpr),\n  _true: kw(\"true\", startsExpr),\n  _false: kw(\"false\", startsExpr),\n  _in: kw(\"in\", {beforeExpr: true, binop: 7}),\n  _instanceof: kw(\"instanceof\", {beforeExpr: true, binop: 7}),\n  _typeof: kw(\"typeof\", {beforeExpr: true, prefix: true, startsExpr: true}),\n  _void: kw(\"void\", {beforeExpr: true, prefix: true, startsExpr: true}),\n  _delete: kw(\"delete\", {beforeExpr: true, prefix: true, startsExpr: true})\n};\n\n// Matches a whole line break (where CRLF is considered a single\n// line break). Used to count lines.\n\nvar lineBreak = /\\r\\n?|\\n|\\u2028|\\u2029/;\nvar lineBreakG = new RegExp(lineBreak.source, \"g\");\n\nfunction isNewLine(code) {\n  return code === 10 || code === 13 || code === 0x2028 || code === 0x2029\n}\n\nvar nonASCIIwhitespace = /[\\u1680\\u180e\\u2000-\\u200a\\u202f\\u205f\\u3000\\ufeff]/;\n\nvar skipWhiteSpace = /(?:\\s|\\/\\/.*|\\/\\*[^]*?\\*\\/)*/g;\n\nfunction isArray(obj) {\n  return Object.prototype.toString.call(obj) === \"[object Array]\"\n}\n\n// Checks if an object has a property.\n\nfunction has(obj, propName) {\n  return Object.prototype.hasOwnProperty.call(obj, propName)\n}\n\n// These are used when `options.locations` is on, for the\n// `startLoc` and `endLoc` properties.\n\nvar Position = function Position(line, col) {\n  this.line = line;\n  this.column = col;\n};\n\nPosition.prototype.offset = function offset (n) {\n  return new Position(this.line, this.column + n)\n};\n\nvar SourceLocation = function SourceLocation(p, start, end) {\n  this.start = start;\n  this.end = end;\n  if (p.sourceFile !== null) this.source = p.sourceFile;\n};\n\n// The `getLineInfo` function is mostly useful when the\n// `locations` option is off (for performance reasons) and you\n// want to find the line/column position for a given character\n// offset. `input` should be the code string that the offset refers\n// into.\n\nfunction getLineInfo(input, offset) {\n  for (var line = 1, cur = 0;;) {\n    lineBreakG.lastIndex = cur;\n    var match = lineBreakG.exec(input);\n    if (match && match.index < offset) {\n      ++line;\n      cur = match.index + match[0].length;\n    } else {\n      return new Position(line, offset - cur)\n    }\n  }\n}\n\n// A second optional argument can be given to further configure\n// the parser process. These options are recognized:\n\nvar defaultOptions = {\n  // `ecmaVersion` indicates the ECMAScript version to parse. Must\n  // be either 3, 5, 6 (2015), 7 (2016), or 8 (2017). This influences support\n  // for strict mode, the set of reserved words, and support for\n  // new syntax features. The default is 7.\n  ecmaVersion: 7,\n  // `sourceType` indicates the mode the code should be parsed in.\n  // Can be either `\"script\"` or `\"module\"`. This influences global\n  // strict mode and parsing of `import` and `export` declarations.\n  sourceType: \"script\",\n  // `onInsertedSemicolon` can be a callback that will be called\n  // when a semicolon is automatically inserted. It will be passed\n  // th position of the comma as an offset, and if `locations` is\n  // enabled, it is given the location as a `{line, column}` object\n  // as second argument.\n  onInsertedSemicolon: null,\n  // `onTrailingComma` is similar to `onInsertedSemicolon`, but for\n  // trailing commas.\n  onTrailingComma: null,\n  // By default, reserved words are only enforced if ecmaVersion >= 5.\n  // Set `allowReserved` to a boolean value to explicitly turn this on\n  // an off. When this option has the value \"never\", reserved words\n  // and keywords can also not be used as property names.\n  allowReserved: null,\n  // When enabled, a return at the top level is not considered an\n  // error.\n  allowReturnOutsideFunction: false,\n  // When enabled, import/export statements are not constrained to\n  // appearing at the top of the program.\n  allowImportExportEverywhere: false,\n  // When enabled, hashbang directive in the beginning of file\n  // is allowed and treated as a line comment.\n  allowHashBang: false,\n  // When `locations` is on, `loc` properties holding objects with\n  // `start` and `end` properties in `{line, column}` form (with\n  // line being 1-based and column 0-based) will be attached to the\n  // nodes.\n  locations: false,\n  // A function can be passed as `onToken` option, which will\n  // cause Acorn to call that function with object in the same\n  // format as tokens returned from `tokenizer().getToken()`. Note\n  // that you are not allowed to call the parser from the\n  // callback—that will corrupt its internal state.\n  onToken: null,\n  // A function can be passed as `onComment` option, which will\n  // cause Acorn to call that function with `(block, text, start,\n  // end)` parameters whenever a comment is skipped. `block` is a\n  // boolean indicating whether this is a block (`/* */`) comment,\n  // `text` is the content of the comment, and `start` and `end` are\n  // character offsets that denote the start and end of the comment.\n  // When the `locations` option is on, two more parameters are\n  // passed, the full `{line, column}` locations of the start and\n  // end of the comments. Note that you are not allowed to call the\n  // parser from the callback—that will corrupt its internal state.\n  onComment: null,\n  // Nodes have their start and end characters offsets recorded in\n  // `start` and `end` properties (directly on the node, rather than\n  // the `loc` object, which holds line/column data. To also add a\n  // [semi-standardized][range] `range` property holding a `[start,\n  // end]` array with the same numbers, set the `ranges` option to\n  // `true`.\n  //\n  // [range]: https://bugzilla.mozilla.org/show_bug.cgi?id=745678\n  ranges: false,\n  // It is possible to parse multiple files into a single AST by\n  // passing the tree produced by parsing the first file as\n  // `program` option in subsequent parses. This will add the\n  // toplevel forms of the parsed file to the `Program` (top) node\n  // of an existing parse tree.\n  program: null,\n  // When `locations` is on, you can pass this to record the source\n  // file in every node's `loc` object.\n  sourceFile: null,\n  // This value, if given, is stored in every node, whether\n  // `locations` is on or off.\n  directSourceFile: null,\n  // When enabled, parenthesized expressions are represented by\n  // (non-standard) ParenthesizedExpression nodes\n  preserveParens: false,\n  plugins: {}\n};\n\n// Interpret and default an options object\n\nfunction getOptions(opts) {\n  var options = {};\n\n  for (var opt in defaultOptions)\n    options[opt] = opts && has(opts, opt) ? opts[opt] : defaultOptions[opt];\n\n  if (options.ecmaVersion >= 2015)\n    options.ecmaVersion -= 2009;\n\n  if (options.allowReserved == null)\n    options.allowReserved = options.ecmaVersion < 5;\n\n  if (isArray(options.onToken)) {\n    var tokens = options.onToken;\n    options.onToken = function (token) { return tokens.push(token); };\n  }\n  if (isArray(options.onComment))\n    options.onComment = pushComment(options, options.onComment);\n\n  return options\n}\n\nfunction pushComment(options, array) {\n  return function (block, text, start, end, startLoc, endLoc) {\n    var comment = {\n      type: block ? 'Block' : 'Line',\n      value: text,\n      start: start,\n      end: end\n    };\n    if (options.locations)\n      comment.loc = new SourceLocation(this, startLoc, endLoc);\n    if (options.ranges)\n      comment.range = [start, end];\n    array.push(comment);\n  }\n}\n\n// Registered plugins\nvar plugins = {};\n\nfunction keywordRegexp(words) {\n  return new RegExp(\"^(\" + words.replace(/ /g, \"|\") + \")$\")\n}\n\nvar Parser = function Parser(options, input, startPos) {\n  this.options = options = getOptions(options);\n  this.sourceFile = options.sourceFile;\n  this.keywords = keywordRegexp(keywords[options.ecmaVersion >= 6 ? 6 : 5]);\n  var reserved = \"\";\n  if (!options.allowReserved) {\n    for (var v = options.ecmaVersion;; v--)\n      if (reserved = reservedWords[v]) break\n    if (options.sourceType == \"module\") reserved += \" await\";\n  }\n  this.reservedWords = keywordRegexp(reserved);\n  var reservedStrict = (reserved ? reserved + \" \" : \"\") + reservedWords.strict;\n  this.reservedWordsStrict = keywordRegexp(reservedStrict);\n  this.reservedWordsStrictBind = keywordRegexp(reservedStrict + \" \" + reservedWords.strictBind);\n  this.input = String(input);\n\n  // Used to signal to callers of `readWord1` whether the word\n  // contained any escape sequences. This is needed because words with\n  // escape sequences must not be interpreted as keywords.\n  this.containsEsc = false;\n\n  // Load plugins\n  this.loadPlugins(options.plugins);\n\n  // Set up token state\n\n  // The current position of the tokenizer in the input.\n  if (startPos) {\n    this.pos = startPos;\n    this.lineStart = this.input.lastIndexOf(\"\\n\", startPos - 1) + 1;\n    this.curLine = this.input.slice(0, this.lineStart).split(lineBreak).length;\n  } else {\n    this.pos = this.lineStart = 0;\n    this.curLine = 1;\n  }\n\n  // Properties of the current token:\n  // Its type\n  this.type = types.eof;\n  // For tokens that include more information than their type, the value\n  this.value = null;\n  // Its start and end offset\n  this.start = this.end = this.pos;\n  // And, if locations are used, the {line, column} object\n  // corresponding to those offsets\n  this.startLoc = this.endLoc = this.curPosition();\n\n  // Position information for the previous token\n  this.lastTokEndLoc = this.lastTokStartLoc = null;\n  this.lastTokStart = this.lastTokEnd = this.pos;\n\n  // The context stack is used to superficially track syntactic\n  // context to predict whether a regular expression is allowed in a\n  // given position.\n  this.context = this.initialContext();\n  this.exprAllowed = true;\n\n  // Figure out if it's a module code.\n  this.strict = this.inModule = options.sourceType === \"module\";\n\n  // Used to signify the start of a potential arrow function\n  this.potentialArrowAt = -1;\n\n  // Flags to track whether we are in a function, a generator, an async function.\n  this.inFunction = this.inGenerator = this.inAsync = false;\n  // Positions to delayed-check that yield/await does not exist in default parameters.\n  this.yieldPos = this.awaitPos = 0;\n  // Labels in scope.\n  this.labels = [];\n\n  // If enabled, skip leading hashbang line.\n  if (this.pos === 0 && options.allowHashBang && this.input.slice(0, 2) === '#!')\n    this.skipLineComment(2);\n};\n\n// DEPRECATED Kept for backwards compatibility until 3.0 in case a plugin uses them\nParser.prototype.isKeyword = function isKeyword (word) { return this.keywords.test(word) };\nParser.prototype.isReservedWord = function isReservedWord (word) { return this.reservedWords.test(word) };\n\nParser.prototype.extend = function extend (name, f) {\n  this[name] = f(this[name]);\n};\n\nParser.prototype.loadPlugins = function loadPlugins (pluginConfigs) {\n    var this$1 = this;\n\n  for (var name in pluginConfigs) {\n    var plugin = plugins[name];\n    if (!plugin) throw new Error(\"Plugin '\" + name + \"' not found\")\n    plugin(this$1, pluginConfigs[name]);\n  }\n};\n\nParser.prototype.parse = function parse () {\n  var node = this.options.program || this.startNode();\n  this.nextToken();\n  return this.parseTopLevel(node)\n};\n\nvar pp = Parser.prototype;\n\n// ## Parser utilities\n\n// Test whether a statement node is the string literal `\"use strict\"`.\n\npp.isUseStrict = function(stmt) {\n  return this.options.ecmaVersion >= 5 && stmt.type === \"ExpressionStatement\" &&\n    stmt.expression.type === \"Literal\" &&\n    stmt.expression.raw.slice(1, -1) === \"use strict\"\n};\n\n// Predicate that tests whether the next token is of the given\n// type, and if yes, consumes it as a side effect.\n\npp.eat = function(type) {\n  if (this.type === type) {\n    this.next();\n    return true\n  } else {\n    return false\n  }\n};\n\n// Tests whether parsed token is a contextual keyword.\n\npp.isContextual = function(name) {\n  return this.type === types.name && this.value === name\n};\n\n// Consumes contextual keyword if possible.\n\npp.eatContextual = function(name) {\n  return this.value === name && this.eat(types.name)\n};\n\n// Asserts that following token is given contextual keyword.\n\npp.expectContextual = function(name) {\n  if (!this.eatContextual(name)) this.unexpected();\n};\n\n// Test whether a semicolon can be inserted at the current position.\n\npp.canInsertSemicolon = function() {\n  return this.type === types.eof ||\n    this.type === types.braceR ||\n    lineBreak.test(this.input.slice(this.lastTokEnd, this.start))\n};\n\npp.insertSemicolon = function() {\n  if (this.canInsertSemicolon()) {\n    if (this.options.onInsertedSemicolon)\n      this.options.onInsertedSemicolon(this.lastTokEnd, this.lastTokEndLoc);\n    return true\n  }\n};\n\n// Consume a semicolon, or, failing that, see if we are allowed to\n// pretend that there is a semicolon at this position.\n\npp.semicolon = function() {\n  if (!this.eat(types.semi) && !this.insertSemicolon()) this.unexpected();\n};\n\npp.afterTrailingComma = function(tokType, notNext) {\n  if (this.type == tokType) {\n    if (this.options.onTrailingComma)\n      this.options.onTrailingComma(this.lastTokStart, this.lastTokStartLoc);\n    if (!notNext)\n      this.next();\n    return true\n  }\n};\n\n// Expect a token of a given type. If found, consume it, otherwise,\n// raise an unexpected token error.\n\npp.expect = function(type) {\n  this.eat(type) || this.unexpected();\n};\n\n// Raise an unexpected token error.\n\npp.unexpected = function(pos) {\n  this.raise(pos != null ? pos : this.start, \"Unexpected token\");\n};\n\nvar DestructuringErrors = function DestructuringErrors() {\n  this.shorthandAssign = 0;\n  this.trailingComma = 0;\n};\n\npp.checkPatternErrors = function(refDestructuringErrors, andThrow) {\n  var trailing = refDestructuringErrors && refDestructuringErrors.trailingComma;\n  if (!andThrow) return !!trailing\n  if (trailing) this.raise(trailing, \"Comma is not permitted after the rest element\");\n};\n\npp.checkExpressionErrors = function(refDestructuringErrors, andThrow) {\n  var pos = refDestructuringErrors && refDestructuringErrors.shorthandAssign;\n  if (!andThrow) return !!pos\n  if (pos) this.raise(pos, \"Shorthand property assignments are valid only in destructuring patterns\");\n};\n\npp.checkYieldAwaitInDefaultParams = function() {\n  if (this.yieldPos && (!this.awaitPos || this.yieldPos < this.awaitPos))\n    this.raise(this.yieldPos, \"Yield expression cannot be a default value\");\n  if (this.awaitPos)\n    this.raise(this.awaitPos, \"Await expression cannot be a default value\");\n};\n\nvar pp$1 = Parser.prototype;\n\n// ### Statement parsing\n\n// Parse a program. Initializes the parser, reads any number of\n// statements, and wraps them in a Program node.  Optionally takes a\n// `program` argument.  If present, the statements will be appended\n// to its body instead of creating a new node.\n\npp$1.parseTopLevel = function(node) {\n  var this$1 = this;\n\n  var first = true, exports = {};\n  if (!node.body) node.body = [];\n  while (this.type !== types.eof) {\n    var stmt = this$1.parseStatement(true, true, exports);\n    node.body.push(stmt);\n    if (first) {\n      if (this$1.isUseStrict(stmt)) this$1.setStrict(true);\n      first = false;\n    }\n  }\n  this.next();\n  if (this.options.ecmaVersion >= 6) {\n    node.sourceType = this.options.sourceType;\n  }\n  return this.finishNode(node, \"Program\")\n};\n\nvar loopLabel = {kind: \"loop\"};\nvar switchLabel = {kind: \"switch\"};\n\npp$1.isLet = function() {\n  if (this.type !== types.name || this.options.ecmaVersion < 6 || this.value != \"let\") return false\n  skipWhiteSpace.lastIndex = this.pos;\n  var skip = skipWhiteSpace.exec(this.input);\n  var next = this.pos + skip[0].length, nextCh = this.input.charCodeAt(next);\n  if (nextCh === 91 || nextCh == 123) return true // '{' and '['\n  if (isIdentifierStart(nextCh, true)) {\n    for (var pos = next + 1; isIdentifierChar(this.input.charCodeAt(pos), true); ++pos) {}\n    var ident = this.input.slice(next, pos);\n    if (!this.isKeyword(ident)) return true\n  }\n  return false\n};\n\n// check 'async [no LineTerminator here] function'\n// - 'async /*foo*/ function' is OK.\n// - 'async /*\\n*/ function' is invalid.\npp$1.isAsyncFunction = function() {\n  if (this.type !== types.name || this.options.ecmaVersion < 8 || this.value != \"async\")\n    return false\n\n  skipWhiteSpace.lastIndex = this.pos;\n  var skip = skipWhiteSpace.exec(this.input);\n  var next = this.pos + skip[0].length;\n  return !lineBreak.test(this.input.slice(this.pos, next)) &&\n    this.input.slice(next, next + 8) === \"function\" &&\n    (next + 8 == this.input.length || !isIdentifierChar(this.input.charAt(next + 8)))\n};\n\n// Parse a single statement.\n//\n// If expecting a statement and finding a slash operator, parse a\n// regular expression literal. This is to handle cases like\n// `if (foo) /blah/.exec(foo)`, where looking at the previous token\n// does not help.\n\npp$1.parseStatement = function(declaration, topLevel, exports) {\n  var starttype = this.type, node = this.startNode(), kind;\n\n  if (this.isLet()) {\n    starttype = types._var;\n    kind = \"let\";\n  }\n\n  // Most types of statements are recognized by the keyword they\n  // start with. Many are trivial to parse, some require a bit of\n  // complexity.\n\n  switch (starttype) {\n  case types._break: case types._continue: return this.parseBreakContinueStatement(node, starttype.keyword)\n  case types._debugger: return this.parseDebuggerStatement(node)\n  case types._do: return this.parseDoStatement(node)\n  case types._for: return this.parseForStatement(node)\n  case types._function:\n    if (!declaration && this.options.ecmaVersion >= 6) this.unexpected();\n    return this.parseFunctionStatement(node, false)\n  case types._class:\n    if (!declaration) this.unexpected();\n    return this.parseClass(node, true)\n  case types._if: return this.parseIfStatement(node)\n  case types._return: return this.parseReturnStatement(node)\n  case types._switch: return this.parseSwitchStatement(node)\n  case types._throw: return this.parseThrowStatement(node)\n  case types._try: return this.parseTryStatement(node)\n  case types._const: case types._var:\n    kind = kind || this.value;\n    if (!declaration && kind != \"var\") this.unexpected();\n    return this.parseVarStatement(node, kind)\n  case types._while: return this.parseWhileStatement(node)\n  case types._with: return this.parseWithStatement(node)\n  case types.braceL: return this.parseBlock()\n  case types.semi: return this.parseEmptyStatement(node)\n  case types._export:\n  case types._import:\n    if (!this.options.allowImportExportEverywhere) {\n      if (!topLevel)\n        this.raise(this.start, \"'import' and 'export' may only appear at the top level\");\n      if (!this.inModule)\n        this.raise(this.start, \"'import' and 'export' may appear only with 'sourceType: module'\");\n    }\n    return starttype === types._import ? this.parseImport(node) : this.parseExport(node, exports)\n\n    // If the statement does not start with a statement keyword or a\n    // brace, it's an ExpressionStatement or LabeledStatement. We\n    // simply start parsing an expression, and afterwards, if the\n    // next token is a colon and the expression was a simple\n    // Identifier node, we switch to interpreting it as a label.\n  default:\n    if (this.isAsyncFunction() && declaration) {\n      this.next();\n      return this.parseFunctionStatement(node, true)\n    }\n\n    var maybeName = this.value, expr = this.parseExpression();\n    if (starttype === types.name && expr.type === \"Identifier\" && this.eat(types.colon))\n      return this.parseLabeledStatement(node, maybeName, expr)\n    else return this.parseExpressionStatement(node, expr)\n  }\n};\n\npp$1.parseBreakContinueStatement = function(node, keyword) {\n  var this$1 = this;\n\n  var isBreak = keyword == \"break\";\n  this.next();\n  if (this.eat(types.semi) || this.insertSemicolon()) node.label = null;\n  else if (this.type !== types.name) this.unexpected();\n  else {\n    node.label = this.parseIdent();\n    this.semicolon();\n  }\n\n  // Verify that there is an actual destination to break or\n  // continue to.\n  for (var i = 0; i < this.labels.length; ++i) {\n    var lab = this$1.labels[i];\n    if (node.label == null || lab.name === node.label.name) {\n      if (lab.kind != null && (isBreak || lab.kind === \"loop\")) break\n      if (node.label && isBreak) break\n    }\n  }\n  if (i === this.labels.length) this.raise(node.start, \"Unsyntactic \" + keyword);\n  return this.finishNode(node, isBreak ? \"BreakStatement\" : \"ContinueStatement\")\n};\n\npp$1.parseDebuggerStatement = function(node) {\n  this.next();\n  this.semicolon();\n  return this.finishNode(node, \"DebuggerStatement\")\n};\n\npp$1.parseDoStatement = function(node) {\n  this.next();\n  this.labels.push(loopLabel);\n  node.body = this.parseStatement(false);\n  this.labels.pop();\n  this.expect(types._while);\n  node.test = this.parseParenExpression();\n  if (this.options.ecmaVersion >= 6)\n    this.eat(types.semi);\n  else\n    this.semicolon();\n  return this.finishNode(node, \"DoWhileStatement\")\n};\n\n// Disambiguating between a `for` and a `for`/`in` or `for`/`of`\n// loop is non-trivial. Basically, we have to parse the init `var`\n// statement or expression, disallowing the `in` operator (see\n// the second parameter to `parseExpression`), and then check\n// whether the next token is `in` or `of`. When there is no init\n// part (semicolon immediately after the opening parenthesis), it\n// is a regular `for` loop.\n\npp$1.parseForStatement = function(node) {\n  this.next();\n  this.labels.push(loopLabel);\n  this.expect(types.parenL);\n  if (this.type === types.semi) return this.parseFor(node, null)\n  var isLet = this.isLet();\n  if (this.type === types._var || this.type === types._const || isLet) {\n    var init$1 = this.startNode(), kind = isLet ? \"let\" : this.value;\n    this.next();\n    this.parseVar(init$1, true, kind);\n    this.finishNode(init$1, \"VariableDeclaration\");\n    if ((this.type === types._in || (this.options.ecmaVersion >= 6 && this.isContextual(\"of\"))) && init$1.declarations.length === 1 &&\n        !(kind !== \"var\" && init$1.declarations[0].init))\n      return this.parseForIn(node, init$1)\n    return this.parseFor(node, init$1)\n  }\n  var refDestructuringErrors = new DestructuringErrors;\n  var init = this.parseExpression(true, refDestructuringErrors);\n  if (this.type === types._in || (this.options.ecmaVersion >= 6 && this.isContextual(\"of\"))) {\n    this.checkPatternErrors(refDestructuringErrors, true);\n    this.toAssignable(init);\n    this.checkLVal(init);\n    return this.parseForIn(node, init)\n  } else {\n    this.checkExpressionErrors(refDestructuringErrors, true);\n  }\n  return this.parseFor(node, init)\n};\n\npp$1.parseFunctionStatement = function(node, isAsync) {\n  this.next();\n  return this.parseFunction(node, true, false, isAsync)\n};\n\npp$1.isFunction = function() {\n  return this.type === types._function || this.isAsyncFunction()\n};\n\npp$1.parseIfStatement = function(node) {\n  this.next();\n  node.test = this.parseParenExpression();\n  // allow function declarations in branches, but only in non-strict mode\n  node.consequent = this.parseStatement(!this.strict && this.isFunction());\n  node.alternate = this.eat(types._else) ? this.parseStatement(!this.strict && this.isFunction()) : null;\n  return this.finishNode(node, \"IfStatement\")\n};\n\npp$1.parseReturnStatement = function(node) {\n  if (!this.inFunction && !this.options.allowReturnOutsideFunction)\n    this.raise(this.start, \"'return' outside of function\");\n  this.next();\n\n  // In `return` (and `break`/`continue`), the keywords with\n  // optional arguments, we eagerly look for a semicolon or the\n  // possibility to insert one.\n\n  if (this.eat(types.semi) || this.insertSemicolon()) node.argument = null;\n  else { node.argument = this.parseExpression(); this.semicolon(); }\n  return this.finishNode(node, \"ReturnStatement\")\n};\n\npp$1.parseSwitchStatement = function(node) {\n  var this$1 = this;\n\n  this.next();\n  node.discriminant = this.parseParenExpression();\n  node.cases = [];\n  this.expect(types.braceL);\n  this.labels.push(switchLabel);\n\n  // Statements under must be grouped (by label) in SwitchCase\n  // nodes. `cur` is used to keep the node that we are currently\n  // adding statements to.\n\n  for (var cur, sawDefault = false; this.type != types.braceR;) {\n    if (this$1.type === types._case || this$1.type === types._default) {\n      var isCase = this$1.type === types._case;\n      if (cur) this$1.finishNode(cur, \"SwitchCase\");\n      node.cases.push(cur = this$1.startNode());\n      cur.consequent = [];\n      this$1.next();\n      if (isCase) {\n        cur.test = this$1.parseExpression();\n      } else {\n        if (sawDefault) this$1.raiseRecoverable(this$1.lastTokStart, \"Multiple default clauses\");\n        sawDefault = true;\n        cur.test = null;\n      }\n      this$1.expect(types.colon);\n    } else {\n      if (!cur) this$1.unexpected();\n      cur.consequent.push(this$1.parseStatement(true));\n    }\n  }\n  if (cur) this.finishNode(cur, \"SwitchCase\");\n  this.next(); // Closing brace\n  this.labels.pop();\n  return this.finishNode(node, \"SwitchStatement\")\n};\n\npp$1.parseThrowStatement = function(node) {\n  this.next();\n  if (lineBreak.test(this.input.slice(this.lastTokEnd, this.start)))\n    this.raise(this.lastTokEnd, \"Illegal newline after throw\");\n  node.argument = this.parseExpression();\n  this.semicolon();\n  return this.finishNode(node, \"ThrowStatement\")\n};\n\n// Reused empty array added for node fields that are always empty.\n\nvar empty = [];\n\npp$1.parseTryStatement = function(node) {\n  this.next();\n  node.block = this.parseBlock();\n  node.handler = null;\n  if (this.type === types._catch) {\n    var clause = this.startNode();\n    this.next();\n    this.expect(types.parenL);\n    clause.param = this.parseBindingAtom();\n    this.checkLVal(clause.param, true);\n    this.expect(types.parenR);\n    clause.body = this.parseBlock();\n    node.handler = this.finishNode(clause, \"CatchClause\");\n  }\n  node.finalizer = this.eat(types._finally) ? this.parseBlock() : null;\n  if (!node.handler && !node.finalizer)\n    this.raise(node.start, \"Missing catch or finally clause\");\n  return this.finishNode(node, \"TryStatement\")\n};\n\npp$1.parseVarStatement = function(node, kind) {\n  this.next();\n  this.parseVar(node, false, kind);\n  this.semicolon();\n  return this.finishNode(node, \"VariableDeclaration\")\n};\n\npp$1.parseWhileStatement = function(node) {\n  this.next();\n  node.test = this.parseParenExpression();\n  this.labels.push(loopLabel);\n  node.body = this.parseStatement(false);\n  this.labels.pop();\n  return this.finishNode(node, \"WhileStatement\")\n};\n\npp$1.parseWithStatement = function(node) {\n  if (this.strict) this.raise(this.start, \"'with' in strict mode\");\n  this.next();\n  node.object = this.parseParenExpression();\n  node.body = this.parseStatement(false);\n  return this.finishNode(node, \"WithStatement\")\n};\n\npp$1.parseEmptyStatement = function(node) {\n  this.next();\n  return this.finishNode(node, \"EmptyStatement\")\n};\n\npp$1.parseLabeledStatement = function(node, maybeName, expr) {\n  var this$1 = this;\n\n  for (var i = 0; i < this.labels.length; ++i)\n    if (this$1.labels[i].name === maybeName) this$1.raise(expr.start, \"Label '\" + maybeName + \"' is already declared\");\n  var kind = this.type.isLoop ? \"loop\" : this.type === types._switch ? \"switch\" : null;\n  for (var i$1 = this.labels.length - 1; i$1 >= 0; i$1--) {\n    var label = this$1.labels[i$1];\n    if (label.statementStart == node.start) {\n      label.statementStart = this$1.start;\n      label.kind = kind;\n    } else break\n  }\n  this.labels.push({name: maybeName, kind: kind, statementStart: this.start});\n  node.body = this.parseStatement(true);\n  this.labels.pop();\n  node.label = expr;\n  return this.finishNode(node, \"LabeledStatement\")\n};\n\npp$1.parseExpressionStatement = function(node, expr) {\n  node.expression = expr;\n  this.semicolon();\n  return this.finishNode(node, \"ExpressionStatement\")\n};\n\n// Parse a semicolon-enclosed block of statements, handling `\"use\n// strict\"` declarations when `allowStrict` is true (used for\n// function bodies).\n\npp$1.parseBlock = function(allowStrict) {\n  var this$1 = this;\n\n  var node = this.startNode(), first = true, oldStrict;\n  node.body = [];\n  this.expect(types.braceL);\n  while (!this.eat(types.braceR)) {\n    var stmt = this$1.parseStatement(true);\n    node.body.push(stmt);\n    if (first && allowStrict && this$1.isUseStrict(stmt)) {\n      oldStrict = this$1.strict;\n      this$1.setStrict(this$1.strict = true);\n    }\n    first = false;\n  }\n  if (oldStrict === false) this.setStrict(false);\n  return this.finishNode(node, \"BlockStatement\")\n};\n\n// Parse a regular `for` loop. The disambiguation code in\n// `parseStatement` will already have parsed the init statement or\n// expression.\n\npp$1.parseFor = function(node, init) {\n  node.init = init;\n  this.expect(types.semi);\n  node.test = this.type === types.semi ? null : this.parseExpression();\n  this.expect(types.semi);\n  node.update = this.type === types.parenR ? null : this.parseExpression();\n  this.expect(types.parenR);\n  node.body = this.parseStatement(false);\n  this.labels.pop();\n  return this.finishNode(node, \"ForStatement\")\n};\n\n// Parse a `for`/`in` and `for`/`of` loop, which are almost\n// same from parser's perspective.\n\npp$1.parseForIn = function(node, init) {\n  var type = this.type === types._in ? \"ForInStatement\" : \"ForOfStatement\";\n  this.next();\n  node.left = init;\n  node.right = this.parseExpression();\n  this.expect(types.parenR);\n  node.body = this.parseStatement(false);\n  this.labels.pop();\n  return this.finishNode(node, type)\n};\n\n// Parse a list of variable declarations.\n\npp$1.parseVar = function(node, isFor, kind) {\n  var this$1 = this;\n\n  node.declarations = [];\n  node.kind = kind;\n  for (;;) {\n    var decl = this$1.startNode();\n    this$1.parseVarId(decl);\n    if (this$1.eat(types.eq)) {\n      decl.init = this$1.parseMaybeAssign(isFor);\n    } else if (kind === \"const\" && !(this$1.type === types._in || (this$1.options.ecmaVersion >= 6 && this$1.isContextual(\"of\")))) {\n      this$1.unexpected();\n    } else if (decl.id.type != \"Identifier\" && !(isFor && (this$1.type === types._in || this$1.isContextual(\"of\")))) {\n      this$1.raise(this$1.lastTokEnd, \"Complex binding patterns require an initialization value\");\n    } else {\n      decl.init = null;\n    }\n    node.declarations.push(this$1.finishNode(decl, \"VariableDeclarator\"));\n    if (!this$1.eat(types.comma)) break\n  }\n  return node\n};\n\npp$1.parseVarId = function(decl) {\n  decl.id = this.parseBindingAtom();\n  this.checkLVal(decl.id, true);\n};\n\n// Parse a function declaration or literal (depending on the\n// `isStatement` parameter).\n\npp$1.parseFunction = function(node, isStatement, allowExpressionBody, isAsync) {\n  this.initFunction(node);\n  if (this.options.ecmaVersion >= 6 && !isAsync)\n    node.generator = this.eat(types.star);\n  if (this.options.ecmaVersion >= 8)\n    node.async = !!isAsync;\n\n  if (isStatement)\n    node.id = this.parseIdent();\n\n  var oldInGen = this.inGenerator, oldInAsync = this.inAsync, oldYieldPos = this.yieldPos, oldAwaitPos = this.awaitPos;\n  this.inGenerator = node.generator;\n  this.inAsync = node.async;\n  this.yieldPos = 0;\n  this.awaitPos = 0;\n\n  if (!isStatement && this.type === types.name)\n    node.id = this.parseIdent();\n  this.parseFunctionParams(node);\n  this.parseFunctionBody(node, allowExpressionBody);\n\n  this.inGenerator = oldInGen;\n  this.inAsync = oldInAsync;\n  this.yieldPos = oldYieldPos;\n  this.awaitPos = oldAwaitPos;\n  return this.finishNode(node, isStatement ? \"FunctionDeclaration\" : \"FunctionExpression\")\n};\n\npp$1.parseFunctionParams = function(node) {\n  this.expect(types.parenL);\n  node.params = this.parseBindingList(types.parenR, false, this.options.ecmaVersion >= 8, true);\n  this.checkYieldAwaitInDefaultParams();\n};\n\n// Parse a class declaration or literal (depending on the\n// `isStatement` parameter).\n\npp$1.parseClass = function(node, isStatement) {\n  var this$1 = this;\n\n  this.next();\n  this.parseClassId(node, isStatement);\n  this.parseClassSuper(node);\n  var classBody = this.startNode();\n  var hadConstructor = false;\n  classBody.body = [];\n  this.expect(types.braceL);\n  while (!this.eat(types.braceR)) {\n    if (this$1.eat(types.semi)) continue\n    var method = this$1.startNode();\n    var isGenerator = this$1.eat(types.star);\n    var isAsync = false;\n    var isMaybeStatic = this$1.type === types.name && this$1.value === \"static\";\n    this$1.parsePropertyName(method);\n    method.static = isMaybeStatic && this$1.type !== types.parenL;\n    if (method.static) {\n      if (isGenerator) this$1.unexpected();\n      isGenerator = this$1.eat(types.star);\n      this$1.parsePropertyName(method);\n    }\n    if (this$1.options.ecmaVersion >= 8 && !isGenerator && !method.computed &&\n        method.key.type === \"Identifier\" && method.key.name === \"async\" && this$1.type !== types.parenL &&\n        !this$1.canInsertSemicolon()) {\n      isAsync = true;\n      this$1.parsePropertyName(method);\n    }\n    method.kind = \"method\";\n    var isGetSet = false;\n    if (!method.computed) {\n      var key = method.key;\n      if (!isGenerator && !isAsync && key.type === \"Identifier\" && this$1.type !== types.parenL && (key.name === \"get\" || key.name === \"set\")) {\n        isGetSet = true;\n        method.kind = key.name;\n        key = this$1.parsePropertyName(method);\n      }\n      if (!method.static && (key.type === \"Identifier\" && key.name === \"constructor\" ||\n          key.type === \"Literal\" && key.value === \"constructor\")) {\n        if (hadConstructor) this$1.raise(key.start, \"Duplicate constructor in the same class\");\n        if (isGetSet) this$1.raise(key.start, \"Constructor can't have get/set modifier\");\n        if (isGenerator) this$1.raise(key.start, \"Constructor can't be a generator\");\n        if (isAsync) this$1.raise(key.start, \"Constructor can't be an async method\");\n        method.kind = \"constructor\";\n        hadConstructor = true;\n      }\n    }\n    this$1.parseClassMethod(classBody, method, isGenerator, isAsync);\n    if (isGetSet) {\n      var paramCount = method.kind === \"get\" ? 0 : 1;\n      if (method.value.params.length !== paramCount) {\n        var start = method.value.start;\n        if (method.kind === \"get\")\n          this$1.raiseRecoverable(start, \"getter should have no params\");\n        else\n          this$1.raiseRecoverable(start, \"setter should have exactly one param\");\n      } else {\n        if (method.kind === \"set\" && method.value.params[0].type === \"RestElement\")\n          this$1.raiseRecoverable(method.value.params[0].start, \"Setter cannot use rest params\");\n      }\n    }\n  }\n  node.body = this.finishNode(classBody, \"ClassBody\");\n  return this.finishNode(node, isStatement ? \"ClassDeclaration\" : \"ClassExpression\")\n};\n\npp$1.parseClassMethod = function(classBody, method, isGenerator, isAsync) {\n  method.value = this.parseMethod(isGenerator, isAsync);\n  classBody.body.push(this.finishNode(method, \"MethodDefinition\"));\n};\n\npp$1.parseClassId = function(node, isStatement) {\n  node.id = this.type === types.name ? this.parseIdent() : isStatement ? this.unexpected() : null;\n};\n\npp$1.parseClassSuper = function(node) {\n  node.superClass = this.eat(types._extends) ? this.parseExprSubscripts() : null;\n};\n\n// Parses module export declaration.\n\npp$1.parseExport = function(node, exports) {\n  var this$1 = this;\n\n  this.next();\n  // export * from '...'\n  if (this.eat(types.star)) {\n    this.expectContextual(\"from\");\n    node.source = this.type === types.string ? this.parseExprAtom() : this.unexpected();\n    this.semicolon();\n    return this.finishNode(node, \"ExportAllDeclaration\")\n  }\n  if (this.eat(types._default)) { // export default ...\n    this.checkExport(exports, \"default\", this.lastTokStart);\n    var parens = this.type == types.parenL;\n    var expr = this.parseMaybeAssign();\n    var needsSemi = true;\n    if (!parens && (expr.type == \"FunctionExpression\" ||\n                    expr.type == \"ClassExpression\")) {\n      needsSemi = false;\n      if (expr.id) {\n        expr.type = expr.type == \"FunctionExpression\"\n          ? \"FunctionDeclaration\"\n          : \"ClassDeclaration\";\n      }\n    }\n    node.declaration = expr;\n    if (needsSemi) this.semicolon();\n    return this.finishNode(node, \"ExportDefaultDeclaration\")\n  }\n  // export var|const|let|function|class ...\n  if (this.shouldParseExportStatement()) {\n    node.declaration = this.parseStatement(true);\n    if (node.declaration.type === \"VariableDeclaration\")\n      this.checkVariableExport(exports, node.declaration.declarations);\n    else\n      this.checkExport(exports, node.declaration.id.name, node.declaration.id.start);\n    node.specifiers = [];\n    node.source = null;\n  } else { // export { x, y as z } [from '...']\n    node.declaration = null;\n    node.specifiers = this.parseExportSpecifiers(exports);\n    if (this.eatContextual(\"from\")) {\n      node.source = this.type === types.string ? this.parseExprAtom() : this.unexpected();\n    } else {\n      // check for keywords used as local names\n      for (var i = 0; i < node.specifiers.length; i++) {\n        if (this$1.keywords.test(node.specifiers[i].local.name) || this$1.reservedWords.test(node.specifiers[i].local.name)) {\n          this$1.unexpected(node.specifiers[i].local.start);\n        }\n      }\n\n      node.source = null;\n    }\n    this.semicolon();\n  }\n  return this.finishNode(node, \"ExportNamedDeclaration\")\n};\n\npp$1.checkExport = function(exports, name, pos) {\n  if (!exports) return\n  if (Object.prototype.hasOwnProperty.call(exports, name))\n    this.raiseRecoverable(pos, \"Duplicate export '\" + name + \"'\");\n  exports[name] = true;\n};\n\npp$1.checkPatternExport = function(exports, pat) {\n  var this$1 = this;\n\n  var type = pat.type;\n  if (type == \"Identifier\")\n    this.checkExport(exports, pat.name, pat.start);\n  else if (type == \"ObjectPattern\")\n    for (var i = 0; i < pat.properties.length; ++i)\n      this$1.checkPatternExport(exports, pat.properties[i].value);\n  else if (type == \"ArrayPattern\")\n    for (var i$1 = 0; i$1 < pat.elements.length; ++i$1) {\n      var elt = pat.elements[i$1];\n      if (elt) this$1.checkPatternExport(exports, elt);\n    }\n  else if (type == \"AssignmentPattern\")\n    this.checkPatternExport(exports, pat.left);\n  else if (type == \"ParenthesizedExpression\")\n    this.checkPatternExport(exports, pat.expression);\n};\n\npp$1.checkVariableExport = function(exports, decls) {\n  var this$1 = this;\n\n  if (!exports) return\n  for (var i = 0; i < decls.length; i++)\n    this$1.checkPatternExport(exports, decls[i].id);\n};\n\npp$1.shouldParseExportStatement = function() {\n  return this.type.keyword === \"var\"\n    || this.type.keyword === \"const\"\n    || this.type.keyword === \"class\"\n    || this.type.keyword === \"function\"\n    || this.isLet()\n    || this.isAsyncFunction()\n};\n\n// Parses a comma-separated list of module exports.\n\npp$1.parseExportSpecifiers = function(exports) {\n  var this$1 = this;\n\n  var nodes = [], first = true;\n  // export { x, y as z } [from '...']\n  this.expect(types.braceL);\n  while (!this.eat(types.braceR)) {\n    if (!first) {\n      this$1.expect(types.comma);\n      if (this$1.afterTrailingComma(types.braceR)) break\n    } else first = false;\n\n    var node = this$1.startNode();\n    node.local = this$1.parseIdent(this$1.type === types._default);\n    node.exported = this$1.eatContextual(\"as\") ? this$1.parseIdent(true) : node.local;\n    this$1.checkExport(exports, node.exported.name, node.exported.start);\n    nodes.push(this$1.finishNode(node, \"ExportSpecifier\"));\n  }\n  return nodes\n};\n\n// Parses import declaration.\n\npp$1.parseImport = function(node) {\n  this.next();\n  // import '...'\n  if (this.type === types.string) {\n    node.specifiers = empty;\n    node.source = this.parseExprAtom();\n  } else {\n    node.specifiers = this.parseImportSpecifiers();\n    this.expectContextual(\"from\");\n    node.source = this.type === types.string ? this.parseExprAtom() : this.unexpected();\n  }\n  this.semicolon();\n  return this.finishNode(node, \"ImportDeclaration\")\n};\n\n// Parses a comma-separated list of module imports.\n\npp$1.parseImportSpecifiers = function() {\n  var this$1 = this;\n\n  var nodes = [], first = true;\n  if (this.type === types.name) {\n    // import defaultObj, { x, y as z } from '...'\n    var node = this.startNode();\n    node.local = this.parseIdent();\n    this.checkLVal(node.local, true);\n    nodes.push(this.finishNode(node, \"ImportDefaultSpecifier\"));\n    if (!this.eat(types.comma)) return nodes\n  }\n  if (this.type === types.star) {\n    var node$1 = this.startNode();\n    this.next();\n    this.expectContextual(\"as\");\n    node$1.local = this.parseIdent();\n    this.checkLVal(node$1.local, true);\n    nodes.push(this.finishNode(node$1, \"ImportNamespaceSpecifier\"));\n    return nodes\n  }\n  this.expect(types.braceL);\n  while (!this.eat(types.braceR)) {\n    if (!first) {\n      this$1.expect(types.comma);\n      if (this$1.afterTrailingComma(types.braceR)) break\n    } else first = false;\n\n    var node$2 = this$1.startNode();\n    node$2.imported = this$1.parseIdent(true);\n    if (this$1.eatContextual(\"as\")) {\n      node$2.local = this$1.parseIdent();\n    } else {\n      node$2.local = node$2.imported;\n      if (this$1.isKeyword(node$2.local.name)) this$1.unexpected(node$2.local.start);\n      if (this$1.reservedWordsStrict.test(node$2.local.name)) this$1.raiseRecoverable(node$2.local.start, \"The keyword '\" + node$2.local.name + \"' is reserved\");\n    }\n    this$1.checkLVal(node$2.local, true);\n    nodes.push(this$1.finishNode(node$2, \"ImportSpecifier\"));\n  }\n  return nodes\n};\n\nvar pp$2 = Parser.prototype;\n\n// Convert existing expression atom to assignable pattern\n// if possible.\n\npp$2.toAssignable = function(node, isBinding) {\n  var this$1 = this;\n\n  if (this.options.ecmaVersion >= 6 && node) {\n    switch (node.type) {\n      case \"Identifier\":\n      if (this.inAsync && node.name === \"await\")\n        this.raise(node.start, \"Can not use 'await' as identifier inside an async function\");\n      break\n\n    case \"ObjectPattern\":\n    case \"ArrayPattern\":\n      break\n\n    case \"ObjectExpression\":\n      node.type = \"ObjectPattern\";\n      for (var i = 0; i < node.properties.length; i++) {\n        var prop = node.properties[i];\n        if (prop.kind !== \"init\") this$1.raise(prop.key.start, \"Object pattern can't contain getter or setter\");\n        this$1.toAssignable(prop.value, isBinding);\n      }\n      break\n\n    case \"ArrayExpression\":\n      node.type = \"ArrayPattern\";\n      this.toAssignableList(node.elements, isBinding);\n      break\n\n    case \"AssignmentExpression\":\n      if (node.operator === \"=\") {\n        node.type = \"AssignmentPattern\";\n        delete node.operator;\n        this.toAssignable(node.left, isBinding);\n        // falls through to AssignmentPattern\n      } else {\n        this.raise(node.left.end, \"Only '=' operator can be used for specifying default value.\");\n        break\n      }\n\n    case \"AssignmentPattern\":\n      break\n\n    case \"ParenthesizedExpression\":\n      node.expression = this.toAssignable(node.expression, isBinding);\n      break\n\n    case \"MemberExpression\":\n      if (!isBinding) break\n\n    default:\n      this.raise(node.start, \"Assigning to rvalue\");\n    }\n  }\n  return node\n};\n\n// Convert list of expression atoms to binding list.\n\npp$2.toAssignableList = function(exprList, isBinding) {\n  var this$1 = this;\n\n  var end = exprList.length;\n  if (end) {\n    var last = exprList[end - 1];\n    if (last && last.type == \"RestElement\") {\n      --end;\n    } else if (last && last.type == \"SpreadElement\") {\n      last.type = \"RestElement\";\n      var arg = last.argument;\n      this.toAssignable(arg, isBinding);\n      if (arg.type !== \"Identifier\" && arg.type !== \"MemberExpression\" && arg.type !== \"ArrayPattern\")\n        this.unexpected(arg.start);\n      --end;\n    }\n\n    if (isBinding && last && last.type === \"RestElement\" && last.argument.type !== \"Identifier\")\n      this.unexpected(last.argument.start);\n  }\n  for (var i = 0; i < end; i++) {\n    var elt = exprList[i];\n    if (elt) this$1.toAssignable(elt, isBinding);\n  }\n  return exprList\n};\n\n// Parses spread element.\n\npp$2.parseSpread = function(refDestructuringErrors) {\n  var node = this.startNode();\n  this.next();\n  node.argument = this.parseMaybeAssign(false, refDestructuringErrors);\n  return this.finishNode(node, \"SpreadElement\")\n};\n\npp$2.parseRest = function(allowNonIdent) {\n  var node = this.startNode();\n  this.next();\n\n  // RestElement inside of a function parameter must be an identifier\n  if (allowNonIdent) node.argument = this.type === types.name ? this.parseIdent() : this.unexpected();\n  else node.argument = this.type === types.name || this.type === types.bracketL ? this.parseBindingAtom() : this.unexpected();\n\n  return this.finishNode(node, \"RestElement\")\n};\n\n// Parses lvalue (assignable) atom.\n\npp$2.parseBindingAtom = function() {\n  if (this.options.ecmaVersion < 6) return this.parseIdent()\n  switch (this.type) {\n  case types.name:\n    return this.parseIdent()\n\n  case types.bracketL:\n    var node = this.startNode();\n    this.next();\n    node.elements = this.parseBindingList(types.bracketR, true, true);\n    return this.finishNode(node, \"ArrayPattern\")\n\n  case types.braceL:\n    return this.parseObj(true)\n\n  default:\n    this.unexpected();\n  }\n};\n\npp$2.parseBindingList = function(close, allowEmpty, allowTrailingComma, allowNonIdent) {\n  var this$1 = this;\n\n  var elts = [], first = true;\n  while (!this.eat(close)) {\n    if (first) first = false;\n    else this$1.expect(types.comma);\n    if (allowEmpty && this$1.type === types.comma) {\n      elts.push(null);\n    } else if (allowTrailingComma && this$1.afterTrailingComma(close)) {\n      break\n    } else if (this$1.type === types.ellipsis) {\n      var rest = this$1.parseRest(allowNonIdent);\n      this$1.parseBindingListItem(rest);\n      elts.push(rest);\n      if (this$1.type === types.comma) this$1.raise(this$1.start, \"Comma is not permitted after the rest element\");\n      this$1.expect(close);\n      break\n    } else {\n      var elem = this$1.parseMaybeDefault(this$1.start, this$1.startLoc);\n      this$1.parseBindingListItem(elem);\n      elts.push(elem);\n    }\n  }\n  return elts\n};\n\npp$2.parseBindingListItem = function(param) {\n  return param\n};\n\n// Parses assignment pattern around given atom if possible.\n\npp$2.parseMaybeDefault = function(startPos, startLoc, left) {\n  left = left || this.parseBindingAtom();\n  if (this.options.ecmaVersion < 6 || !this.eat(types.eq)) return left\n  var node = this.startNodeAt(startPos, startLoc);\n  node.left = left;\n  node.right = this.parseMaybeAssign();\n  return this.finishNode(node, \"AssignmentPattern\")\n};\n\n// Verify that a node is an lval — something that can be assigned\n// to.\n\npp$2.checkLVal = function(expr, isBinding, checkClashes) {\n  var this$1 = this;\n\n  switch (expr.type) {\n  case \"Identifier\":\n    if (this.strict && this.reservedWordsStrictBind.test(expr.name))\n      this.raiseRecoverable(expr.start, (isBinding ? \"Binding \" : \"Assigning to \") + expr.name + \" in strict mode\");\n    if (checkClashes) {\n      if (has(checkClashes, expr.name))\n        this.raiseRecoverable(expr.start, \"Argument name clash\");\n      checkClashes[expr.name] = true;\n    }\n    break\n\n  case \"MemberExpression\":\n    if (isBinding) this.raiseRecoverable(expr.start, (isBinding ? \"Binding\" : \"Assigning to\") + \" member expression\");\n    break\n\n  case \"ObjectPattern\":\n    for (var i = 0; i < expr.properties.length; i++)\n      this$1.checkLVal(expr.properties[i].value, isBinding, checkClashes);\n    break\n\n  case \"ArrayPattern\":\n    for (var i$1 = 0; i$1 < expr.elements.length; i$1++) {\n      var elem = expr.elements[i$1];\n      if (elem) this$1.checkLVal(elem, isBinding, checkClashes);\n    }\n    break\n\n  case \"AssignmentPattern\":\n    this.checkLVal(expr.left, isBinding, checkClashes);\n    break\n\n  case \"RestElement\":\n    this.checkLVal(expr.argument, isBinding, checkClashes);\n    break\n\n  case \"ParenthesizedExpression\":\n    this.checkLVal(expr.expression, isBinding, checkClashes);\n    break\n\n  default:\n    this.raise(expr.start, (isBinding ? \"Binding\" : \"Assigning to\") + \" rvalue\");\n  }\n};\n\n// A recursive descent parser operates by defining functions for all\n// syntactic elements, and recursively calling those, each function\n// advancing the input stream and returning an AST node. Precedence\n// of constructs (for example, the fact that `!x[1]` means `!(x[1])`\n// instead of `(!x)[1]` is handled by the fact that the parser\n// function that parses unary prefix operators is called first, and\n// in turn calls the function that parses `[]` subscripts — that\n// way, it'll receive the node for `x[1]` already parsed, and wraps\n// *that* in the unary operator node.\n//\n// Acorn uses an [operator precedence parser][opp] to handle binary\n// operator precedence, because it is much more compact than using\n// the technique outlined above, which uses different, nesting\n// functions to specify precedence, for all of the ten binary\n// precedence levels that JavaScript defines.\n//\n// [opp]: http://en.wikipedia.org/wiki/Operator-precedence_parser\n\nvar pp$3 = Parser.prototype;\n\n// Check if property name clashes with already added.\n// Object/class getters and setters are not allowed to clash —\n// either with each other or with an init property — and in\n// strict mode, init properties are also not allowed to be repeated.\n\npp$3.checkPropClash = function(prop, propHash) {\n  if (this.options.ecmaVersion >= 6 && (prop.computed || prop.method || prop.shorthand))\n    return\n  var key = prop.key;\n  var name;\n  switch (key.type) {\n  case \"Identifier\": name = key.name; break\n  case \"Literal\": name = String(key.value); break\n  default: return\n  }\n  var kind = prop.kind;\n  if (this.options.ecmaVersion >= 6) {\n    if (name === \"__proto__\" && kind === \"init\") {\n      if (propHash.proto) this.raiseRecoverable(key.start, \"Redefinition of __proto__ property\");\n      propHash.proto = true;\n    }\n    return\n  }\n  name = \"$\" + name;\n  var other = propHash[name];\n  if (other) {\n    var isGetSet = kind !== \"init\";\n    if ((this.strict || isGetSet) && other[kind] || !(isGetSet ^ other.init))\n      this.raiseRecoverable(key.start, \"Redefinition of property\");\n  } else {\n    other = propHash[name] = {\n      init: false,\n      get: false,\n      set: false\n    };\n  }\n  other[kind] = true;\n};\n\n// ### Expression parsing\n\n// These nest, from the most general expression type at the top to\n// 'atomic', nondivisible expression types at the bottom. Most of\n// the functions will simply let the function(s) below them parse,\n// and, *if* the syntactic construct they handle is present, wrap\n// the AST node that the inner parser gave them in another node.\n\n// Parse a full expression. The optional arguments are used to\n// forbid the `in` operator (in for loops initalization expressions)\n// and provide reference for storing '=' operator inside shorthand\n// property assignment in contexts where both object expression\n// and object pattern might appear (so it's possible to raise\n// delayed syntax error at correct position).\n\npp$3.parseExpression = function(noIn, refDestructuringErrors) {\n  var this$1 = this;\n\n  var startPos = this.start, startLoc = this.startLoc;\n  var expr = this.parseMaybeAssign(noIn, refDestructuringErrors);\n  if (this.type === types.comma) {\n    var node = this.startNodeAt(startPos, startLoc);\n    node.expressions = [expr];\n    while (this.eat(types.comma)) node.expressions.push(this$1.parseMaybeAssign(noIn, refDestructuringErrors));\n    return this.finishNode(node, \"SequenceExpression\")\n  }\n  return expr\n};\n\n// Parse an assignment expression. This includes applications of\n// operators like `+=`.\n\npp$3.parseMaybeAssign = function(noIn, refDestructuringErrors, afterLeftParse) {\n  if (this.inGenerator && this.isContextual(\"yield\")) return this.parseYield()\n\n  var ownDestructuringErrors = false;\n  if (!refDestructuringErrors) {\n    refDestructuringErrors = new DestructuringErrors;\n    ownDestructuringErrors = true;\n  }\n  var startPos = this.start, startLoc = this.startLoc;\n  if (this.type == types.parenL || this.type == types.name)\n    this.potentialArrowAt = this.start;\n  var left = this.parseMaybeConditional(noIn, refDestructuringErrors);\n  if (afterLeftParse) left = afterLeftParse.call(this, left, startPos, startLoc);\n  if (this.type.isAssign) {\n    this.checkPatternErrors(refDestructuringErrors, true);\n    if (!ownDestructuringErrors) DestructuringErrors.call(refDestructuringErrors);\n    var node = this.startNodeAt(startPos, startLoc);\n    node.operator = this.value;\n    node.left = this.type === types.eq ? this.toAssignable(left) : left;\n    refDestructuringErrors.shorthandAssign = 0; // reset because shorthand default was used correctly\n    this.checkLVal(left);\n    this.next();\n    node.right = this.parseMaybeAssign(noIn);\n    return this.finishNode(node, \"AssignmentExpression\")\n  } else {\n    if (ownDestructuringErrors) this.checkExpressionErrors(refDestructuringErrors, true);\n  }\n  return left\n};\n\n// Parse a ternary conditional (`?:`) operator.\n\npp$3.parseMaybeConditional = function(noIn, refDestructuringErrors) {\n  var startPos = this.start, startLoc = this.startLoc;\n  var expr = this.parseExprOps(noIn, refDestructuringErrors);\n  if (this.checkExpressionErrors(refDestructuringErrors)) return expr\n  if (this.eat(types.question)) {\n    var node = this.startNodeAt(startPos, startLoc);\n    node.test = expr;\n    node.consequent = this.parseMaybeAssign();\n    this.expect(types.colon);\n    node.alternate = this.parseMaybeAssign(noIn);\n    return this.finishNode(node, \"ConditionalExpression\")\n  }\n  return expr\n};\n\n// Start the precedence parser.\n\npp$3.parseExprOps = function(noIn, refDestructuringErrors) {\n  var startPos = this.start, startLoc = this.startLoc;\n  var expr = this.parseMaybeUnary(refDestructuringErrors, false);\n  if (this.checkExpressionErrors(refDestructuringErrors)) return expr\n  return this.parseExprOp(expr, startPos, startLoc, -1, noIn)\n};\n\n// Parse binary operators with the operator precedence parsing\n// algorithm. `left` is the left-hand side of the operator.\n// `minPrec` provides context that allows the function to stop and\n// defer further parser to one of its callers when it encounters an\n// operator that has a lower precedence than the set it is parsing.\n\npp$3.parseExprOp = function(left, leftStartPos, leftStartLoc, minPrec, noIn) {\n  var prec = this.type.binop;\n  if (prec != null && (!noIn || this.type !== types._in)) {\n    if (prec > minPrec) {\n      var logical = this.type === types.logicalOR || this.type === types.logicalAND;\n      var op = this.value;\n      this.next();\n      var startPos = this.start, startLoc = this.startLoc;\n      var right = this.parseExprOp(this.parseMaybeUnary(null, false), startPos, startLoc, prec, noIn);\n      var node = this.buildBinary(leftStartPos, leftStartLoc, left, right, op, logical);\n      return this.parseExprOp(node, leftStartPos, leftStartLoc, minPrec, noIn)\n    }\n  }\n  return left\n};\n\npp$3.buildBinary = function(startPos, startLoc, left, right, op, logical) {\n  var node = this.startNodeAt(startPos, startLoc);\n  node.left = left;\n  node.operator = op;\n  node.right = right;\n  return this.finishNode(node, logical ? \"LogicalExpression\" : \"BinaryExpression\")\n};\n\n// Parse unary operators, both prefix and postfix.\n\npp$3.parseMaybeUnary = function(refDestructuringErrors, sawUnary) {\n  var this$1 = this;\n\n  var startPos = this.start, startLoc = this.startLoc, expr;\n  if (this.inAsync && this.isContextual(\"await\")) {\n    expr = this.parseAwait(refDestructuringErrors);\n    sawUnary = true;\n  } else if (this.type.prefix) {\n    var node = this.startNode(), update = this.type === types.incDec;\n    node.operator = this.value;\n    node.prefix = true;\n    this.next();\n    node.argument = this.parseMaybeUnary(null, true);\n    this.checkExpressionErrors(refDestructuringErrors, true);\n    if (update) this.checkLVal(node.argument);\n    else if (this.strict && node.operator === \"delete\" &&\n             node.argument.type === \"Identifier\")\n      this.raiseRecoverable(node.start, \"Deleting local variable in strict mode\");\n    else sawUnary = true;\n    expr = this.finishNode(node, update ? \"UpdateExpression\" : \"UnaryExpression\");\n  } else {\n    expr = this.parseExprSubscripts(refDestructuringErrors);\n    if (this.checkExpressionErrors(refDestructuringErrors)) return expr\n    while (this.type.postfix && !this.canInsertSemicolon()) {\n      var node$1 = this$1.startNodeAt(startPos, startLoc);\n      node$1.operator = this$1.value;\n      node$1.prefix = false;\n      node$1.argument = expr;\n      this$1.checkLVal(expr);\n      this$1.next();\n      expr = this$1.finishNode(node$1, \"UpdateExpression\");\n    }\n  }\n\n  if (!sawUnary && this.eat(types.starstar))\n    return this.buildBinary(startPos, startLoc, expr, this.parseMaybeUnary(null, false), \"**\", false)\n  else\n    return expr\n};\n\n// Parse call, dot, and `[]`-subscript expressions.\n\npp$3.parseExprSubscripts = function(refDestructuringErrors) {\n  var startPos = this.start, startLoc = this.startLoc;\n  var expr = this.parseExprAtom(refDestructuringErrors);\n  var skipArrowSubscripts = expr.type === \"ArrowFunctionExpression\" && this.input.slice(this.lastTokStart, this.lastTokEnd) !== \")\";\n  if (this.checkExpressionErrors(refDestructuringErrors) || skipArrowSubscripts) return expr\n  return this.parseSubscripts(expr, startPos, startLoc)\n};\n\npp$3.parseSubscripts = function(base, startPos, startLoc, noCalls) {\n  var this$1 = this;\n\n  for (;;) {\n    var maybeAsyncArrow = this$1.options.ecmaVersion >= 8 && base.type === \"Identifier\" && base.name === \"async\" && !this$1.canInsertSemicolon();\n    if (this$1.eat(types.dot)) {\n      var node = this$1.startNodeAt(startPos, startLoc);\n      node.object = base;\n      node.property = this$1.parseIdent(true);\n      node.computed = false;\n      base = this$1.finishNode(node, \"MemberExpression\");\n    } else if (this$1.eat(types.bracketL)) {\n      var node$1 = this$1.startNodeAt(startPos, startLoc);\n      node$1.object = base;\n      node$1.property = this$1.parseExpression();\n      node$1.computed = true;\n      this$1.expect(types.bracketR);\n      base = this$1.finishNode(node$1, \"MemberExpression\");\n    } else if (!noCalls && this$1.eat(types.parenL)) {\n      var refDestructuringErrors = new DestructuringErrors, oldYieldPos = this$1.yieldPos, oldAwaitPos = this$1.awaitPos;\n      this$1.yieldPos = 0;\n      this$1.awaitPos = 0;\n      var exprList = this$1.parseExprList(types.parenR, this$1.options.ecmaVersion >= 8, false, refDestructuringErrors);\n      if (maybeAsyncArrow && !this$1.canInsertSemicolon() && this$1.eat(types.arrow)) {\n        this$1.checkPatternErrors(refDestructuringErrors, true);\n        this$1.checkYieldAwaitInDefaultParams();\n        this$1.yieldPos = oldYieldPos;\n        this$1.awaitPos = oldAwaitPos;\n        return this$1.parseArrowExpression(this$1.startNodeAt(startPos, startLoc), exprList, true)\n      }\n      this$1.checkExpressionErrors(refDestructuringErrors, true);\n      this$1.yieldPos = oldYieldPos || this$1.yieldPos;\n      this$1.awaitPos = oldAwaitPos || this$1.awaitPos;\n      var node$2 = this$1.startNodeAt(startPos, startLoc);\n      node$2.callee = base;\n      node$2.arguments = exprList;\n      base = this$1.finishNode(node$2, \"CallExpression\");\n    } else if (this$1.type === types.backQuote) {\n      var node$3 = this$1.startNodeAt(startPos, startLoc);\n      node$3.tag = base;\n      node$3.quasi = this$1.parseTemplate();\n      base = this$1.finishNode(node$3, \"TaggedTemplateExpression\");\n    } else {\n      return base\n    }\n  }\n};\n\n// Parse an atomic expression — either a single token that is an\n// expression, an expression started by a keyword like `function` or\n// `new`, or an expression wrapped in punctuation like `()`, `[]`,\n// or `{}`.\n\npp$3.parseExprAtom = function(refDestructuringErrors) {\n  var node, canBeArrow = this.potentialArrowAt == this.start;\n  switch (this.type) {\n  case types._super:\n    if (!this.inFunction)\n      this.raise(this.start, \"'super' outside of function or class\");\n\n  case types._this:\n    var type = this.type === types._this ? \"ThisExpression\" : \"Super\";\n    node = this.startNode();\n    this.next();\n    return this.finishNode(node, type)\n\n  case types.name:\n    var startPos = this.start, startLoc = this.startLoc;\n    var id = this.parseIdent(this.type !== types.name);\n    if (this.options.ecmaVersion >= 8 && id.name === \"async\" && !this.canInsertSemicolon() && this.eat(types._function))\n      return this.parseFunction(this.startNodeAt(startPos, startLoc), false, false, true)\n    if (canBeArrow && !this.canInsertSemicolon()) {\n      if (this.eat(types.arrow))\n        return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), [id], false)\n      if (this.options.ecmaVersion >= 8 && id.name === \"async\" && this.type === types.name) {\n        id = this.parseIdent();\n        if (this.canInsertSemicolon() || !this.eat(types.arrow))\n          this.unexpected();\n        return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), [id], true)\n      }\n    }\n    return id\n\n  case types.regexp:\n    var value = this.value;\n    node = this.parseLiteral(value.value);\n    node.regex = {pattern: value.pattern, flags: value.flags};\n    return node\n\n  case types.num: case types.string:\n    return this.parseLiteral(this.value)\n\n  case types._null: case types._true: case types._false:\n    node = this.startNode();\n    node.value = this.type === types._null ? null : this.type === types._true;\n    node.raw = this.type.keyword;\n    this.next();\n    return this.finishNode(node, \"Literal\")\n\n  case types.parenL:\n    return this.parseParenAndDistinguishExpression(canBeArrow)\n\n  case types.bracketL:\n    node = this.startNode();\n    this.next();\n    node.elements = this.parseExprList(types.bracketR, true, true, refDestructuringErrors);\n    return this.finishNode(node, \"ArrayExpression\")\n\n  case types.braceL:\n    return this.parseObj(false, refDestructuringErrors)\n\n  case types._function:\n    node = this.startNode();\n    this.next();\n    return this.parseFunction(node, false)\n\n  case types._class:\n    return this.parseClass(this.startNode(), false)\n\n  case types._new:\n    return this.parseNew()\n\n  case types.backQuote:\n    return this.parseTemplate()\n\n  default:\n    this.unexpected();\n  }\n};\n\npp$3.parseLiteral = function(value) {\n  var node = this.startNode();\n  node.value = value;\n  node.raw = this.input.slice(this.start, this.end);\n  this.next();\n  return this.finishNode(node, \"Literal\")\n};\n\npp$3.parseParenExpression = function() {\n  this.expect(types.parenL);\n  var val = this.parseExpression();\n  this.expect(types.parenR);\n  return val\n};\n\npp$3.parseParenAndDistinguishExpression = function(canBeArrow) {\n  var this$1 = this;\n\n  var startPos = this.start, startLoc = this.startLoc, val, allowTrailingComma = this.options.ecmaVersion >= 8;\n  if (this.options.ecmaVersion >= 6) {\n    this.next();\n\n    var innerStartPos = this.start, innerStartLoc = this.startLoc;\n    var exprList = [], first = true, lastIsComma = false;\n    var refDestructuringErrors = new DestructuringErrors, oldYieldPos = this.yieldPos, oldAwaitPos = this.awaitPos, spreadStart, innerParenStart;\n    this.yieldPos = 0;\n    this.awaitPos = 0;\n    while (this.type !== types.parenR) {\n      first ? first = false : this$1.expect(types.comma);\n      if (allowTrailingComma && this$1.afterTrailingComma(types.parenR, true)) {\n        lastIsComma = true;\n        break\n      } else if (this$1.type === types.ellipsis) {\n        spreadStart = this$1.start;\n        exprList.push(this$1.parseParenItem(this$1.parseRest()));\n        if (this$1.type === types.comma) this$1.raise(this$1.start, \"Comma is not permitted after the rest element\");\n        break\n      } else {\n        if (this$1.type === types.parenL && !innerParenStart) {\n          innerParenStart = this$1.start;\n        }\n        exprList.push(this$1.parseMaybeAssign(false, refDestructuringErrors, this$1.parseParenItem));\n      }\n    }\n    var innerEndPos = this.start, innerEndLoc = this.startLoc;\n    this.expect(types.parenR);\n\n    if (canBeArrow && !this.canInsertSemicolon() && this.eat(types.arrow)) {\n      this.checkPatternErrors(refDestructuringErrors, true);\n      this.checkYieldAwaitInDefaultParams();\n      if (innerParenStart) this.unexpected(innerParenStart);\n      this.yieldPos = oldYieldPos;\n      this.awaitPos = oldAwaitPos;\n      return this.parseParenArrowList(startPos, startLoc, exprList)\n    }\n\n    if (!exprList.length || lastIsComma) this.unexpected(this.lastTokStart);\n    if (spreadStart) this.unexpected(spreadStart);\n    this.checkExpressionErrors(refDestructuringErrors, true);\n    this.yieldPos = oldYieldPos || this.yieldPos;\n    this.awaitPos = oldAwaitPos || this.awaitPos;\n\n    if (exprList.length > 1) {\n      val = this.startNodeAt(innerStartPos, innerStartLoc);\n      val.expressions = exprList;\n      this.finishNodeAt(val, \"SequenceExpression\", innerEndPos, innerEndLoc);\n    } else {\n      val = exprList[0];\n    }\n  } else {\n    val = this.parseParenExpression();\n  }\n\n  if (this.options.preserveParens) {\n    var par = this.startNodeAt(startPos, startLoc);\n    par.expression = val;\n    return this.finishNode(par, \"ParenthesizedExpression\")\n  } else {\n    return val\n  }\n};\n\npp$3.parseParenItem = function(item) {\n  return item\n};\n\npp$3.parseParenArrowList = function(startPos, startLoc, exprList) {\n  return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), exprList)\n};\n\n// New's precedence is slightly tricky. It must allow its argument to\n// be a `[]` or dot subscript expression, but not a call — at least,\n// not without wrapping it in parentheses. Thus, it uses the noCalls\n// argument to parseSubscripts to prevent it from consuming the\n// argument list.\n\nvar empty$1 = [];\n\npp$3.parseNew = function() {\n  var node = this.startNode();\n  var meta = this.parseIdent(true);\n  if (this.options.ecmaVersion >= 6 && this.eat(types.dot)) {\n    node.meta = meta;\n    node.property = this.parseIdent(true);\n    if (node.property.name !== \"target\")\n      this.raiseRecoverable(node.property.start, \"The only valid meta property for new is new.target\");\n    if (!this.inFunction)\n      this.raiseRecoverable(node.start, \"new.target can only be used in functions\");\n    return this.finishNode(node, \"MetaProperty\")\n  }\n  var startPos = this.start, startLoc = this.startLoc;\n  node.callee = this.parseSubscripts(this.parseExprAtom(), startPos, startLoc, true);\n  if (this.eat(types.parenL)) node.arguments = this.parseExprList(types.parenR, this.options.ecmaVersion >= 8, false);\n  else node.arguments = empty$1;\n  return this.finishNode(node, \"NewExpression\")\n};\n\n// Parse template expression.\n\npp$3.parseTemplateElement = function() {\n  var elem = this.startNode();\n  elem.value = {\n    raw: this.input.slice(this.start, this.end).replace(/\\r\\n?/g, '\\n'),\n    cooked: this.value\n  };\n  this.next();\n  elem.tail = this.type === types.backQuote;\n  return this.finishNode(elem, \"TemplateElement\")\n};\n\npp$3.parseTemplate = function() {\n  var this$1 = this;\n\n  var node = this.startNode();\n  this.next();\n  node.expressions = [];\n  var curElt = this.parseTemplateElement();\n  node.quasis = [curElt];\n  while (!curElt.tail) {\n    this$1.expect(types.dollarBraceL);\n    node.expressions.push(this$1.parseExpression());\n    this$1.expect(types.braceR);\n    node.quasis.push(curElt = this$1.parseTemplateElement());\n  }\n  this.next();\n  return this.finishNode(node, \"TemplateLiteral\")\n};\n\n// Parse an object literal or binding pattern.\n\npp$3.parseObj = function(isPattern, refDestructuringErrors) {\n  var this$1 = this;\n\n  var node = this.startNode(), first = true, propHash = {};\n  node.properties = [];\n  this.next();\n  while (!this.eat(types.braceR)) {\n    if (!first) {\n      this$1.expect(types.comma);\n      if (this$1.afterTrailingComma(types.braceR)) break\n    } else first = false;\n\n    var prop = this$1.startNode(), isGenerator, isAsync, startPos, startLoc;\n    if (this$1.options.ecmaVersion >= 6) {\n      prop.method = false;\n      prop.shorthand = false;\n      if (isPattern || refDestructuringErrors) {\n        startPos = this$1.start;\n        startLoc = this$1.startLoc;\n      }\n      if (!isPattern)\n        isGenerator = this$1.eat(types.star);\n    }\n    this$1.parsePropertyName(prop);\n    if (!isPattern && this$1.options.ecmaVersion >= 8 && !isGenerator && !prop.computed &&\n        prop.key.type === \"Identifier\" && prop.key.name === \"async\" && this$1.type !== types.parenL &&\n        this$1.type !== types.colon && !this$1.canInsertSemicolon()) {\n      isAsync = true;\n      this$1.parsePropertyName(prop, refDestructuringErrors);\n    } else {\n      isAsync = false;\n    }\n    this$1.parsePropertyValue(prop, isPattern, isGenerator, isAsync, startPos, startLoc, refDestructuringErrors);\n    this$1.checkPropClash(prop, propHash);\n    node.properties.push(this$1.finishNode(prop, \"Property\"));\n  }\n  return this.finishNode(node, isPattern ? \"ObjectPattern\" : \"ObjectExpression\")\n};\n\npp$3.parsePropertyValue = function(prop, isPattern, isGenerator, isAsync, startPos, startLoc, refDestructuringErrors) {\n  if ((isGenerator || isAsync) && this.type === types.colon)\n    this.unexpected();\n\n  if (this.eat(types.colon)) {\n    prop.value = isPattern ? this.parseMaybeDefault(this.start, this.startLoc) : this.parseMaybeAssign(false, refDestructuringErrors);\n    prop.kind = \"init\";\n  } else if (this.options.ecmaVersion >= 6 && this.type === types.parenL) {\n    if (isPattern) this.unexpected();\n    prop.kind = \"init\";\n    prop.method = true;\n    prop.value = this.parseMethod(isGenerator, isAsync);\n  } else if (this.options.ecmaVersion >= 5 && !prop.computed && prop.key.type === \"Identifier\" &&\n             (prop.key.name === \"get\" || prop.key.name === \"set\") &&\n             (this.type != types.comma && this.type != types.braceR)) {\n    if (isGenerator || isAsync || isPattern) this.unexpected();\n    prop.kind = prop.key.name;\n    this.parsePropertyName(prop);\n    prop.value = this.parseMethod(false);\n    var paramCount = prop.kind === \"get\" ? 0 : 1;\n    if (prop.value.params.length !== paramCount) {\n      var start = prop.value.start;\n      if (prop.kind === \"get\")\n        this.raiseRecoverable(start, \"getter should have no params\");\n      else\n        this.raiseRecoverable(start, \"setter should have exactly one param\");\n    } else {\n      if (prop.kind === \"set\" && prop.value.params[0].type === \"RestElement\")\n        this.raiseRecoverable(prop.value.params[0].start, \"Setter cannot use rest params\");\n    }\n  } else if (this.options.ecmaVersion >= 6 && !prop.computed && prop.key.type === \"Identifier\") {\n    if (this.keywords.test(prop.key.name) ||\n        (this.strict ? this.reservedWordsStrict : this.reservedWords).test(prop.key.name) ||\n        (this.inGenerator && prop.key.name == \"yield\") ||\n        (this.inAsync && prop.key.name == \"await\"))\n      this.raiseRecoverable(prop.key.start, \"'\" + prop.key.name + \"' can not be used as shorthand property\");\n    prop.kind = \"init\";\n    if (isPattern) {\n      prop.value = this.parseMaybeDefault(startPos, startLoc, prop.key);\n    } else if (this.type === types.eq && refDestructuringErrors) {\n      if (!refDestructuringErrors.shorthandAssign)\n        refDestructuringErrors.shorthandAssign = this.start;\n      prop.value = this.parseMaybeDefault(startPos, startLoc, prop.key);\n    } else {\n      prop.value = prop.key;\n    }\n    prop.shorthand = true;\n  } else this.unexpected();\n};\n\npp$3.parsePropertyName = function(prop) {\n  if (this.options.ecmaVersion >= 6) {\n    if (this.eat(types.bracketL)) {\n      prop.computed = true;\n      prop.key = this.parseMaybeAssign();\n      this.expect(types.bracketR);\n      return prop.key\n    } else {\n      prop.computed = false;\n    }\n  }\n  return prop.key = this.type === types.num || this.type === types.string ? this.parseExprAtom() : this.parseIdent(true)\n};\n\n// Initialize empty function node.\n\npp$3.initFunction = function(node) {\n  node.id = null;\n  if (this.options.ecmaVersion >= 6) {\n    node.generator = false;\n    node.expression = false;\n  }\n  if (this.options.ecmaVersion >= 8)\n    node.async = false;\n};\n\n// Parse object or class method.\n\npp$3.parseMethod = function(isGenerator, isAsync) {\n  var node = this.startNode(), oldInGen = this.inGenerator, oldInAsync = this.inAsync, oldYieldPos = this.yieldPos, oldAwaitPos = this.awaitPos;\n\n  this.initFunction(node);\n  if (this.options.ecmaVersion >= 6)\n    node.generator = isGenerator;\n  if (this.options.ecmaVersion >= 8)\n    node.async = !!isAsync;\n\n  this.inGenerator = node.generator;\n  this.inAsync = node.async;\n  this.yieldPos = 0;\n  this.awaitPos = 0;\n\n  this.expect(types.parenL);\n  node.params = this.parseBindingList(types.parenR, false, this.options.ecmaVersion >= 8);\n  this.checkYieldAwaitInDefaultParams();\n  this.parseFunctionBody(node, false);\n\n  this.inGenerator = oldInGen;\n  this.inAsync = oldInAsync;\n  this.yieldPos = oldYieldPos;\n  this.awaitPos = oldAwaitPos;\n  return this.finishNode(node, \"FunctionExpression\")\n};\n\n// Parse arrow function expression with given parameters.\n\npp$3.parseArrowExpression = function(node, params, isAsync) {\n  var oldInGen = this.inGenerator, oldInAsync = this.inAsync, oldYieldPos = this.yieldPos, oldAwaitPos = this.awaitPos;\n\n  this.initFunction(node);\n  if (this.options.ecmaVersion >= 8)\n    node.async = !!isAsync;\n\n  this.inGenerator = false;\n  this.inAsync = node.async;\n  this.yieldPos = 0;\n  this.awaitPos = 0;\n\n  node.params = this.toAssignableList(params, true);\n  this.parseFunctionBody(node, true);\n\n  this.inGenerator = oldInGen;\n  this.inAsync = oldInAsync;\n  this.yieldPos = oldYieldPos;\n  this.awaitPos = oldAwaitPos;\n  return this.finishNode(node, \"ArrowFunctionExpression\")\n};\n\n// Parse function body and check parameters.\n\npp$3.parseFunctionBody = function(node, isArrowFunction) {\n  var isExpression = isArrowFunction && this.type !== types.braceL;\n\n  if (isExpression) {\n    node.body = this.parseMaybeAssign();\n    node.expression = true;\n  } else {\n    // Start a new scope with regard to labels and the `inFunction`\n    // flag (restore them to their old value afterwards).\n    var oldInFunc = this.inFunction, oldLabels = this.labels;\n    this.inFunction = true; this.labels = [];\n    node.body = this.parseBlock(true);\n    node.expression = false;\n    this.inFunction = oldInFunc; this.labels = oldLabels;\n  }\n\n  // If this is a strict mode function, verify that argument names\n  // are not repeated, and it does not try to bind the words `eval`\n  // or `arguments`.\n  var useStrict = (!isExpression && node.body.body.length && this.isUseStrict(node.body.body[0])) ? node.body.body[0] : null;\n  if (useStrict && this.options.ecmaVersion >= 7 && !this.isSimpleParamList(node.params))\n    this.raiseRecoverable(useStrict.start, \"Illegal 'use strict' directive in function with non-simple parameter list\");\n\n  if (this.strict || useStrict) {\n    var oldStrict = this.strict;\n    this.strict = true;\n    if (node.id)\n      this.checkLVal(node.id, true);\n    this.checkParams(node);\n    this.strict = oldStrict;\n  } else if (isArrowFunction || !this.isSimpleParamList(node.params)) {\n    this.checkParams(node);\n  }\n};\n\npp$3.isSimpleParamList = function(params) {\n  for (var i = 0; i < params.length; i++)\n    if (params[i].type !== \"Identifier\") return false\n  return true\n};\n\n// Checks function params for various disallowed patterns such as using \"eval\"\n// or \"arguments\" and duplicate parameters.\n\npp$3.checkParams = function(node) {\n  var this$1 = this;\n\n  var nameHash = {};\n  for (var i = 0; i < node.params.length; i++) this$1.checkLVal(node.params[i], true, nameHash);\n};\n\n// Parses a comma-separated list of expressions, and returns them as\n// an array. `close` is the token type that ends the list, and\n// `allowEmpty` can be turned on to allow subsequent commas with\n// nothing in between them to be parsed as `null` (which is needed\n// for array literals).\n\npp$3.parseExprList = function(close, allowTrailingComma, allowEmpty, refDestructuringErrors) {\n  var this$1 = this;\n\n  var elts = [], first = true;\n  while (!this.eat(close)) {\n    if (!first) {\n      this$1.expect(types.comma);\n      if (allowTrailingComma && this$1.afterTrailingComma(close)) break\n    } else first = false;\n\n    var elt;\n    if (allowEmpty && this$1.type === types.comma)\n      elt = null;\n    else if (this$1.type === types.ellipsis) {\n      elt = this$1.parseSpread(refDestructuringErrors);\n      if (this$1.type === types.comma && refDestructuringErrors && !refDestructuringErrors.trailingComma) {\n        refDestructuringErrors.trailingComma = this$1.start;\n      }\n    } else\n      elt = this$1.parseMaybeAssign(false, refDestructuringErrors);\n    elts.push(elt);\n  }\n  return elts\n};\n\n// Parse the next token as an identifier. If `liberal` is true (used\n// when parsing properties), it will also convert keywords into\n// identifiers.\n\npp$3.parseIdent = function(liberal) {\n  var node = this.startNode();\n  if (liberal && this.options.allowReserved == \"never\") liberal = false;\n  if (this.type === types.name) {\n    if (!liberal && (this.strict ? this.reservedWordsStrict : this.reservedWords).test(this.value) &&\n        (this.options.ecmaVersion >= 6 ||\n         this.input.slice(this.start, this.end).indexOf(\"\\\\\") == -1))\n      this.raiseRecoverable(this.start, \"The keyword '\" + this.value + \"' is reserved\");\n    if (this.inGenerator && this.value === \"yield\")\n      this.raiseRecoverable(this.start, \"Can not use 'yield' as identifier inside a generator\");\n    if (this.inAsync && this.value === \"await\")\n      this.raiseRecoverable(this.start, \"Can not use 'await' as identifier inside an async function\");\n    node.name = this.value;\n  } else if (liberal && this.type.keyword) {\n    node.name = this.type.keyword;\n  } else {\n    this.unexpected();\n  }\n  this.next();\n  return this.finishNode(node, \"Identifier\")\n};\n\n// Parses yield expression inside generator.\n\npp$3.parseYield = function() {\n  if (!this.yieldPos) this.yieldPos = this.start;\n\n  var node = this.startNode();\n  this.next();\n  if (this.type == types.semi || this.canInsertSemicolon() || (this.type != types.star && !this.type.startsExpr)) {\n    node.delegate = false;\n    node.argument = null;\n  } else {\n    node.delegate = this.eat(types.star);\n    node.argument = this.parseMaybeAssign();\n  }\n  return this.finishNode(node, \"YieldExpression\")\n};\n\npp$3.parseAwait = function() {\n  if (!this.awaitPos) this.awaitPos = this.start;\n\n  var node = this.startNode();\n  this.next();\n  node.argument = this.parseMaybeUnary(null, true);\n  return this.finishNode(node, \"AwaitExpression\")\n};\n\nvar pp$4 = Parser.prototype;\n\n// This function is used to raise exceptions on parse errors. It\n// takes an offset integer (into the current `input`) to indicate\n// the location of the error, attaches the position to the end\n// of the error message, and then raises a `SyntaxError` with that\n// message.\n\npp$4.raise = function(pos, message) {\n  var loc = getLineInfo(this.input, pos);\n  message += \" (\" + loc.line + \":\" + loc.column + \")\";\n  var err = new SyntaxError(message);\n  err.pos = pos; err.loc = loc; err.raisedAt = this.pos;\n  throw err\n};\n\npp$4.raiseRecoverable = pp$4.raise;\n\npp$4.curPosition = function() {\n  if (this.options.locations) {\n    return new Position(this.curLine, this.pos - this.lineStart)\n  }\n};\n\nvar Node = function Node(parser, pos, loc) {\n  this.type = \"\";\n  this.start = pos;\n  this.end = 0;\n  if (parser.options.locations)\n    this.loc = new SourceLocation(parser, loc);\n  if (parser.options.directSourceFile)\n    this.sourceFile = parser.options.directSourceFile;\n  if (parser.options.ranges)\n    this.range = [pos, 0];\n};\n\n// Start an AST node, attaching a start offset.\n\nvar pp$5 = Parser.prototype;\n\npp$5.startNode = function() {\n  return new Node(this, this.start, this.startLoc)\n};\n\npp$5.startNodeAt = function(pos, loc) {\n  return new Node(this, pos, loc)\n};\n\n// Finish an AST node, adding `type` and `end` properties.\n\nfunction finishNodeAt(node, type, pos, loc) {\n  node.type = type;\n  node.end = pos;\n  if (this.options.locations)\n    node.loc.end = loc;\n  if (this.options.ranges)\n    node.range[1] = pos;\n  return node\n}\n\npp$5.finishNode = function(node, type) {\n  return finishNodeAt.call(this, node, type, this.lastTokEnd, this.lastTokEndLoc)\n};\n\n// Finish node at given position\n\npp$5.finishNodeAt = function(node, type, pos, loc) {\n  return finishNodeAt.call(this, node, type, pos, loc)\n};\n\n// The algorithm used to determine whether a regexp can appear at a\n// given point in the program is loosely based on sweet.js' approach.\n// See https://github.com/mozilla/sweet.js/wiki/design\n\nvar TokContext = function TokContext(token, isExpr, preserveSpace, override) {\n  this.token = token;\n  this.isExpr = !!isExpr;\n  this.preserveSpace = !!preserveSpace;\n  this.override = override;\n};\n\nvar types$1 = {\n  b_stat: new TokContext(\"{\", false),\n  b_expr: new TokContext(\"{\", true),\n  b_tmpl: new TokContext(\"${\", true),\n  p_stat: new TokContext(\"(\", false),\n  p_expr: new TokContext(\"(\", true),\n  q_tmpl: new TokContext(\"`\", true, true, function (p) { return p.readTmplToken(); }),\n  f_expr: new TokContext(\"function\", true)\n};\n\nvar pp$6 = Parser.prototype;\n\npp$6.initialContext = function() {\n  return [types$1.b_stat]\n};\n\npp$6.braceIsBlock = function(prevType) {\n  if (prevType === types.colon) {\n    var parent = this.curContext();\n    if (parent === types$1.b_stat || parent === types$1.b_expr)\n      return !parent.isExpr\n  }\n  if (prevType === types._return)\n    return lineBreak.test(this.input.slice(this.lastTokEnd, this.start))\n  if (prevType === types._else || prevType === types.semi || prevType === types.eof || prevType === types.parenR)\n    return true\n  if (prevType == types.braceL)\n    return this.curContext() === types$1.b_stat\n  return !this.exprAllowed\n};\n\npp$6.updateContext = function(prevType) {\n  var update, type = this.type;\n  if (type.keyword && prevType == types.dot)\n    this.exprAllowed = false;\n  else if (update = type.updateContext)\n    update.call(this, prevType);\n  else\n    this.exprAllowed = type.beforeExpr;\n};\n\n// Token-specific context update code\n\ntypes.parenR.updateContext = types.braceR.updateContext = function() {\n  if (this.context.length == 1) {\n    this.exprAllowed = true;\n    return\n  }\n  var out = this.context.pop();\n  if (out === types$1.b_stat && this.curContext() === types$1.f_expr) {\n    this.context.pop();\n    this.exprAllowed = false;\n  } else if (out === types$1.b_tmpl) {\n    this.exprAllowed = true;\n  } else {\n    this.exprAllowed = !out.isExpr;\n  }\n};\n\ntypes.braceL.updateContext = function(prevType) {\n  this.context.push(this.braceIsBlock(prevType) ? types$1.b_stat : types$1.b_expr);\n  this.exprAllowed = true;\n};\n\ntypes.dollarBraceL.updateContext = function() {\n  this.context.push(types$1.b_tmpl);\n  this.exprAllowed = true;\n};\n\ntypes.parenL.updateContext = function(prevType) {\n  var statementParens = prevType === types._if || prevType === types._for || prevType === types._with || prevType === types._while;\n  this.context.push(statementParens ? types$1.p_stat : types$1.p_expr);\n  this.exprAllowed = true;\n};\n\ntypes.incDec.updateContext = function() {\n  // tokExprAllowed stays unchanged\n};\n\ntypes._function.updateContext = function(prevType) {\n  if (prevType.beforeExpr && prevType !== types.semi && prevType !== types._else &&\n      !((prevType === types.colon || prevType === types.braceL) && this.curContext() === types$1.b_stat))\n    this.context.push(types$1.f_expr);\n  this.exprAllowed = false;\n};\n\ntypes.backQuote.updateContext = function() {\n  if (this.curContext() === types$1.q_tmpl)\n    this.context.pop();\n  else\n    this.context.push(types$1.q_tmpl);\n  this.exprAllowed = false;\n};\n\n// Object type used to represent tokens. Note that normally, tokens\n// simply exist as properties on the parser object. This is only\n// used for the onToken callback and the external tokenizer.\n\nvar Token = function Token(p) {\n  this.type = p.type;\n  this.value = p.value;\n  this.start = p.start;\n  this.end = p.end;\n  if (p.options.locations)\n    this.loc = new SourceLocation(p, p.startLoc, p.endLoc);\n  if (p.options.ranges)\n    this.range = [p.start, p.end];\n};\n\n// ## Tokenizer\n\nvar pp$7 = Parser.prototype;\n\n// Are we running under Rhino?\nvar isRhino = typeof Packages == \"object\" && Object.prototype.toString.call(Packages) == \"[object JavaPackage]\";\n\n// Move to the next token\n\npp$7.next = function() {\n  if (this.options.onToken)\n    this.options.onToken(new Token(this));\n\n  this.lastTokEnd = this.end;\n  this.lastTokStart = this.start;\n  this.lastTokEndLoc = this.endLoc;\n  this.lastTokStartLoc = this.startLoc;\n  this.nextToken();\n};\n\npp$7.getToken = function() {\n  this.next();\n  return new Token(this)\n};\n\n// If we're in an ES6 environment, make parsers iterable\nif (typeof Symbol !== \"undefined\")\n  pp$7[Symbol.iterator] = function () {\n    var self = this;\n    return {next: function () {\n      var token = self.getToken();\n      return {\n        done: token.type === types.eof,\n        value: token\n      }\n    }}\n  };\n\n// Toggle strict mode. Re-reads the next number or string to please\n// pedantic tests (`\"use strict\"; 010;` should fail).\n\npp$7.setStrict = function(strict) {\n  var this$1 = this;\n\n  this.strict = strict;\n  if (this.type !== types.num && this.type !== types.string) return\n  this.pos = this.start;\n  if (this.options.locations) {\n    while (this.pos < this.lineStart) {\n      this$1.lineStart = this$1.input.lastIndexOf(\"\\n\", this$1.lineStart - 2) + 1;\n      --this$1.curLine;\n    }\n  }\n  this.nextToken();\n};\n\npp$7.curContext = function() {\n  return this.context[this.context.length - 1]\n};\n\n// Read a single token, updating the parser object's token-related\n// properties.\n\npp$7.nextToken = function() {\n  var curContext = this.curContext();\n  if (!curContext || !curContext.preserveSpace) this.skipSpace();\n\n  this.start = this.pos;\n  if (this.options.locations) this.startLoc = this.curPosition();\n  if (this.pos >= this.input.length) return this.finishToken(types.eof)\n\n  if (curContext.override) return curContext.override(this)\n  else this.readToken(this.fullCharCodeAtPos());\n};\n\npp$7.readToken = function(code) {\n  // Identifier or keyword. '\\uXXXX' sequences are allowed in\n  // identifiers, so '\\' also dispatches to that.\n  if (isIdentifierStart(code, this.options.ecmaVersion >= 6) || code === 92 /* '\\' */)\n    return this.readWord()\n\n  return this.getTokenFromCode(code)\n};\n\npp$7.fullCharCodeAtPos = function() {\n  var code = this.input.charCodeAt(this.pos);\n  if (code <= 0xd7ff || code >= 0xe000) return code\n  var next = this.input.charCodeAt(this.pos + 1);\n  return (code << 10) + next - 0x35fdc00\n};\n\npp$7.skipBlockComment = function() {\n  var this$1 = this;\n\n  var startLoc = this.options.onComment && this.curPosition();\n  var start = this.pos, end = this.input.indexOf(\"*/\", this.pos += 2);\n  if (end === -1) this.raise(this.pos - 2, \"Unterminated comment\");\n  this.pos = end + 2;\n  if (this.options.locations) {\n    lineBreakG.lastIndex = start;\n    var match;\n    while ((match = lineBreakG.exec(this.input)) && match.index < this.pos) {\n      ++this$1.curLine;\n      this$1.lineStart = match.index + match[0].length;\n    }\n  }\n  if (this.options.onComment)\n    this.options.onComment(true, this.input.slice(start + 2, end), start, this.pos,\n                           startLoc, this.curPosition());\n};\n\npp$7.skipLineComment = function(startSkip) {\n  var this$1 = this;\n\n  var start = this.pos;\n  var startLoc = this.options.onComment && this.curPosition();\n  var ch = this.input.charCodeAt(this.pos+=startSkip);\n  while (this.pos < this.input.length && ch !== 10 && ch !== 13 && ch !== 8232 && ch !== 8233) {\n    ++this$1.pos;\n    ch = this$1.input.charCodeAt(this$1.pos);\n  }\n  if (this.options.onComment)\n    this.options.onComment(false, this.input.slice(start + startSkip, this.pos), start, this.pos,\n                           startLoc, this.curPosition());\n};\n\n// Called at the start of the parse and after every token. Skips\n// whitespace and comments, and.\n\npp$7.skipSpace = function() {\n  var this$1 = this;\n\n  loop: while (this.pos < this.input.length) {\n    var ch = this$1.input.charCodeAt(this$1.pos);\n    switch (ch) {\n      case 32: case 160: // ' '\n        ++this$1.pos;\n        break\n      case 13:\n        if (this$1.input.charCodeAt(this$1.pos + 1) === 10) {\n          ++this$1.pos;\n        }\n      case 10: case 8232: case 8233:\n        ++this$1.pos;\n        if (this$1.options.locations) {\n          ++this$1.curLine;\n          this$1.lineStart = this$1.pos;\n        }\n        break\n      case 47: // '/'\n        switch (this$1.input.charCodeAt(this$1.pos + 1)) {\n          case 42: // '*'\n            this$1.skipBlockComment();\n            break\n          case 47:\n            this$1.skipLineComment(2);\n            break\n          default:\n            break loop\n        }\n        break\n      default:\n        if (ch > 8 && ch < 14 || ch >= 5760 && nonASCIIwhitespace.test(String.fromCharCode(ch))) {\n          ++this$1.pos;\n        } else {\n          break loop\n        }\n    }\n  }\n};\n\n// Called at the end of every token. Sets `end`, `val`, and\n// maintains `context` and `exprAllowed`, and skips the space after\n// the token, so that the next one's `start` will point at the\n// right position.\n\npp$7.finishToken = function(type, val) {\n  this.end = this.pos;\n  if (this.options.locations) this.endLoc = this.curPosition();\n  var prevType = this.type;\n  this.type = type;\n  this.value = val;\n\n  this.updateContext(prevType);\n};\n\n// ### Token reading\n\n// This is the function that is called to fetch the next token. It\n// is somewhat obscure, because it works in character codes rather\n// than characters, and because operator parsing has been inlined\n// into it.\n//\n// All in the name of speed.\n//\npp$7.readToken_dot = function() {\n  var next = this.input.charCodeAt(this.pos + 1);\n  if (next >= 48 && next <= 57) return this.readNumber(true)\n  var next2 = this.input.charCodeAt(this.pos + 2);\n  if (this.options.ecmaVersion >= 6 && next === 46 && next2 === 46) { // 46 = dot '.'\n    this.pos += 3;\n    return this.finishToken(types.ellipsis)\n  } else {\n    ++this.pos;\n    return this.finishToken(types.dot)\n  }\n};\n\npp$7.readToken_slash = function() { // '/'\n  var next = this.input.charCodeAt(this.pos + 1);\n  if (this.exprAllowed) {++this.pos; return this.readRegexp()}\n  if (next === 61) return this.finishOp(types.assign, 2)\n  return this.finishOp(types.slash, 1)\n};\n\npp$7.readToken_mult_modulo_exp = function(code) { // '%*'\n  var next = this.input.charCodeAt(this.pos + 1);\n  var size = 1;\n  var tokentype = code === 42 ? types.star : types.modulo;\n\n  // exponentiation operator ** and **=\n  if (this.options.ecmaVersion >= 7 && next === 42) {\n    ++size;\n    tokentype = types.starstar;\n    next = this.input.charCodeAt(this.pos + 2);\n  }\n\n  if (next === 61) return this.finishOp(types.assign, size + 1)\n  return this.finishOp(tokentype, size)\n};\n\npp$7.readToken_pipe_amp = function(code) { // '|&'\n  var next = this.input.charCodeAt(this.pos + 1);\n  if (next === code) return this.finishOp(code === 124 ? types.logicalOR : types.logicalAND, 2)\n  if (next === 61) return this.finishOp(types.assign, 2)\n  return this.finishOp(code === 124 ? types.bitwiseOR : types.bitwiseAND, 1)\n};\n\npp$7.readToken_caret = function() { // '^'\n  var next = this.input.charCodeAt(this.pos + 1);\n  if (next === 61) return this.finishOp(types.assign, 2)\n  return this.finishOp(types.bitwiseXOR, 1)\n};\n\npp$7.readToken_plus_min = function(code) { // '+-'\n  var next = this.input.charCodeAt(this.pos + 1);\n  if (next === code) {\n    if (next == 45 && this.input.charCodeAt(this.pos + 2) == 62 &&\n        lineBreak.test(this.input.slice(this.lastTokEnd, this.pos))) {\n      // A `-->` line comment\n      this.skipLineComment(3);\n      this.skipSpace();\n      return this.nextToken()\n    }\n    return this.finishOp(types.incDec, 2)\n  }\n  if (next === 61) return this.finishOp(types.assign, 2)\n  return this.finishOp(types.plusMin, 1)\n};\n\npp$7.readToken_lt_gt = function(code) { // '<>'\n  var next = this.input.charCodeAt(this.pos + 1);\n  var size = 1;\n  if (next === code) {\n    size = code === 62 && this.input.charCodeAt(this.pos + 2) === 62 ? 3 : 2;\n    if (this.input.charCodeAt(this.pos + size) === 61) return this.finishOp(types.assign, size + 1)\n    return this.finishOp(types.bitShift, size)\n  }\n  if (next == 33 && code == 60 && this.input.charCodeAt(this.pos + 2) == 45 &&\n      this.input.charCodeAt(this.pos + 3) == 45) {\n    if (this.inModule) this.unexpected();\n    // `<!--`, an XML-style comment that should be interpreted as a line comment\n    this.skipLineComment(4);\n    this.skipSpace();\n    return this.nextToken()\n  }\n  if (next === 61) size = 2;\n  return this.finishOp(types.relational, size)\n};\n\npp$7.readToken_eq_excl = function(code) { // '=!'\n  var next = this.input.charCodeAt(this.pos + 1);\n  if (next === 61) return this.finishOp(types.equality, this.input.charCodeAt(this.pos + 2) === 61 ? 3 : 2)\n  if (code === 61 && next === 62 && this.options.ecmaVersion >= 6) { // '=>'\n    this.pos += 2;\n    return this.finishToken(types.arrow)\n  }\n  return this.finishOp(code === 61 ? types.eq : types.prefix, 1)\n};\n\npp$7.getTokenFromCode = function(code) {\n  switch (code) {\n    // The interpretation of a dot depends on whether it is followed\n    // by a digit or another two dots.\n  case 46: // '.'\n    return this.readToken_dot()\n\n    // Punctuation tokens.\n  case 40: ++this.pos; return this.finishToken(types.parenL)\n  case 41: ++this.pos; return this.finishToken(types.parenR)\n  case 59: ++this.pos; return this.finishToken(types.semi)\n  case 44: ++this.pos; return this.finishToken(types.comma)\n  case 91: ++this.pos; return this.finishToken(types.bracketL)\n  case 93: ++this.pos; return this.finishToken(types.bracketR)\n  case 123: ++this.pos; return this.finishToken(types.braceL)\n  case 125: ++this.pos; return this.finishToken(types.braceR)\n  case 58: ++this.pos; return this.finishToken(types.colon)\n  case 63: ++this.pos; return this.finishToken(types.question)\n\n  case 96: // '`'\n    if (this.options.ecmaVersion < 6) break\n    ++this.pos;\n    return this.finishToken(types.backQuote)\n\n  case 48: // '0'\n    var next = this.input.charCodeAt(this.pos + 1);\n    if (next === 120 || next === 88) return this.readRadixNumber(16) // '0x', '0X' - hex number\n    if (this.options.ecmaVersion >= 6) {\n      if (next === 111 || next === 79) return this.readRadixNumber(8) // '0o', '0O' - octal number\n      if (next === 98 || next === 66) return this.readRadixNumber(2) // '0b', '0B' - binary number\n    }\n    // Anything else beginning with a digit is an integer, octal\n    // number, or float.\n  case 49: case 50: case 51: case 52: case 53: case 54: case 55: case 56: case 57: // 1-9\n    return this.readNumber(false)\n\n    // Quotes produce strings.\n  case 34: case 39: // '\"', \"'\"\n    return this.readString(code)\n\n    // Operators are parsed inline in tiny state machines. '=' (61) is\n    // often referred to. `finishOp` simply skips the amount of\n    // characters it is given as second argument, and returns a token\n    // of the type given by its first argument.\n\n  case 47: // '/'\n    return this.readToken_slash()\n\n  case 37: case 42: // '%*'\n    return this.readToken_mult_modulo_exp(code)\n\n  case 124: case 38: // '|&'\n    return this.readToken_pipe_amp(code)\n\n  case 94: // '^'\n    return this.readToken_caret()\n\n  case 43: case 45: // '+-'\n    return this.readToken_plus_min(code)\n\n  case 60: case 62: // '<>'\n    return this.readToken_lt_gt(code)\n\n  case 61: case 33: // '=!'\n    return this.readToken_eq_excl(code)\n\n  case 126: // '~'\n    return this.finishOp(types.prefix, 1)\n  }\n\n  this.raise(this.pos, \"Unexpected character '\" + codePointToString(code) + \"'\");\n};\n\npp$7.finishOp = function(type, size) {\n  var str = this.input.slice(this.pos, this.pos + size);\n  this.pos += size;\n  return this.finishToken(type, str)\n};\n\n// Parse a regular expression. Some context-awareness is necessary,\n// since a '/' inside a '[]' set does not end the expression.\n\nfunction tryCreateRegexp(src, flags, throwErrorAt, parser) {\n  try {\n    return new RegExp(src, flags)\n  } catch (e) {\n    if (throwErrorAt !== undefined) {\n      if (e instanceof SyntaxError) parser.raise(throwErrorAt, \"Error parsing regular expression: \" + e.message);\n      throw e\n    }\n  }\n}\n\nvar regexpUnicodeSupport = !!tryCreateRegexp(\"\\uffff\", \"u\");\n\npp$7.readRegexp = function() {\n  var this$1 = this;\n\n  var escaped, inClass, start = this.pos;\n  for (;;) {\n    if (this$1.pos >= this$1.input.length) this$1.raise(start, \"Unterminated regular expression\");\n    var ch = this$1.input.charAt(this$1.pos);\n    if (lineBreak.test(ch)) this$1.raise(start, \"Unterminated regular expression\");\n    if (!escaped) {\n      if (ch === \"[\") inClass = true;\n      else if (ch === \"]\" && inClass) inClass = false;\n      else if (ch === \"/\" && !inClass) break\n      escaped = ch === \"\\\\\";\n    } else escaped = false;\n    ++this$1.pos;\n  }\n  var content = this.input.slice(start, this.pos);\n  ++this.pos;\n  // Need to use `readWord1` because '\\uXXXX' sequences are allowed\n  // here (don't ask).\n  var mods = this.readWord1();\n  var tmp = content, tmpFlags = \"\";\n  if (mods) {\n    var validFlags = /^[gim]*$/;\n    if (this.options.ecmaVersion >= 6) validFlags = /^[gimuy]*$/;\n    if (!validFlags.test(mods)) this.raise(start, \"Invalid regular expression flag\");\n    if (mods.indexOf(\"u\") >= 0) {\n      if (regexpUnicodeSupport) {\n        tmpFlags = \"u\";\n      } else {\n        // Replace each astral symbol and every Unicode escape sequence that\n        // possibly represents an astral symbol or a paired surrogate with a\n        // single ASCII symbol to avoid throwing on regular expressions that\n        // are only valid in combination with the `/u` flag.\n        // Note: replacing with the ASCII symbol `x` might cause false\n        // negatives in unlikely scenarios. For example, `[\\u{61}-b]` is a\n        // perfectly valid pattern that is equivalent to `[a-b]`, but it would\n        // be replaced by `[x-b]` which throws an error.\n        tmp = tmp.replace(/\\\\u\\{([0-9a-fA-F]+)\\}/g, function (_match, code, offset) {\n          code = Number(\"0x\" + code);\n          if (code > 0x10FFFF) this$1.raise(start + offset + 3, \"Code point out of bounds\");\n          return \"x\"\n        });\n        tmp = tmp.replace(/\\\\u([a-fA-F0-9]{4})|[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]/g, \"x\");\n        tmpFlags = tmpFlags.replace(\"u\", \"\");\n      }\n    }\n  }\n  // Detect invalid regular expressions.\n  var value = null;\n  // Rhino's regular expression parser is flaky and throws uncatchable exceptions,\n  // so don't do detection if we are running under Rhino\n  if (!isRhino) {\n    tryCreateRegexp(tmp, tmpFlags, start, this);\n    // Get a regular expression object for this pattern-flag pair, or `null` in\n    // case the current environment doesn't support the flags it uses.\n    value = tryCreateRegexp(content, mods);\n  }\n  return this.finishToken(types.regexp, {pattern: content, flags: mods, value: value})\n};\n\n// Read an integer in the given radix. Return null if zero digits\n// were read, the integer value otherwise. When `len` is given, this\n// will return `null` unless the integer has exactly `len` digits.\n\npp$7.readInt = function(radix, len) {\n  var this$1 = this;\n\n  var start = this.pos, total = 0;\n  for (var i = 0, e = len == null ? Infinity : len; i < e; ++i) {\n    var code = this$1.input.charCodeAt(this$1.pos), val;\n    if (code >= 97) val = code - 97 + 10; // a\n    else if (code >= 65) val = code - 65 + 10; // A\n    else if (code >= 48 && code <= 57) val = code - 48; // 0-9\n    else val = Infinity;\n    if (val >= radix) break\n    ++this$1.pos;\n    total = total * radix + val;\n  }\n  if (this.pos === start || len != null && this.pos - start !== len) return null\n\n  return total\n};\n\npp$7.readRadixNumber = function(radix) {\n  this.pos += 2; // 0x\n  var val = this.readInt(radix);\n  if (val == null) this.raise(this.start + 2, \"Expected number in radix \" + radix);\n  if (isIdentifierStart(this.fullCharCodeAtPos())) this.raise(this.pos, \"Identifier directly after number\");\n  return this.finishToken(types.num, val)\n};\n\n// Read an integer, octal integer, or floating-point number.\n\npp$7.readNumber = function(startsWithDot) {\n  var start = this.pos, isFloat = false, octal = this.input.charCodeAt(this.pos) === 48;\n  if (!startsWithDot && this.readInt(10) === null) this.raise(start, \"Invalid number\");\n  if (octal && this.pos == start + 1) octal = false;\n  var next = this.input.charCodeAt(this.pos);\n  if (next === 46 && !octal) { // '.'\n    ++this.pos;\n    this.readInt(10);\n    isFloat = true;\n    next = this.input.charCodeAt(this.pos);\n  }\n  if ((next === 69 || next === 101) && !octal) { // 'eE'\n    next = this.input.charCodeAt(++this.pos);\n    if (next === 43 || next === 45) ++this.pos; // '+-'\n    if (this.readInt(10) === null) this.raise(start, \"Invalid number\");\n    isFloat = true;\n  }\n  if (isIdentifierStart(this.fullCharCodeAtPos())) this.raise(this.pos, \"Identifier directly after number\");\n\n  var str = this.input.slice(start, this.pos), val;\n  if (isFloat) val = parseFloat(str);\n  else if (!octal || str.length === 1) val = parseInt(str, 10);\n  else if (/[89]/.test(str) || this.strict) this.raise(start, \"Invalid number\");\n  else val = parseInt(str, 8);\n  return this.finishToken(types.num, val)\n};\n\n// Read a string value, interpreting backslash-escapes.\n\npp$7.readCodePoint = function() {\n  var ch = this.input.charCodeAt(this.pos), code;\n\n  if (ch === 123) {\n    if (this.options.ecmaVersion < 6) this.unexpected();\n    var codePos = ++this.pos;\n    code = this.readHexChar(this.input.indexOf('}', this.pos) - this.pos);\n    ++this.pos;\n    if (code > 0x10FFFF) this.raise(codePos, \"Code point out of bounds\");\n  } else {\n    code = this.readHexChar(4);\n  }\n  return code\n};\n\nfunction codePointToString(code) {\n  // UTF-16 Decoding\n  if (code <= 0xFFFF) return String.fromCharCode(code)\n  code -= 0x10000;\n  return String.fromCharCode((code >> 10) + 0xD800, (code & 1023) + 0xDC00)\n}\n\npp$7.readString = function(quote) {\n  var this$1 = this;\n\n  var out = \"\", chunkStart = ++this.pos;\n  for (;;) {\n    if (this$1.pos >= this$1.input.length) this$1.raise(this$1.start, \"Unterminated string constant\");\n    var ch = this$1.input.charCodeAt(this$1.pos);\n    if (ch === quote) break\n    if (ch === 92) { // '\\'\n      out += this$1.input.slice(chunkStart, this$1.pos);\n      out += this$1.readEscapedChar(false);\n      chunkStart = this$1.pos;\n    } else {\n      if (isNewLine(ch)) this$1.raise(this$1.start, \"Unterminated string constant\");\n      ++this$1.pos;\n    }\n  }\n  out += this.input.slice(chunkStart, this.pos++);\n  return this.finishToken(types.string, out)\n};\n\n// Reads template string tokens.\n\npp$7.readTmplToken = function() {\n  var this$1 = this;\n\n  var out = \"\", chunkStart = this.pos;\n  for (;;) {\n    if (this$1.pos >= this$1.input.length) this$1.raise(this$1.start, \"Unterminated template\");\n    var ch = this$1.input.charCodeAt(this$1.pos);\n    if (ch === 96 || ch === 36 && this$1.input.charCodeAt(this$1.pos + 1) === 123) { // '`', '${'\n      if (this$1.pos === this$1.start && this$1.type === types.template) {\n        if (ch === 36) {\n          this$1.pos += 2;\n          return this$1.finishToken(types.dollarBraceL)\n        } else {\n          ++this$1.pos;\n          return this$1.finishToken(types.backQuote)\n        }\n      }\n      out += this$1.input.slice(chunkStart, this$1.pos);\n      return this$1.finishToken(types.template, out)\n    }\n    if (ch === 92) { // '\\'\n      out += this$1.input.slice(chunkStart, this$1.pos);\n      out += this$1.readEscapedChar(true);\n      chunkStart = this$1.pos;\n    } else if (isNewLine(ch)) {\n      out += this$1.input.slice(chunkStart, this$1.pos);\n      ++this$1.pos;\n      switch (ch) {\n        case 13:\n          if (this$1.input.charCodeAt(this$1.pos) === 10) ++this$1.pos;\n        case 10:\n          out += \"\\n\";\n          break\n        default:\n          out += String.fromCharCode(ch);\n          break\n      }\n      if (this$1.options.locations) {\n        ++this$1.curLine;\n        this$1.lineStart = this$1.pos;\n      }\n      chunkStart = this$1.pos;\n    } else {\n      ++this$1.pos;\n    }\n  }\n};\n\n// Used to read escaped characters\n\npp$7.readEscapedChar = function(inTemplate) {\n  var ch = this.input.charCodeAt(++this.pos);\n  ++this.pos;\n  switch (ch) {\n  case 110: return \"\\n\" // 'n' -> '\\n'\n  case 114: return \"\\r\" // 'r' -> '\\r'\n  case 120: return String.fromCharCode(this.readHexChar(2)) // 'x'\n  case 117: return codePointToString(this.readCodePoint()) // 'u'\n  case 116: return \"\\t\" // 't' -> '\\t'\n  case 98: return \"\\b\" // 'b' -> '\\b'\n  case 118: return \"\\u000b\" // 'v' -> '\\u000b'\n  case 102: return \"\\f\" // 'f' -> '\\f'\n  case 13: if (this.input.charCodeAt(this.pos) === 10) ++this.pos; // '\\r\\n'\n  case 10: // ' \\n'\n    if (this.options.locations) { this.lineStart = this.pos; ++this.curLine; }\n    return \"\"\n  default:\n    if (ch >= 48 && ch <= 55) {\n      var octalStr = this.input.substr(this.pos - 1, 3).match(/^[0-7]+/)[0];\n      var octal = parseInt(octalStr, 8);\n      if (octal > 255) {\n        octalStr = octalStr.slice(0, -1);\n        octal = parseInt(octalStr, 8);\n      }\n      if (octalStr !== \"0\" && (this.strict || inTemplate)) {\n        this.raise(this.pos - 2, \"Octal literal in strict mode\");\n      }\n      this.pos += octalStr.length - 1;\n      return String.fromCharCode(octal)\n    }\n    return String.fromCharCode(ch)\n  }\n};\n\n// Used to read character escape sequences ('\\x', '\\u', '\\U').\n\npp$7.readHexChar = function(len) {\n  var codePos = this.pos;\n  var n = this.readInt(16, len);\n  if (n === null) this.raise(codePos, \"Bad character escape sequence\");\n  return n\n};\n\n// Read an identifier, and return it as a string. Sets `this.containsEsc`\n// to whether the word contained a '\\u' escape.\n//\n// Incrementally adds only escaped chars, adding other chunks as-is\n// as a micro-optimization.\n\npp$7.readWord1 = function() {\n  var this$1 = this;\n\n  this.containsEsc = false;\n  var word = \"\", first = true, chunkStart = this.pos;\n  var astral = this.options.ecmaVersion >= 6;\n  while (this.pos < this.input.length) {\n    var ch = this$1.fullCharCodeAtPos();\n    if (isIdentifierChar(ch, astral)) {\n      this$1.pos += ch <= 0xffff ? 1 : 2;\n    } else if (ch === 92) { // \"\\\"\n      this$1.containsEsc = true;\n      word += this$1.input.slice(chunkStart, this$1.pos);\n      var escStart = this$1.pos;\n      if (this$1.input.charCodeAt(++this$1.pos) != 117) // \"u\"\n        this$1.raise(this$1.pos, \"Expecting Unicode escape sequence \\\\uXXXX\");\n      ++this$1.pos;\n      var esc = this$1.readCodePoint();\n      if (!(first ? isIdentifierStart : isIdentifierChar)(esc, astral))\n        this$1.raise(escStart, \"Invalid Unicode escape\");\n      word += codePointToString(esc);\n      chunkStart = this$1.pos;\n    } else {\n      break\n    }\n    first = false;\n  }\n  return word + this.input.slice(chunkStart, this.pos)\n};\n\n// Read an identifier or keyword token. Will check for reserved\n// words when necessary.\n\npp$7.readWord = function() {\n  var word = this.readWord1();\n  var type = types.name;\n  if ((this.options.ecmaVersion >= 6 || !this.containsEsc) && this.keywords.test(word))\n    type = keywords$1[word];\n  return this.finishToken(type, word)\n};\n\n// Acorn is a tiny, fast JavaScript parser written in JavaScript.\n//\n// Acorn was written by Marijn Haverbeke, Ingvar Stepanyan, and\n// various contributors and released under an MIT license.\n//\n// Git repositories for Acorn are available at\n//\n//     http://marijnhaverbeke.nl/git/acorn\n//     https://github.com/ternjs/acorn.git\n//\n// Please use the [github bug tracker][ghbt] to report issues.\n//\n// [ghbt]: https://github.com/ternjs/acorn/issues\n//\n// This file defines the main parser interface. The library also comes\n// with a [error-tolerant parser][dammit] and an\n// [abstract syntax tree walker][walk], defined in other files.\n//\n// [dammit]: acorn_loose.js\n// [walk]: util/walk.js\n\n\n\n// The main exported interface (under `self.acorn` when in the\n// browser) is a `parse` function that takes a code string and\n// returns an abstract syntax tree as specified by [Mozilla parser\n// API][api].\n//\n// [api]: https://developer.mozilla.org/en-US/docs/SpiderMonkey/Parser_API\n\nfunction parse(input, options) {\n  return new Parser(options, input).parse()\n}\n\n// This function tries to parse a single expression at a given\n// offset in a string. Useful for parsing mixed-language formats\n// that embed JavaScript expressions.\n\n\n\n// Acorn is organized as a tokenizer and a recursive-descent parser.\n// The `tokenizer` export provides an interface to the tokenizer.\n\n\n\n// This is a terrible kludge to support the existing, pre-ES6\n// interface where the loose parser module retroactively adds exports\n// to this module.\n\nfunction getLocator$1 ( source, options ) {\n\tif ( options === void 0 ) options = {};\n\n\tvar offsetLine = options.offsetLine || 0;\n\tvar offsetColumn = options.offsetColumn || 0;\n\n\tvar originalLines = source.split( '\\n' );\n\n\tvar start = 0;\n\tvar lineRanges = originalLines.map( function ( line, i ) {\n\t\tvar end = start + line.length + 1;\n\t\tvar range = { start: start, end: end, line: i };\n\n\t\tstart = end;\n\t\treturn range;\n\t});\n\n\tvar i = 0;\n\n\tfunction rangeContains ( range, index ) {\n\t\treturn range.start <= index && index < range.end;\n\t}\n\n\tfunction getLocation ( range, index ) {\n\t\treturn { line: offsetLine + range.line, column: offsetColumn + index - range.start, character: index };\n\t}\n\n\treturn function locate ( search, startIndex ) {\n\t\tif ( typeof search === 'string' ) {\n\t\t\tsearch = source.indexOf( search, startIndex || 0 );\n\t\t}\n\n\t\tvar range = lineRanges[i];\n\n\t\tvar d = search >= range.end ? 1 : -1;\n\n\t\twhile ( range ) {\n\t\t\tif ( rangeContains( range, search ) ) return getLocation( range, search );\n\n\t\t\ti += d;\n\t\t\trange = lineRanges[i];\n\t\t}\n\t};\n}\n\nfunction locate ( source, search, options ) {\n\tif ( typeof options === 'number' ) {\n\t\tthrow new Error( 'locate takes a { startIndex, offsetLine, offsetColumn } object as the third argument' );\n\t}\n\n\treturn getLocator$1( source, options )( search, options && options.startIndex );\n}\n\nvar reservedWords$1 = 'break case class catch const continue debugger default delete do else export extends finally for function if import in instanceof let new return super switch this throw try typeof var void while with yield enum await implements package protected static interface private public'.split( ' ' );\nvar builtins = 'Infinity NaN undefined null true false eval uneval isFinite isNaN parseFloat parseInt decodeURI decodeURIComponent encodeURI encodeURIComponent escape unescape Object Function Boolean Symbol Error EvalError InternalError RangeError ReferenceError SyntaxError TypeError URIError Number Math Date String RegExp Array Int8Array Uint8Array Uint8ClampedArray Int16Array Uint16Array Int32Array Uint32Array Float32Array Float64Array Map Set WeakMap WeakSet SIMD ArrayBuffer DataView JSON Promise Generator GeneratorFunction Reflect Proxy Intl'.split( ' ' );\n\nvar blacklisted = blank();\nreservedWords$1.concat( builtins ).forEach( function (word) { return blacklisted[ word ] = true; } );\n\n\nfunction makeLegalIdentifier ( str ) {\n\tstr = str\n\t\t.replace( /-(\\w)/g, function ( _, letter ) { return letter.toUpperCase(); } )\n\t\t.replace( /[^$_a-zA-Z0-9]/g, '_' );\n\n\tif ( /\\d/.test( str[0] ) || blacklisted[ str ] ) str = \"_\" + str;\n\n\treturn str;\n}\n\nfunction spaces ( i ) {\n\tvar result = '';\n\twhile ( i-- ) result += ' ';\n\treturn result;\n}\n\n\nfunction tabsToSpaces ( str ) {\n\treturn str.replace( /^\\t+/, function (match) { return match.split( '\\t' ).join( '  ' ); } );\n}\n\nfunction getCodeFrame ( source, line, column ) {\n\tvar lines = source.split( '\\n' );\n\n\tvar frameStart = Math.max( 0, line - 3 );\n\tvar frameEnd = Math.min( line + 2, lines.length );\n\n\tlines = lines.slice( frameStart, frameEnd );\n\twhile ( !/\\S/.test( lines[ lines.length - 1 ] ) ) {\n\t\tlines.pop();\n\t\tframeEnd -= 1;\n\t}\n\n\tvar digits = String( frameEnd ).length;\n\n\treturn lines\n\t\t.map( function ( str, i ) {\n\t\t\tvar isErrorLine = frameStart + i + 1 === line;\n\n\t\t\tvar lineNum = String( i + frameStart + 1 );\n\t\t\twhile ( lineNum.length < digits ) lineNum = \" \" + lineNum;\n\n\t\t\tif ( isErrorLine ) {\n\t\t\t\tvar indicator = spaces( digits + 2 + tabsToSpaces( str.slice( 0, column ) ).length ) + '^';\n\t\t\t\treturn (lineNum + \": \" + (tabsToSpaces( str )) + \"\\n\" + indicator);\n\t\t\t}\n\n\t\t\treturn (lineNum + \": \" + (tabsToSpaces( str )));\n\t\t})\n\t\t.join( '\\n' );\n}\n\nfunction relativeId ( id ) {\n\tif ( typeof process === 'undefined' || !isAbsolute( id ) ) return id;\n\treturn path.relative( process.cwd(), id );\n}\n\n// properties are for debugging purposes only\nvar ARRAY    = { ARRAY:    true, toString: function () { return '[[ARRAY]]'; } };\n\n\nvar NUMBER   = { NUMBER:   true, toString: function () { return '[[NUMBER]]'; } };\nvar OBJECT   = { OBJECT:   true, toString: function () { return '[[OBJECT]]'; } };\nvar STRING   = { STRING:   true, toString: function () { return '[[STRING]]'; } };\nvar UNKNOWN  = { UNKNOWN:  true, toString: function () { return '[[UNKNOWN]]'; } };\n\nvar Declaration = function Declaration ( node, isParam ) {\n\tthis.node = node;\n\n\tthis.name = node.id ? node.id.name : node.name;\n\tthis.exportName = null;\n\tthis.isParam = isParam;\n\n\tthis.isReassigned = false;\n};\n\nDeclaration.prototype.activate = function activate () {\n\tif ( this.activated ) return;\n\tthis.activated = true;\n\n\tif ( this.isParam ) return;\n\tthis.node.activate();\n};\n\nDeclaration.prototype.addReference = function addReference ( reference ) {\n\treference.declaration = this;\n\n\tif ( reference.name !== this.name ) {\n\t\tthis.name = makeLegalIdentifier( reference.name ); // TODO handle differences of opinion\n\t}\n\n\tif ( reference.isReassignment ) this.isReassigned = true;\n};\n\nDeclaration.prototype.render = function render ( es ) {\n\tif ( es ) return this.name;\n\tif ( !this.isReassigned || !this.exportName ) return this.name;\n\n\treturn (\"exports.\" + (this.exportName));\n};\n\nvar SyntheticNamespaceDeclaration = function SyntheticNamespaceDeclaration ( module ) {\n\tvar this$1 = this;\n\n\tthis.isNamespace = true;\n\tthis.module = module;\n\tthis.name = module.basename();\n\n\tthis.needsNamespaceBlock = false;\n\n\tthis.originals = blank();\n\tmodule.getExports().forEach( function (name) {\n\t\tthis$1.originals[ name ] = module.traceExport( name );\n\t});\n};\n\nSyntheticNamespaceDeclaration.prototype.activate = function activate () {\n\tthis.needsNamespaceBlock = true;\n\n\t// add synthetic references, in case of chained\n\t// namespace imports\n\tforOwn( this.originals, function (original) {\n\t\toriginal.activate();\n\t});\n};\n\nSyntheticNamespaceDeclaration.prototype.addReference = function addReference ( node ) {\n\tthis.name = node.name;\n};\n\nSyntheticNamespaceDeclaration.prototype.gatherPossibleValues = function gatherPossibleValues ( values ) {\n\tvalues.add( UNKNOWN );\n};\n\nSyntheticNamespaceDeclaration.prototype.getName = function getName () {\n\treturn this.name;\n};\n\nSyntheticNamespaceDeclaration.prototype.renderBlock = function renderBlock ( es, legacy, indentString ) {\n\t\tvar this$1 = this;\n\n\tvar members = keys( this.originals ).map( function (name) {\n\t\tvar original = this$1.originals[ name ];\n\n\t\tif ( original.isReassigned && !legacy ) {\n\t\t\treturn (indentString + \"get \" + name + \" () { return \" + (original.getName( es )) + \"; }\");\n\t\t}\n\n\t\tif ( legacy && ~reservedWords$1.indexOf( name ) ) name = \"'\" + name + \"'\";\n\t\treturn (\"\" + indentString + name + \": \" + (original.getName( es )));\n\t});\n\n\tvar callee = legacy ? \"(Object.freeze || Object)\" : \"Object.freeze\";\n\treturn ((this.module.bundle.varOrConst) + \" \" + (this.getName( es )) + \" = \" + callee + \"({\\n\" + (members.join( ',\\n' )) + \"\\n});\\n\\n\");\n};\n\nvar ExternalDeclaration = function ExternalDeclaration ( module, name ) {\n\tthis.module = module;\n\tthis.name = name;\n\tthis.safeName = null;\n\tthis.isExternal = true;\n\n\tthis.activated = false;\n\n\tthis.isNamespace = name === '*';\n};\n\nExternalDeclaration.prototype.activate = function activate () {\n\tthis.activated = true;\n};\n\nExternalDeclaration.prototype.addReference = function addReference ( reference ) {\n\treference.declaration = this;\n\n\tif ( this.name === 'default' || this.name === '*' ) {\n\t\tthis.module.suggestName( reference.name );\n\t}\n};\n\nExternalDeclaration.prototype.gatherPossibleValues = function gatherPossibleValues ( values ) {\n\tvalues.add( UNKNOWN );\n};\n\nExternalDeclaration.prototype.getName = function getName ( es ) {\n\tif ( this.name === '*' ) {\n\t\treturn this.module.name;\n\t}\n\n\tif ( this.name === 'default' ) {\n\t\treturn this.module.exportsNamespace || ( !es && this.module.exportsNames ) ?\n\t\t\t((this.module.name) + \"__default\") :\n\t\t\tthis.module.name;\n\t}\n\n\treturn es ? this.safeName : ((this.module.name) + \".\" + (this.name));\n};\n\nExternalDeclaration.prototype.setSafeName = function setSafeName ( name ) {\n\tthis.safeName = name;\n};\n\nfunction extractNames ( param ) {\n\tvar names = [];\n\textractors[ param.type ]( names, param );\n\treturn names;\n}\n\nvar extractors = {\n\tIdentifier: function Identifier ( names, param ) {\n\t\tnames.push( param.name );\n\t},\n\n\tObjectPattern: function ObjectPattern ( names, param ) {\n\t\tparam.properties.forEach( function (prop) {\n\t\t\textractors[ prop.value.type ]( names, prop.value );\n\t\t});\n\t},\n\n\tArrayPattern: function ArrayPattern ( names, param ) {\n\t\tparam.elements.forEach( function (element) {\n\t\t\tif ( element ) extractors[ element.type ]( names, element );\n\t\t});\n\t},\n\n\tRestElement: function RestElement ( names, param ) {\n\t\textractors[ param.argument.type ]( names, param.argument );\n\t},\n\n\tAssignmentPattern: function AssignmentPattern ( names, param ) {\n\t\textractors[ param.left.type ]( names, param.left );\n\t}\n};\n\nvar Node$1 = function Node () {};\n\nNode$1.prototype.bind = function bind ( scope ) {\n\t\tvar this$1 = this;\n\n\tthis.eachChild( function (child) { return child.bind( this$1.scope || scope ); } );\n};\n\nNode$1.prototype.eachChild = function eachChild ( callback ) {\n\t\tvar this$1 = this;\n\n\tfor ( var key of this.keys ) {\n\t\tif ( this$1.shorthand && key === 'key' ) continue; // key and value are the same\n\n\t\tvar value = this$1[ key ];\n\n\t\tif ( value ) {\n\t\t\tif ( 'length' in value ) {\n\t\t\t\tfor ( var child of value ) {\n\t\t\t\t\tif ( child ) callback( child );\n\t\t\t\t}\n\t\t\t} else if ( value ) {\n\t\t\t\tcallback( value );\n\t\t\t}\n\t\t}\n\t}\n};\n\nNode$1.prototype.findParent = function findParent ( selector ) {\n\treturn selector.test( this.type ) ? this : this.parent.findParent( selector );\n};\n\n// TODO abolish findScope. if a node needs to store scope, store it\nNode$1.prototype.findScope = function findScope ( functionScope ) {\n\treturn this.parent.findScope( functionScope );\n};\n\nNode$1.prototype.gatherPossibleValues = function gatherPossibleValues ( values ) {\n\t//this.eachChild( child => child.gatherPossibleValues( values ) );\n\tvalues.add( UNKNOWN );\n};\n\nNode$1.prototype.getValue = function getValue () {\n\treturn UNKNOWN;\n};\n\nNode$1.prototype.hasEffects = function hasEffects ( scope ) {\n\t\tvar this$1 = this;\n\n\tif ( this.scope ) scope = this.scope;\n\n\tfor ( var key of this.keys ) {\n\t\tvar value = this$1[ key ];\n\n\t\tif ( value ) {\n\t\t\tif ( 'length' in value ) {\n\t\t\t\tfor ( var child of value ) {\n\t\t\t\t\tif ( child && child.hasEffects( scope ) ) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else if ( value && value.hasEffects( scope ) ) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n};\n\nNode$1.prototype.initialise = function initialise ( scope ) {\n\t\tvar this$1 = this;\n\n\tthis.eachChild( function (child) { return child.initialise( this$1.scope || scope ); } );\n};\n\nNode$1.prototype.insertSemicolon = function insertSemicolon ( code ) {\n\tif ( code.original[ this.end - 1 ] !== ';' ) {\n\t\tcode.insertLeft( this.end, ';' );\n\t}\n};\n\nNode$1.prototype.locate = function locate$1 () {\n\t// useful for debugging\n\tvar location = locate( this.module.code, this.start, { offsetLine: 1 });\n\tlocation.file = this.module.id;\n\tlocation.toString = function () { return JSON.stringify( location ); };\n\n\treturn location;\n};\n\nNode$1.prototype.render = function render ( code, es ) {\n\tthis.eachChild( function (child) { return child.render( code, es ); } );\n};\n\nNode$1.prototype.run = function run ( scope ) {\n\t\tvar this$1 = this;\n\n\tif ( this.ran ) return;\n\tthis.ran = true;\n\n\tthis.eachChild( function (child) {\n\t\tchild.run( this$1.scope || scope );\n\t});\n};\n\nNode$1.prototype.toString = function toString () {\n\treturn this.module.code.slice( this.start, this.end );\n};\n\nvar ArrayExpression = (function (Node) {\n\tfunction ArrayExpression () {\n\t\tNode.apply(this, arguments);\n\t}\n\n\tif ( Node ) ArrayExpression.__proto__ = Node;\n\tArrayExpression.prototype = Object.create( Node && Node.prototype );\n\tArrayExpression.prototype.constructor = ArrayExpression;\n\n\tArrayExpression.prototype.gatherPossibleValues = function gatherPossibleValues ( values ) {\n\t\tvalues.add( ARRAY );\n\t};\n\n\treturn ArrayExpression;\n}(Node$1));\n\nvar Parameter = function Parameter ( name ) {\n\tthis.name = name;\n\n\tthis.isParam = true;\n\tthis.activated = true;\n};\n\nParameter.prototype.activate = function activate () {\n\t// noop\n};\n\nParameter.prototype.addReference = function addReference () {\n\t// noop?\n};\n\nParameter.prototype.gatherPossibleValues = function gatherPossibleValues ( values ) {\n\tvalues.add( UNKNOWN ); // TODO populate this at call time\n};\n\nParameter.prototype.getName = function getName () {\n\treturn this.name;\n};\n\nvar Scope = function Scope ( options ) {\n\tif ( options === void 0 ) options = {};\n\n\tthis.parent = options.parent;\n\tthis.isBlockScope = !!options.isBlockScope;\n\tthis.isLexicalBoundary = !!options.isLexicalBoundary;\n\tthis.isModuleScope = !!options.isModuleScope;\n\n\tthis.children = [];\n\tif ( this.parent ) this.parent.children.push( this );\n\n\tthis.declarations = blank();\n\n\tif ( this.isLexicalBoundary && !this.isModuleScope ) {\n\t\tthis.declarations.arguments = new Parameter( 'arguments' );\n\t}\n};\n\nScope.prototype.addDeclaration = function addDeclaration ( name, declaration, isVar, isParam ) {\n\tif ( isVar && this.isBlockScope ) {\n\t\tthis.parent.addDeclaration( name, declaration, isVar, isParam );\n\t} else {\n\t\tvar existingDeclaration = this.declarations[ name ];\n\n\t\tif ( existingDeclaration && existingDeclaration.duplicates ) {\n\t\t\t// TODO warn/throw on duplicates?\n\t\t\texistingDeclaration.duplicates.push( declaration );\n\t\t} else {\n\t\t\tthis.declarations[ name ] = isParam ? new Parameter( name ) : declaration;\n\t\t}\n\t}\n};\n\nScope.prototype.contains = function contains ( name ) {\n\treturn !!this.declarations[ name ] ||\n\t\t       ( this.parent ? this.parent.contains( name ) : false );\n};\n\nScope.prototype.deshadow = function deshadow ( names ) {\n\t\tvar this$1 = this;\n\n\tkeys( this.declarations ).forEach( function (key) {\n\t\tvar declaration = this$1.declarations[ key ];\n\n\t\t// we can disregard exports.foo etc\n\t\tif ( declaration.exportName && declaration.isReassigned ) return;\n\n\t\tvar name = declaration.getName( true );\n\t\tvar deshadowed = name;\n\n\t\tvar i = 1;\n\n\t\twhile ( names.has( deshadowed ) ) {\n\t\t\tdeshadowed = name + \"$$\" + (i++);\n\t\t}\n\n\t\tdeclaration.name = deshadowed;\n\t});\n\n\tthis.children.forEach( function (scope) { return scope.deshadow( names ); } );\n};\n\nScope.prototype.findDeclaration = function findDeclaration ( name ) {\n\treturn this.declarations[ name ] ||\n\t\t       ( this.parent && this.parent.findDeclaration( name ) );\n};\n\nScope.prototype.findLexicalBoundary = function findLexicalBoundary () {\n\treturn this.isLexicalBoundary ? this : this.parent.findLexicalBoundary();\n};\n\nvar ArrowFunctionExpression = (function (Node) {\n\tfunction ArrowFunctionExpression () {\n\t\tNode.apply(this, arguments);\n\t}\n\n\tif ( Node ) ArrowFunctionExpression.__proto__ = Node;\n\tArrowFunctionExpression.prototype = Object.create( Node && Node.prototype );\n\tArrowFunctionExpression.prototype.constructor = ArrowFunctionExpression;\n\n\tArrowFunctionExpression.prototype.bind = function bind ( scope ) {\n\t\tNode.prototype.bind.call( this, this.scope || scope );\n\t};\n\n\tArrowFunctionExpression.prototype.findScope = function findScope ( functionScope ) {\n\t\treturn this.scope || this.parent.findScope( functionScope );\n\t};\n\n\tArrowFunctionExpression.prototype.hasEffects = function hasEffects () {\n\t\treturn false;\n\t};\n\n\tArrowFunctionExpression.prototype.initialise = function initialise ( scope ) {\n\t\tvar this$1 = this;\n\n\t\tif ( this.body.type === 'BlockStatement' ) {\n\t\t\tthis.body.createScope( scope );\n\t\t\tthis.scope = this.body.scope;\n\t\t} else {\n\t\t\tthis.scope = new Scope({\n\t\t\t\tparent: scope,\n\t\t\t\tisBlockScope: false,\n\t\t\t\tisLexicalBoundary: false\n\t\t\t});\n\n\t\t\tfor ( var param of this.params ) {\n\t\t\t\tfor ( var name of extractNames( param ) ) {\n\t\t\t\t\tthis$1.scope.addDeclaration( name, null, null, true ); // TODO ugh\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tNode.prototype.initialise.call( this, this.scope );\n\t};\n\n\treturn ArrowFunctionExpression;\n}(Node$1));\n\n// TODO tidy this up a bit (e.g. they can both use node.module.imports)\nfunction disallowIllegalReassignment ( scope, node ) {\n\tif ( node.type === 'MemberExpression' && node.object.type === 'Identifier' ) {\n\t\tvar declaration = scope.findDeclaration( node.object.name );\n\t\tif ( declaration.isNamespace ) {\n\t\t\tnode.module.error({\n\t\t\t\tcode: 'ILLEGAL_NAMESPACE_REASSIGNMENT',\n\t\t\t\tmessage: (\"Illegal reassignment to import '\" + (node.object.name) + \"'\")\n\t\t\t}, node.start );\n\t\t}\n\t}\n\n\telse if ( node.type === 'Identifier' ) {\n\t\tif ( node.module.imports[ node.name ] && !scope.contains( node.name ) ) {\n\t\t\tnode.module.error({\n\t\t\t\tcode: 'ILLEGAL_REASSIGNMENT',\n\t\t\t\tmessage: (\"Illegal reassignment to import '\" + (node.name) + \"'\")\n\t\t\t}, node.start );\n\t\t}\n\t}\n}\n\nfunction isUsedByBundle ( scope, node ) {\n\t// const expression = node;\n\twhile ( node.type === 'MemberExpression' ) node = node.object;\n\n\tvar declaration = scope.findDeclaration( node.name );\n\n\tif ( declaration.isParam ) {\n\t\treturn true;\n\n\t\t// TODO if we mutate a parameter, assume the worst\n\t\t// return node !== expression;\n\t}\n\n\tif ( declaration.activated ) return true;\n\n\tvar values = new Set();\n\tdeclaration.gatherPossibleValues( values );\n\tfor ( var value of values ) {\n\t\tif ( value === UNKNOWN ) {\n\t\t\treturn true;\n\t\t}\n\n\t\tif ( value.type === 'Identifier' ) {\n\t\t\tif ( value.declaration.activated ) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\tvalue.declaration.gatherPossibleValues( values );\n\t\t}\n\n\t\telse if ( value.gatherPossibleValues ) {\n\t\t\tvalue.gatherPossibleValues( values );\n\t\t}\n\t}\n\n\treturn false;\n}\n\nfunction isProgramLevel ( node ) {\n\tdo {\n\t\tif ( node.type === 'Program' ) {\n\t\t\treturn true;\n\t\t}\n\t\tnode = node.parent;\n\t} while ( node && !/Function/.test( node.type ) );\n\n\treturn false;\n}\n\nvar AssignmentExpression = (function (Node) {\n\tfunction AssignmentExpression () {\n\t\tNode.apply(this, arguments);\n\t}\n\n\tif ( Node ) AssignmentExpression.__proto__ = Node;\n\tAssignmentExpression.prototype = Object.create( Node && Node.prototype );\n\tAssignmentExpression.prototype.constructor = AssignmentExpression;\n\n\tAssignmentExpression.prototype.bind = function bind ( scope ) {\n\t\tvar subject = this.left;\n\n\t\tthis.subject = subject;\n\t\tdisallowIllegalReassignment( scope, subject );\n\n\t\tif ( subject.type === 'Identifier' ) {\n\t\t\tvar declaration = scope.findDeclaration( subject.name );\n\t\t\tdeclaration.isReassigned = true;\n\n\t\t\tif ( declaration.possibleValues ) { // TODO this feels hacky\n\t\t\t\tif ( this.operator === '=' ) {\n\t\t\t\t\tdeclaration.possibleValues.add( this.right );\n\t\t\t\t} else if ( this.operator === '+=' ) {\n\t\t\t\t\tdeclaration.possibleValues.add( STRING ).add( NUMBER );\n\t\t\t\t} else {\n\t\t\t\t\tdeclaration.possibleValues.add( NUMBER );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tNode.prototype.bind.call( this, scope );\n\t};\n\n\tAssignmentExpression.prototype.hasEffects = function hasEffects ( scope ) {\n\t\tvar hasEffects = this.isUsedByBundle() || this.right.hasEffects( scope );\n\t\treturn hasEffects;\n\t};\n\n\tAssignmentExpression.prototype.initialise = function initialise ( scope ) {\n\t\tthis.scope = scope;\n\n\t\tif ( isProgramLevel( this ) ) {\n\t\t\tthis.module.bundle.dependentExpressions.push( this );\n\t\t}\n\n\t\tNode.prototype.initialise.call( this, scope );\n\t};\n\n\tAssignmentExpression.prototype.isUsedByBundle = function isUsedByBundle$1 () {\n\t\treturn isUsedByBundle( this.scope, this.subject );\n\t};\n\n\treturn AssignmentExpression;\n}(Node$1));\n\nvar operators = {\n\t'==': function ( left, right ) { return left == right; },\n\t'!=': function ( left, right ) { return left != right; },\n\t'===': function ( left, right ) { return left === right; },\n\t'!==': function ( left, right ) { return left !== right; },\n\t'<': function ( left, right ) { return left < right; },\n\t'<=': function ( left, right ) { return left <= right; },\n\t'>': function ( left, right ) { return left > right; },\n\t'>=': function ( left, right ) { return left >= right; },\n\t'<<': function ( left, right ) { return left << right; },\n\t'>>': function ( left, right ) { return left >> right; },\n\t'>>>': function ( left, right ) { return left >>> right; },\n\t'+': function ( left, right ) { return left + right; },\n\t'-': function ( left, right ) { return left - right; },\n\t'*': function ( left, right ) { return left * right; },\n\t'/': function ( left, right ) { return left / right; },\n\t'%': function ( left, right ) { return left % right; },\n\t'|': function ( left, right ) { return left | right; },\n\t'^': function ( left, right ) { return left ^ right; },\n\t'&': function ( left, right ) { return left & right; },\n\tin: function ( left, right ) { return left in right; },\n\tinstanceof: function ( left, right ) { return left instanceof right; }\n};\n\nvar BinaryExpression = (function (Node) {\n\tfunction BinaryExpression () {\n\t\tNode.apply(this, arguments);\n\t}\n\n\tif ( Node ) BinaryExpression.__proto__ = Node;\n\tBinaryExpression.prototype = Object.create( Node && Node.prototype );\n\tBinaryExpression.prototype.constructor = BinaryExpression;\n\n\tBinaryExpression.prototype.getValue = function getValue () {\n\t\tvar leftValue = this.left.getValue();\n\t\tif ( leftValue === UNKNOWN ) return UNKNOWN;\n\n\t\tvar rightValue = this.right.getValue();\n\t\tif ( rightValue === UNKNOWN ) return UNKNOWN;\n\n\t\treturn operators[ this.operator ]( leftValue, rightValue );\n\t};\n\n\treturn BinaryExpression;\n}(Node$1));\n\nvar Statement = (function (Node) {\n\tfunction Statement () {\n\t\tNode.apply(this, arguments);\n\t}\n\n\tif ( Node ) Statement.__proto__ = Node;\n\tStatement.prototype = Object.create( Node && Node.prototype );\n\tStatement.prototype.constructor = Statement;\n\n\tStatement.prototype.render = function render ( code, es ) {\n\t\tif ( !this.module.bundle.treeshake || this.shouldInclude ) {\n\t\t\tNode.prototype.render.call( this, code, es );\n\t\t} else {\n\t\t\tcode.remove( this.leadingCommentStart || this.start, this.next || this.end );\n\t\t}\n\t};\n\n\tStatement.prototype.run = function run ( scope ) {\n\t\tthis.shouldInclude = true;\n\t\tNode.prototype.run.call( this, scope );\n\t};\n\n\treturn Statement;\n}(Node$1));\n\nvar BlockStatement = (function (Statement$$1) {\n\tfunction BlockStatement () {\n\t\tStatement$$1.apply(this, arguments);\n\t}\n\n\tif ( Statement$$1 ) BlockStatement.__proto__ = Statement$$1;\n\tBlockStatement.prototype = Object.create( Statement$$1 && Statement$$1.prototype );\n\tBlockStatement.prototype.constructor = BlockStatement;\n\n\tBlockStatement.prototype.bind = function bind () {\n\t\tvar this$1 = this;\n\n\t\tfor ( var node of this.body ) {\n\t\t\tnode.bind( this$1.scope );\n\t\t}\n\t};\n\n\tBlockStatement.prototype.createScope = function createScope ( parent ) {\n\t\tvar this$1 = this;\n\n\t\tthis.parentIsFunction = /Function/.test( this.parent.type );\n\t\tthis.isFunctionBlock = this.parentIsFunction || this.parent.type === 'Module';\n\n\t\tthis.scope = new Scope({\n\t\t\tparent: parent,\n\t\t\tisBlockScope: !this.isFunctionBlock,\n\t\t\tisLexicalBoundary: this.isFunctionBlock && this.parent.type !== 'ArrowFunctionExpression',\n\t\t\towner: this // TODO is this used anywhere?\n\t\t});\n\n\t\tvar params = this.parent.params || ( this.parent.type === 'CatchClause' && [ this.parent.param ] );\n\n\t\tif ( params && params.length ) {\n\t\t\tparams.forEach( function (node) {\n\t\t\t\textractNames( node ).forEach( function (name) {\n\t\t\t\t\tthis$1.scope.addDeclaration( name, node, false, true );\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\t};\n\n\tBlockStatement.prototype.findScope = function findScope ( functionScope ) {\n\t\treturn functionScope && !this.isFunctionBlock ? this.parent.findScope( functionScope ) : this.scope;\n\t};\n\n\tBlockStatement.prototype.initialise = function initialise ( scope ) {\n\t\tvar this$1 = this;\n\n\t\tif ( !this.scope ) this.createScope( scope ); // scope can be created early in some cases, e.g for (let i... )\n\n\t\tvar lastNode;\n\t\tfor ( var node of this.body ) {\n\t\t\tnode.initialise( this$1.scope );\n\n\t\t\tif ( lastNode ) lastNode.next = node.start;\n\t\t\tlastNode = node;\n\t\t}\n\t};\n\n\tBlockStatement.prototype.render = function render ( code, es ) {\n\t\tif (this.body.length) {\n\t\t\tfor ( var node of this.body ) {\n\t\t\t\tnode.render( code, es );\n\t\t\t}\n\t\t} else {\n\t\t\tStatement$$1.prototype.render.call(this, code, es);\n\t\t}\n\t};\n\n\treturn BlockStatement;\n}(Statement));\n\nfunction isReference ( node, parent ) {\n\tif ( node.type === 'MemberExpression' ) {\n\t\treturn !node.computed && isReference( node.object, node );\n\t}\n\n\tif ( node.type === 'Identifier' ) {\n\t\t// the only time we could have an identifier node without a parent is\n\t\t// if it's the entire body of a function without a block statement –\n\t\t// i.e. an arrow function expression like `a => a`\n\t\tif ( !parent ) return true;\n\n\t\t// TODO is this right?\n\t\tif ( parent.type === 'MemberExpression' || parent.type === 'MethodDefinition' ) {\n\t\t\treturn parent.computed || node === parent.object;\n\t\t}\n\n\t\t// disregard the `bar` in `{ bar: foo }`, but keep it in `{ [bar]: foo }`\n\t\tif ( parent.type === 'Property' ) return parent.computed || node === parent.value;\n\n\t\t// disregard the `bar` in `class Foo { bar () {...} }`\n\t\tif ( parent.type === 'MethodDefinition' ) return false;\n\n\t\t// disregard the `bar` in `export { foo as bar }`\n\t\tif ( parent.type === 'ExportSpecifier' && node !== parent.local ) return;\n\n\t\treturn true;\n\t}\n}\n\nfunction flatten ( node ) {\n\tvar parts = [];\n\twhile ( node.type === 'MemberExpression' ) {\n\t\tif ( node.computed ) return null;\n\t\tparts.unshift( node.property.name );\n\n\t\tnode = node.object;\n\t}\n\n\tif ( node.type !== 'Identifier' ) return null;\n\n\tvar name = node.name;\n\tparts.unshift( name );\n\n\treturn { name: name, keypath: parts.join( '.' ) };\n}\n\nvar pureFunctions = {};\n\nvar arrayTypes = 'Array Int8Array Uint8Array Uint8ClampedArray Int16Array Uint16Array Int32Array Uint32Array Float32Array Float64Array'.split( ' ' );\nvar simdTypes = 'Int8x16 Int16x8 Int32x4 Float32x4 Float64x2'.split( ' ' );\nvar simdMethods = 'abs add and bool check div equal extractLane fromFloat32x4 fromFloat32x4Bits fromFloat64x2 fromFloat64x2Bits fromInt16x8Bits fromInt32x4 fromInt32x4Bits fromInt8x16Bits greaterThan greaterThanOrEqual lessThan lessThanOrEqual load max maxNum min minNum mul neg not notEqual or reciprocalApproximation reciprocalSqrtApproximation replaceLane select selectBits shiftLeftByScalar shiftRightArithmeticByScalar shiftRightLogicalByScalar shuffle splat sqrt store sub swizzle xor'.split( ' ' );\nvar allSimdMethods = [];\nsimdTypes.forEach( function (t) {\n\tsimdMethods.forEach( function (m) {\n\t\tallSimdMethods.push( (\"SIMD.\" + t + \".\" + m) );\n\t});\n});\n\n[\n\t'Array.isArray',\n\t'Error', 'EvalError', 'InternalError', 'RangeError', 'ReferenceError', 'SyntaxError', 'TypeError', 'URIError',\n\t'isFinite', 'isNaN', 'parseFloat', 'parseInt', 'decodeURI', 'decodeURIComponent', 'encodeURI', 'encodeURIComponent', 'escape', 'unescape',\n\t'Object', 'Object.create', 'Object.getNotifier', 'Object.getOwn', 'Object.getOwnPropertyDescriptor', 'Object.getOwnPropertyNames', 'Object.getOwnPropertySymbols', 'Object.getPrototypeOf', 'Object.is', 'Object.isExtensible', 'Object.isFrozen', 'Object.isSealed', 'Object.keys',\n\t'Function', 'Boolean',\n\t'Number', 'Number.isFinite', 'Number.isInteger', 'Number.isNaN', 'Number.isSafeInteger', 'Number.parseFloat', 'Number.parseInt',\n\t'Symbol', 'Symbol.for', 'Symbol.keyFor',\n\t'Math.abs', 'Math.acos', 'Math.acosh', 'Math.asin', 'Math.asinh', 'Math.atan', 'Math.atan2', 'Math.atanh', 'Math.cbrt', 'Math.ceil', 'Math.clz32', 'Math.cos', 'Math.cosh', 'Math.exp', 'Math.expm1', 'Math.floor', 'Math.fround', 'Math.hypot', 'Math.imul', 'Math.log', 'Math.log10', 'Math.log1p', 'Math.log2', 'Math.max', 'Math.min', 'Math.pow', 'Math.random', 'Math.round', 'Math.sign', 'Math.sin', 'Math.sinh', 'Math.sqrt', 'Math.tan', 'Math.tanh', 'Math.trunc',\n\t'Date', 'Date.UTC', 'Date.now', 'Date.parse',\n\t'String', 'String.fromCharCode', 'String.fromCodePoint', 'String.raw',\n\t'RegExp',\n\t'Map', 'Set', 'WeakMap', 'WeakSet',\n\t'ArrayBuffer', 'ArrayBuffer.isView',\n\t'DataView',\n\t'JSON.parse', 'JSON.stringify',\n\t'Promise', 'Promise.all', 'Promise.race', 'Promise.reject', 'Promise.resolve',\n\t'Intl.Collator', 'Intl.Collator.supportedLocalesOf', 'Intl.DateTimeFormat', 'Intl.DateTimeFormat.supportedLocalesOf', 'Intl.NumberFormat', 'Intl.NumberFormat.supportedLocalesOf'\n\n\t// TODO properties of e.g. window...\n].concat(\n\tarrayTypes,\n\tarrayTypes.map( function (t) { return (t + \".from\"); } ),\n\tarrayTypes.map( function (t) { return (t + \".of\"); } ),\n\tsimdTypes.map( function (t) { return (\"SIMD.\" + t); } ),\n\tallSimdMethods\n).forEach( function (name) { return pureFunctions[ name ] = true; } );\n\nvar currentlyCalling = new Set();\n\nfunction isES5Function ( node ) {\n\treturn node.type === 'FunctionExpression' || node.type === 'FunctionDeclaration';\n}\n\nfunction hasEffectsNew ( node, scope ) {\n\tvar inner = node;\n\n\tif ( inner.type === 'ExpressionStatement' ) {\n\t\tinner = inner.expression;\n\n\t\tif ( inner.type === 'AssignmentExpression' ) {\n\t\t\tif ( inner.right.hasEffects( scope ) ) {\n\t\t\t\treturn true;\n\n\t\t\t} else {\n\t\t\t\tinner = inner.left;\n\n\t\t\t\tif ( inner.type === 'MemberExpression' ) {\n\t\t\t\t\tif ( inner.computed && inner.property.hasEffects( scope ) ) {\n\t\t\t\t\t\treturn true;\n\n\t\t\t\t\t} else {\n\t\t\t\t\t\tinner = inner.object;\n\n\t\t\t\t\t\tif ( inner.type === 'ThisExpression' ) {\n\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn node.hasEffects( scope );\n}\n\nfunction fnHasEffects ( fn, isNew ) {\n\tif ( currentlyCalling.has( fn ) ) return false; // prevent infinite loops... TODO there must be a better way\n\tcurrentlyCalling.add( fn );\n\n\t// handle body-less arrow functions\n\tvar scope = fn.body.scope || fn.scope;\n\tvar body = fn.body.type === 'BlockStatement' ? fn.body.body : [ fn.body ];\n\n\tfor ( var node of body ) {\n\t\tif ( isNew ? hasEffectsNew( node, scope ) : node.hasEffects( scope ) ) {\n\t\t\tcurrentlyCalling.delete( fn );\n\t\t\treturn true;\n\t\t}\n\t}\n\n\tcurrentlyCalling.delete( fn );\n\treturn false;\n}\n\nfunction callHasEffects ( scope, callee, isNew ) {\n\tvar values = new Set([ callee ]);\n\n\tfor ( var node of values ) {\n\t\tif ( node === UNKNOWN ) return true; // err on side of caution\n\n\t\tif ( /Function/.test( node.type ) ) {\n\t\t\tif ( fnHasEffects( node, isNew && isES5Function( node ) ) ) return true;\n\t\t}\n\n\t\telse if ( /Class/.test( node.type ) ) {\n\t\t\t// TODO find constructor (may belong to a superclass)\n\t\t\treturn true;\n\t\t}\n\n\t\telse if ( isReference( node ) ) {\n\t\t\tvar flattened = flatten( node );\n\t\t\tvar declaration = scope.findDeclaration( flattened.name );\n\n\t\t\tif ( declaration.isGlobal ) {\n\t\t\t\tif ( !pureFunctions[ flattened.keypath ] ) return true;\n\t\t\t}\n\n\t\t\telse if ( declaration.isExternal ) {\n\t\t\t\treturn true; // TODO make this configurable? e.g. `path.[whatever]`\n\t\t\t}\n\n\t\t\telse {\n\t\t\t\tif ( node.declaration ) {\n\t\t\t\t\tnode.declaration.gatherPossibleValues( values );\n\t\t\t\t} else {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\telse if ( node.gatherPossibleValues ) {\n\t\t\tnode.gatherPossibleValues( values );\n\t\t}\n\n\t\telse {\n\t\t\t// probably an error in the user's code — err on side of caution\n\t\t\treturn true;\n\t\t}\n\t}\n\n\treturn false;\n}\n\nvar CallExpression = (function (Node) {\n\tfunction CallExpression () {\n\t\tNode.apply(this, arguments);\n\t}\n\n\tif ( Node ) CallExpression.__proto__ = Node;\n\tCallExpression.prototype = Object.create( Node && Node.prototype );\n\tCallExpression.prototype.constructor = CallExpression;\n\n\tCallExpression.prototype.bind = function bind ( scope ) {\n\t\tif ( this.callee.type === 'Identifier' ) {\n\t\t\tvar declaration = scope.findDeclaration( this.callee.name );\n\n\t\t\tif ( declaration.isNamespace ) {\n\t\t\t\tthis.module.error({\n\t\t\t\t\tcode: 'CANNOT_CALL_NAMESPACE',\n\t\t\t\t\tmessage: (\"Cannot call a namespace ('\" + (this.callee.name) + \"')\")\n\t\t\t\t}, this.start );\n\t\t\t}\n\n\t\t\tif ( this.callee.name === 'eval' && declaration.isGlobal ) {\n\t\t\t\tthis.module.warn({\n\t\t\t\t\tcode: 'EVAL',\n\t\t\t\t\tmessage: \"Use of eval is strongly discouraged, as it poses security risks and may cause issues with minification\",\n\t\t\t\t\turl: 'https://github.com/rollup/rollup/wiki/Troubleshooting#avoiding-eval'\n\t\t\t\t}, this.start );\n\t\t\t}\n\t\t}\n\n\t\tNode.prototype.bind.call( this, scope );\n\t};\n\n\tCallExpression.prototype.hasEffects = function hasEffects ( scope ) {\n\t\treturn callHasEffects( scope, this.callee, false );\n\t};\n\n\tCallExpression.prototype.initialise = function initialise ( scope ) {\n\t\tif ( isProgramLevel( this ) ) {\n\t\t\tthis.module.bundle.dependentExpressions.push( this );\n\t\t}\n\t\tNode.prototype.initialise.call( this, scope );\n\t};\n\n\tCallExpression.prototype.isUsedByBundle = function isUsedByBundle () {\n\t\treturn this.hasEffects( this.findScope() );\n\t};\n\n\treturn CallExpression;\n}(Node$1));\n\n// TODO is this basically identical to FunctionDeclaration?\nvar ClassDeclaration = (function (Node) {\n\tfunction ClassDeclaration () {\n\t\tNode.apply(this, arguments);\n\t}\n\n\tif ( Node ) ClassDeclaration.__proto__ = Node;\n\tClassDeclaration.prototype = Object.create( Node && Node.prototype );\n\tClassDeclaration.prototype.constructor = ClassDeclaration;\n\n\tClassDeclaration.prototype.activate = function activate () {\n\t\tif ( this.activated ) return;\n\t\tthis.activated = true;\n\n\t\tif ( this.superClass ) this.superClass.run( this.scope );\n\t\tthis.body.run();\n\t};\n\n\tClassDeclaration.prototype.addReference = function addReference () {\n\t\t/* noop? */\n\t};\n\n\tClassDeclaration.prototype.gatherPossibleValues = function gatherPossibleValues ( values ) {\n\t\tvalues.add( this );\n\t};\n\n\tClassDeclaration.prototype.getName = function getName () {\n\t\treturn this.name;\n\t};\n\n\tClassDeclaration.prototype.hasEffects = function hasEffects () {\n\t\treturn false;\n\t};\n\n\tClassDeclaration.prototype.initialise = function initialise ( scope ) {\n\t\tthis.scope = scope;\n\n\t\tthis.name = this.id.name;\n\n\t\tscope.addDeclaration( this.name, this, false, false );\n\t\tNode.prototype.initialise.call( this, scope );\n\t};\n\n\tClassDeclaration.prototype.render = function render ( code, es ) {\n\t\tif ( this.activated ) {\n\t\t\tNode.prototype.render.call( this, code, es );\n\t\t} else {\n\t\t\tcode.remove( this.leadingCommentStart || this.start, this.next || this.end );\n\t\t}\n\t};\n\n\tClassDeclaration.prototype.run = function run ( scope ) {\n\t\tif ( this.parent.type === 'ExportDefaultDeclaration' ) {\n\t\t\tNode.prototype.run.call( this, scope );\n\t\t}\n\t};\n\n\treturn ClassDeclaration;\n}(Node$1));\n\nvar ClassExpression = (function (Node) {\n\tfunction ClassExpression () {\n\t\tNode.apply(this, arguments);\n\t}\n\n\tif ( Node ) ClassExpression.__proto__ = Node;\n\tClassExpression.prototype = Object.create( Node && Node.prototype );\n\tClassExpression.prototype.constructor = ClassExpression;\n\n\tClassExpression.prototype.bind = function bind () {\n\t\tNode.prototype.bind.call( this, this.scope );\n\t};\n\n\tClassExpression.prototype.findScope = function findScope () {\n\t\treturn this.scope;\n\t};\n\n\tClassExpression.prototype.initialise = function initialise () {\n\t\tthis.scope = new Scope({\n\t\t\tisBlockScope: true,\n\t\t\tparent: this.parent.findScope( false )\n\t\t});\n\n\t\tif ( this.id ) {\n\t\t\t// function expression IDs belong to the child scope...\n\t\t\tthis.scope.addDeclaration( this.id.name, this, false, true );\n\t\t}\n\n\t\tNode.prototype.initialise.call( this, this.scope );\n\t};\n\n\treturn ClassExpression;\n}(Node$1));\n\nvar ConditionalExpression = (function (Node) {\n\tfunction ConditionalExpression () {\n\t\tNode.apply(this, arguments);\n\t}\n\n\tif ( Node ) ConditionalExpression.__proto__ = Node;\n\tConditionalExpression.prototype = Object.create( Node && Node.prototype );\n\tConditionalExpression.prototype.constructor = ConditionalExpression;\n\n\tConditionalExpression.prototype.initialise = function initialise ( scope ) {\n\t\tif ( this.module.bundle.treeshake ) {\n\t\t\tthis.testValue = this.test.getValue();\n\n\t\t\tif ( this.testValue === UNKNOWN\t ) {\n\t\t\t\tNode.prototype.initialise.call( this, scope );\n\t\t\t}\n\n\t\t\telse if ( this.testValue ) {\n\t\t\t\tthis.consequent.initialise( scope );\n\t\t\t\tthis.alternate = null;\n\t\t\t} else if ( this.alternate ) {\n\t\t\t\tthis.alternate.initialise( scope );\n\t\t\t\tthis.consequent = null;\n\t\t\t}\n\t\t}\n\n\t\telse {\n\t\t\tNode.prototype.initialise.call( this, scope );\n\t\t}\n\t};\n\n\tConditionalExpression.prototype.gatherPossibleValues = function gatherPossibleValues ( values ) {\n\t\tvar testValue = this.test.getValue();\n\n\t\tif ( testValue === UNKNOWN ) {\n\t\t\tvalues.add( this.consequent ).add( this.alternate );\n\t\t} else {\n\t\t\tvalues.add( testValue ? this.consequent : this.alternate );\n\t\t}\n\t};\n\n\tConditionalExpression.prototype.getValue = function getValue () {\n\t\tvar testValue = this.test.getValue();\n\t\tif ( testValue === UNKNOWN ) return UNKNOWN;\n\n\t\treturn testValue ? this.consequent.getValue() : this.alternate.getValue();\n\t};\n\n\tConditionalExpression.prototype.render = function render ( code, es ) {\n\t\tif ( !this.module.bundle.treeshake ) {\n\t\t\tNode.prototype.render.call( this, code, es );\n\t\t}\n\n\t\telse {\n\t\t\tif ( this.testValue === UNKNOWN ) {\n\t\t\t\tNode.prototype.render.call( this, code, es );\n\t\t\t}\n\n\t\t\telse if ( this.testValue ) {\n\t\t\t\tcode.remove( this.start, this.consequent.start );\n\t\t\t\tcode.remove( this.consequent.end, this.end );\n\t\t\t\tif ( this.consequent.type === 'SequenceExpression' ) {\n\t\t\t\t\tcode.insertRight( this.consequent.start, '(' );\n\t\t\t\t\tcode.insertLeft( this.consequent.end, ')' );\n\t\t\t\t}\n\t\t\t\tthis.consequent.render( code, es );\n\t\t\t} else {\n\t\t\t\tcode.remove( this.start, this.alternate.start );\n\t\t\t\tcode.remove( this.alternate.end, this.end );\n\t\t\t\tif ( this.alternate.type === 'SequenceExpression' ) {\n\t\t\t\t\tcode.insertRight( this.alternate.start, '(' );\n\t\t\t\t\tcode.insertLeft( this.alternate.end, ')' );\n\t\t\t\t}\n\t\t\t\tthis.alternate.render( code, es );\n\t\t\t}\n\t\t}\n\t};\n\n\treturn ConditionalExpression;\n}(Node$1));\n\nvar EmptyStatement = (function (Statement$$1) {\n\tfunction EmptyStatement () {\n\t\tStatement$$1.apply(this, arguments);\n\t}\n\n\tif ( Statement$$1 ) EmptyStatement.__proto__ = Statement$$1;\n\tEmptyStatement.prototype = Object.create( Statement$$1 && Statement$$1.prototype );\n\tEmptyStatement.prototype.constructor = EmptyStatement;\n\n\tEmptyStatement.prototype.render = function render ( code ) {\n\t\tif ( this.parent.type === 'BlockStatement' || this.parent.type === 'Program' ) {\n\t\t\tcode.remove( this.start, this.end );\n\t\t}\n\t};\n\n\treturn EmptyStatement;\n}(Statement));\n\nvar ExportAllDeclaration = (function (Node) {\n\tfunction ExportAllDeclaration () {\n\t\tNode.apply(this, arguments);\n\t}\n\n\tif ( Node ) ExportAllDeclaration.__proto__ = Node;\n\tExportAllDeclaration.prototype = Object.create( Node && Node.prototype );\n\tExportAllDeclaration.prototype.constructor = ExportAllDeclaration;\n\n\tExportAllDeclaration.prototype.initialise = function initialise () {\n\t\tthis.isExportDeclaration = true;\n\t};\n\n\tExportAllDeclaration.prototype.render = function render ( code ) {\n\t\tcode.remove( this.leadingCommentStart || this.start, this.next || this.end );\n\t};\n\n\treturn ExportAllDeclaration;\n}(Node$1));\n\nvar functionOrClassDeclaration = /^(?:Function|Class)Declaration/;\n\nvar ExportDefaultDeclaration = (function (Node) {\n\tfunction ExportDefaultDeclaration () {\n\t\tNode.apply(this, arguments);\n\t}\n\n\tif ( Node ) ExportDefaultDeclaration.__proto__ = Node;\n\tExportDefaultDeclaration.prototype = Object.create( Node && Node.prototype );\n\tExportDefaultDeclaration.prototype.constructor = ExportDefaultDeclaration;\n\n\tExportDefaultDeclaration.prototype.initialise = function initialise ( scope ) {\n\t\tthis.isExportDeclaration = true;\n\t\tthis.isDefault = true;\n\n\t\tthis.name = ( this.declaration.id && this.declaration.id.name ) || this.declaration.name || this.module.basename();\n\t\tscope.declarations.default = this;\n\n\t\tthis.declaration.initialise( scope );\n\t};\n\n\tExportDefaultDeclaration.prototype.activate = function activate () {\n\t\tif ( this.activated ) return;\n\t\tthis.activated = true;\n\n\t\tthis.run();\n\t};\n\n\tExportDefaultDeclaration.prototype.addReference = function addReference ( reference ) {\n\t\tthis.name = reference.name;\n\t\tif ( this.original ) this.original.addReference( reference );\n\t};\n\n\tExportDefaultDeclaration.prototype.bind = function bind ( scope ) {\n\t\tvar name = ( this.declaration.id && this.declaration.id.name ) || this.declaration.name;\n\t\tif ( name ) this.original = scope.findDeclaration( name );\n\n\t\tthis.declaration.bind( scope );\n\t};\n\n\tExportDefaultDeclaration.prototype.gatherPossibleValues = function gatherPossibleValues ( values ) {\n\t\tthis.declaration.gatherPossibleValues( values );\n\t};\n\n\tExportDefaultDeclaration.prototype.getName = function getName ( es ) {\n\t\tif ( this.original && !this.original.isReassigned ) {\n\t\t\treturn this.original.getName( es );\n\t\t}\n\n\t\treturn this.name;\n\t};\n\n\t// TODO this is total chaos, tidy it up\n\tExportDefaultDeclaration.prototype.render = function render ( code, es ) {\n\t\tvar treeshake = this.module.bundle.treeshake;\n\t\tvar name = this.getName( es );\n\n\t\t// paren workaround: find first non-whitespace character position after `export default`\n\t\tvar declaration_start;\n\t\tif ( this.declaration ) {\n\t\t\tvar statementStr = code.original.slice( this.start, this.end );\n\t\t\tdeclaration_start = this.start + statementStr.match(/^\\s*export\\s+default\\s*/)[0].length;\n\t\t}\n\n\t\tif ( this.shouldInclude || this.declaration.activated ) {\n\t\t\tif ( this.declaration.type === 'CallExpression' && this.declaration.callee.type === 'FunctionExpression' && this.declaration.arguments.length ) {\n\t\t\t\t// we're exporting an IIFE. Check it doesn't look unintentional (#1011)\n\t\t\t\tvar isWrapped = /\\(/.test( code.original.slice( this.start, this.declaration.start ) );\n\n\t\t\t\tif ( !isWrapped ) {\n\t\t\t\t\tcode.insertRight( this.declaration.callee.start, '(' );\n\t\t\t\t\tcode.insertLeft( this.declaration.callee.end, ')' );\n\n\t\t\t\t\tvar start = this.declaration.callee.end;\n\t\t\t\t\tvar end = this.declaration.arguments[0].start - 1;\n\t\t\t\t\twhile ( code.original[ end ] !== '(' ) end -= 1;\n\n\t\t\t\t\tvar newlineSeparated = /\\n/.test( code.original.slice( start, end ) );\n\n\t\t\t\t\tif ( newlineSeparated ) {\n\t\t\t\t\t\tthis.module.warn({\n\t\t\t\t\t\t\tcode: 'AMBIGUOUS_DEFAULT_EXPORT',\n\t\t\t\t\t\t\tmessage: \"Ambiguous default export (is a call expression, but looks like a function declaration)\",\n\t\t\t\t\t\t\turl: 'https://github.com/rollup/rollup/wiki/Troubleshooting#ambiguous-default-export'\n\t\t\t\t\t\t}, this.declaration.start );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif ( this.activated ) {\n\t\t\t\tif ( functionOrClassDeclaration.test( this.declaration.type ) ) {\n\t\t\t\t\tif ( this.declaration.id ) {\n\t\t\t\t\t\tcode.remove( this.start, declaration_start );\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthrow new Error( 'TODO anonymous class/function declaration' );\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\telse {\n\t\t\t\t\tif ( this.original && this.original.getName( es ) === name ) {\n\t\t\t\t\t\t// prevent `var foo = foo`\n\t\t\t\t\t\tcode.remove( this.leadingCommentStart || this.start, this.next || this.end );\n\t\t\t\t\t\treturn; // don't render children. TODO this seems like a bit of a hack\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcode.overwrite( this.start, declaration_start, ((this.module.bundle.varOrConst) + \" \" + name + \" = \") );\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.insertSemicolon( code );\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// remove `var foo` from `var foo = bar()`, if `foo` is unused\n\t\t\t\tcode.remove( this.start, declaration_start );\n\t\t\t}\n\n\t\t\tNode.prototype.render.call( this, code, es );\n\t\t} else {\n\t\t\tif ( treeshake ) {\n\t\t\t\tif ( functionOrClassDeclaration.test( this.declaration.type ) ) {\n\t\t\t\t\tcode.remove( this.leadingCommentStart || this.start, this.next || this.end );\n\t\t\t\t} else {\n\t\t\t\t\tvar hasEffects = this.declaration.hasEffects( this.module.scope );\n\t\t\t\t\tcode.remove( this.start, hasEffects ? declaration_start : this.next || this.end );\n\t\t\t\t}\n\t\t\t} else if (name === this.declaration.name) {\n\t\t\t\tcode.remove( this.start, this.next || this.end );\n\t\t\t} else {\n\t\t\t\tcode.overwrite( this.start, declaration_start, ((this.module.bundle.varOrConst) + \" \" + name + \" = \") );\n\t\t\t}\n\t\t\t// code.remove( this.start, this.next || this.end );\n\t\t}\n\t};\n\n\tExportDefaultDeclaration.prototype.run = function run ( scope ) {\n\t\tthis.shouldInclude = true;\n\t\tNode.prototype.run.call( this, scope );\n\t};\n\n\treturn ExportDefaultDeclaration;\n}(Node$1));\n\nvar ExportNamedDeclaration = (function (Node) {\n\tfunction ExportNamedDeclaration () {\n\t\tNode.apply(this, arguments);\n\t}\n\n\tif ( Node ) ExportNamedDeclaration.__proto__ = Node;\n\tExportNamedDeclaration.prototype = Object.create( Node && Node.prototype );\n\tExportNamedDeclaration.prototype.constructor = ExportNamedDeclaration;\n\n\tExportNamedDeclaration.prototype.initialise = function initialise ( scope ) {\n\t\tthis.scope = scope;\n\t\tthis.isExportDeclaration = true;\n\n\t\tif ( this.declaration ) this.declaration.initialise( scope );\n\t};\n\n\tExportNamedDeclaration.prototype.bind = function bind ( scope ) {\n\t\tif ( this.declaration ) this.declaration.bind( scope );\n\t};\n\n\tExportNamedDeclaration.prototype.render = function render ( code, es ) {\n\t\tif ( this.declaration ) {\n\t\t\tcode.remove( this.start, this.declaration.start );\n\t\t\tthis.declaration.render( code, es );\n\t\t} else {\n\t\t\tvar start = this.leadingCommentStart || this.start;\n\t\t\tvar end = this.next || this.end;\n\n\t\t\tif ( this.defaultExport ) {\n\t\t\t\tvar name = this.defaultExport.getName( es );\n\t\t\t\tvar originalName = this.defaultExport.original.getName( es );\n\n\t\t\t\tif ( name !== originalName ) {\n\t\t\t\t\tcode.overwrite( start, end, (\"var \" + name + \" = \" + originalName + \";\") );\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tcode.remove( start, end );\n\t\t}\n\t};\n\n\treturn ExportNamedDeclaration;\n}(Node$1));\n\nvar ExpressionStatement = (function (Statement$$1) {\n\tfunction ExpressionStatement () {\n\t\tStatement$$1.apply(this, arguments);\n\t}\n\n\tif ( Statement$$1 ) ExpressionStatement.__proto__ = Statement$$1;\n\tExpressionStatement.prototype = Object.create( Statement$$1 && Statement$$1.prototype );\n\tExpressionStatement.prototype.constructor = ExpressionStatement;\n\n\tExpressionStatement.prototype.render = function render ( code, es ) {\n\t\tStatement$$1.prototype.render.call( this, code, es );\n\t\tif ( this.shouldInclude ) this.insertSemicolon( code );\n\t};\n\n\treturn ExpressionStatement;\n}(Statement));\n\nvar ForStatement = (function (Statement$$1) {\n\tfunction ForStatement () {\n\t\tStatement$$1.apply(this, arguments);\n\t}\n\n\tif ( Statement$$1 ) ForStatement.__proto__ = Statement$$1;\n\tForStatement.prototype = Object.create( Statement$$1 && Statement$$1.prototype );\n\tForStatement.prototype.constructor = ForStatement;\n\n\tForStatement.prototype.initialise = function initialise ( scope ) {\n\t\tif ( this.body.type === 'BlockStatement' ) {\n\t\t\tthis.body.createScope( scope );\n\t\t\tthis.scope = this.body.scope;\n\t\t} else {\n\t\t\tthis.scope = new Scope({\n\t\t\t\tparent: scope,\n\t\t\t\tisBlockScope: true,\n\t\t\t\tisLexicalBoundary: false\n\t\t\t});\n\t\t}\n\n\t\t// can't use super, because we need to control the order\n\t\tif ( this.init ) this.init.initialise( this.scope );\n\t\tif ( this.test ) this.test.initialise( this.scope );\n\t\tif ( this.update ) this.update.initialise( this.scope );\n\t\tthis.body.initialise( this.scope );\n\t};\n\n\treturn ForStatement;\n}(Statement));\n\nfunction assignToForLoopLeft ( node, scope, value ) {\n\tif ( node.type === 'VariableDeclaration' ) {\n\t\tfor ( var proxy of node.declarations[0].proxies.values() ) {\n\t\t\tproxy.possibleValues.add( value );\n\t\t}\n\t}\n\n\telse {\n\t\tif ( node.type === 'MemberExpression' ) {\n\t\t\t// apparently this is legal JavaScript? Though I don't know what\n\t\t\t// kind of monster would write `for ( foo.bar of thing ) {...}`\n\n\t\t\t// for now, do nothing, as I'm not sure anything needs to happen...\n\t\t}\n\n\t\telse {\n\t\t\tfor ( var name of extractNames( node ) ) {\n\t\t\t\tvar declaration = scope.findDeclaration( name );\n\t\t\t\tif ( declaration.possibleValues ) {\n\t\t\t\t\tdeclaration.possibleValues.add( value );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\nvar ForInStatement = (function (Statement$$1) {\n\tfunction ForInStatement () {\n\t\tStatement$$1.apply(this, arguments);\n\t}\n\n\tif ( Statement$$1 ) ForInStatement.__proto__ = Statement$$1;\n\tForInStatement.prototype = Object.create( Statement$$1 && Statement$$1.prototype );\n\tForInStatement.prototype.constructor = ForInStatement;\n\n\tForInStatement.prototype.initialise = function initialise ( scope ) {\n\t\tif ( this.body.type === 'BlockStatement' ) {\n\t\t\tthis.body.createScope( scope );\n\t\t\tthis.scope = this.body.scope;\n\t\t} else {\n\t\t\tthis.scope = new Scope({\n\t\t\t\tparent: scope,\n\t\t\t\tisBlockScope: true,\n\t\t\t\tisLexicalBoundary: false\n\t\t\t});\n\t\t}\n\n\t\tStatement$$1.prototype.initialise.call( this, this.scope );\n\t\tassignToForLoopLeft( this.left, this.scope, STRING );\n\t};\n\n\treturn ForInStatement;\n}(Statement));\n\nvar ForOfStatement = (function (Statement$$1) {\n\tfunction ForOfStatement () {\n\t\tStatement$$1.apply(this, arguments);\n\t}\n\n\tif ( Statement$$1 ) ForOfStatement.__proto__ = Statement$$1;\n\tForOfStatement.prototype = Object.create( Statement$$1 && Statement$$1.prototype );\n\tForOfStatement.prototype.constructor = ForOfStatement;\n\n\tForOfStatement.prototype.initialise = function initialise ( scope ) {\n\t\tif ( this.body.type === 'BlockStatement' ) {\n\t\t\tthis.body.createScope( scope );\n\t\t\tthis.scope = this.body.scope;\n\t\t} else {\n\t\t\tthis.scope = new Scope({\n\t\t\t\tparent: scope,\n\t\t\t\tisBlockScope: true,\n\t\t\t\tisLexicalBoundary: false\n\t\t\t});\n\t\t}\n\n\t\tStatement$$1.prototype.initialise.call( this, this.scope );\n\t\tassignToForLoopLeft( this.left, this.scope, UNKNOWN );\n\t};\n\n\treturn ForOfStatement;\n}(Statement));\n\nvar FunctionDeclaration = (function (Node) {\n\tfunction FunctionDeclaration () {\n\t\tNode.apply(this, arguments);\n\t}\n\n\tif ( Node ) FunctionDeclaration.__proto__ = Node;\n\tFunctionDeclaration.prototype = Object.create( Node && Node.prototype );\n\tFunctionDeclaration.prototype.constructor = FunctionDeclaration;\n\n\tFunctionDeclaration.prototype.activate = function activate () {\n\t\tif ( this.activated ) return;\n\t\tthis.activated = true;\n\n\t\tvar scope = this.body.scope;\n\t\tthis.params.forEach( function (param) { return param.run( scope ); } ); // in case of assignment patterns\n\t\tthis.body.run();\n\t};\n\n\tFunctionDeclaration.prototype.addReference = function addReference () {\n\t\t/* noop? */\n\t};\n\n\tFunctionDeclaration.prototype.bind = function bind ( scope ) {\n\t\tvar this$1 = this;\n\n\t\tthis.id.bind( scope );\n\t\tthis.params.forEach( function (param) { return param.bind( this$1.body.scope ); } );\n\t\tthis.body.bind( scope );\n\t};\n\n\tFunctionDeclaration.prototype.gatherPossibleValues = function gatherPossibleValues ( values ) {\n\t\tvalues.add( this );\n\t};\n\n\tFunctionDeclaration.prototype.getName = function getName () {\n\t\treturn this.name;\n\t};\n\n\tFunctionDeclaration.prototype.hasEffects = function hasEffects () {\n\t\treturn false;\n\t};\n\n\tFunctionDeclaration.prototype.initialise = function initialise ( scope ) {\n\t\tvar this$1 = this;\n\n\t\tthis.name = this.id.name; // may be overridden by bundle.deconflict\n\t\tscope.addDeclaration( this.name, this, false, false );\n\n\t\tthis.body.createScope( scope );\n\n\t\tthis.id.initialise( scope );\n\t\tthis.params.forEach( function (param) { return param.initialise( this$1.body.scope ); } );\n\t\tthis.body.initialise();\n\t};\n\n\tFunctionDeclaration.prototype.render = function render ( code, es ) {\n\t\tif ( !this.module.bundle.treeshake || this.activated ) {\n\t\t\tNode.prototype.render.call( this, code, es );\n\t\t} else {\n\t\t\tcode.remove( this.leadingCommentStart || this.start, this.next || this.end );\n\t\t}\n\t};\n\n\tFunctionDeclaration.prototype.run = function run ( scope ) {\n\t\tif ( this.parent.type === 'ExportDefaultDeclaration' ) {\n\t\t\tNode.prototype.run.call( this, scope );\n\t\t}\n\t};\n\n\treturn FunctionDeclaration;\n}(Node$1));\n\nvar FunctionExpression = (function (Node) {\n\tfunction FunctionExpression () {\n\t\tNode.apply(this, arguments);\n\t}\n\n\tif ( Node ) FunctionExpression.__proto__ = Node;\n\tFunctionExpression.prototype = Object.create( Node && Node.prototype );\n\tFunctionExpression.prototype.constructor = FunctionExpression;\n\n\tFunctionExpression.prototype.activate = function activate () {\n\t\tif ( this.activated ) return;\n\t\tthis.activated = true;\n\n\t\tvar scope = this.body.scope;\n\t\tthis.params.forEach( function (param) { return param.run( scope ); } ); // in case of assignment patterns\n\t\tthis.body.run();\n\t};\n\n\tFunctionExpression.prototype.addReference = function addReference () {\n\t\t/* noop? */\n\t};\n\n\tFunctionExpression.prototype.bind = function bind () {\n\t\tvar this$1 = this;\n\n\t\tif ( this.id ) this.id.bind( this.body.scope );\n\t\tthis.params.forEach( function (param) { return param.bind( this$1.body.scope ); } );\n\t\tthis.body.bind();\n\t};\n\n\tFunctionExpression.prototype.getName = function getName () {\n\t\treturn this.name;\n\t};\n\n\tFunctionExpression.prototype.hasEffects = function hasEffects () {\n\t\treturn false;\n\t};\n\n\tFunctionExpression.prototype.initialise = function initialise ( scope ) {\n\t\tvar this$1 = this;\n\n\t\tthis.name = this.id && this.id.name; // may be overridden by bundle.deconflict\n\t\tthis.body.createScope( scope );\n\n\t\tif ( this.id ) {\n\t\t\tthis.id.initialise( this.body.scope );\n\t\t\tthis.body.scope.addDeclaration( this.id.name, this, false, false );\n\t\t}\n\n\t\tthis.params.forEach( function (param) { return param.initialise( this$1.body.scope ); } );\n\t\tthis.body.initialise();\n\t};\n\n\treturn FunctionExpression;\n}(Node$1));\n\nfunction isAssignmentPatternLhs ( node, parent ) {\n\t// special case: `({ foo = 42 }) => {...}`\n\t// `foo` actually has two different parents, the Property of the\n\t// ObjectPattern, and the AssignmentPattern. In one case it's a\n\t// reference, in one case it's not, because it's shorthand for\n\t// `({ foo: foo = 42 }) => {...}`. But unlike a regular shorthand\n\t// property, the `foo` node appears at different levels of the tree\n\treturn (\n\t\tparent.type === 'Property' &&\n\t\tparent.shorthand &&\n\t\tparent.value.type === 'AssignmentPattern' &&\n\t\tparent.value.left === node\n\t);\n}\n\nvar Identifier = (function (Node) {\n\tfunction Identifier () {\n\t\tNode.apply(this, arguments);\n\t}\n\n\tif ( Node ) Identifier.__proto__ = Node;\n\tIdentifier.prototype = Object.create( Node && Node.prototype );\n\tIdentifier.prototype.constructor = Identifier;\n\n\tIdentifier.prototype.bind = function bind ( scope ) {\n\t\tif ( isReference( this, this.parent ) || isAssignmentPatternLhs( this, this.parent ) ) {\n\t\t\tthis.declaration = scope.findDeclaration( this.name );\n\t\t\tthis.declaration.addReference( this ); // TODO necessary?\n\t\t}\n\t};\n\n\tIdentifier.prototype.gatherPossibleValues = function gatherPossibleValues ( values ) {\n\t\tif ( isReference( this, this.parent ) ) {\n\t\t\tvalues.add( this );\n\t\t}\n\t};\n\n\tIdentifier.prototype.render = function render ( code, es ) {\n\t\tif ( this.declaration ) {\n\t\t\tvar name = this.declaration.getName( es );\n\t\t\tif ( name !== this.name ) {\n\t\t\t\tcode.overwrite( this.start, this.end, name, true );\n\n\t\t\t\t// special case\n\t\t\t\tif ( this.parent.type === 'Property' && this.parent.shorthand ) {\n\t\t\t\t\tcode.insertLeft( this.start, ((this.name) + \": \") );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n\n\tIdentifier.prototype.run = function run () {\n\t\tif ( this.declaration ) this.declaration.activate();\n\t};\n\n\treturn Identifier;\n}(Node$1));\n\n// Statement types which may contain if-statements as direct children.\nvar statementsWithIfStatements = new Set([\n\t'DoWhileStatement',\n\t'ForInStatement',\n\t'ForOfStatement',\n\t'ForStatement',\n\t'IfStatement',\n\t'WhileStatement'\n]);\n\nfunction handleVarDeclarations ( node, scope ) {\n\tvar hoistedVars = [];\n\n\tfunction visit ( node ) {\n\t\tif ( node.type === 'VariableDeclaration' && node.kind === 'var' ) {\n\t\t\tnode.declarations.forEach( function (declarator) {\n\t\t\t\tdeclarator.init = null;\n\t\t\t\tdeclarator.initialise( scope );\n\n\t\t\t\textractNames( declarator.id ).forEach( function (name) {\n\t\t\t\t\tif ( !~hoistedVars.indexOf( name ) ) hoistedVars.push( name );\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\n\t\telse if ( !/Function/.test( node.type ) ) {\n\t\t\tnode.eachChild( visit );\n\t\t}\n\t}\n\n\tvisit( node );\n\n\treturn hoistedVars;\n}\n\n// TODO DRY this out\nvar IfStatement = (function (Statement$$1) {\n\tfunction IfStatement () {\n\t\tStatement$$1.apply(this, arguments);\n\t}\n\n\tif ( Statement$$1 ) IfStatement.__proto__ = Statement$$1;\n\tIfStatement.prototype = Object.create( Statement$$1 && Statement$$1.prototype );\n\tIfStatement.prototype.constructor = IfStatement;\n\n\tIfStatement.prototype.initialise = function initialise ( scope ) {\n\t\tthis.scope = scope;\n\t\tthis.testValue = this.test.getValue();\n\n\t\tif ( this.module.bundle.treeshake ) {\n\t\t\tif ( this.testValue === UNKNOWN ) {\n\t\t\t\tStatement$$1.prototype.initialise.call( this, scope );\n\t\t\t}\n\n\t\t\telse if ( this.testValue ) {\n\t\t\t\tthis.consequent.initialise( scope );\n\n\t\t\t\tif ( this.alternate ) this.hoistedVars = handleVarDeclarations( this.alternate, scope );\n\t\t\t\tthis.alternate = null;\n\t\t\t}\n\n\t\t\telse {\n\t\t\t\tif ( this.alternate ) this.alternate.initialise( scope );\n\n\t\t\t\tthis.hoistedVars = handleVarDeclarations( this.consequent, scope );\n\t\t\t\tthis.consequent = null;\n\t\t\t}\n\t\t}\n\n\t\telse {\n\t\t\tStatement$$1.prototype.initialise.call( this, scope );\n\t\t}\n\t};\n\n\tIfStatement.prototype.render = function render ( code, es ) {\n\t\tvar this$1 = this;\n\n\t\tif ( this.module.bundle.treeshake ) {\n\t\t\tif ( this.testValue === UNKNOWN ) {\n\t\t\t\tStatement$$1.prototype.render.call( this, code, es );\n\t\t\t}\n\n\t\t\telse {\n\t\t\t\tcode.overwrite( this.test.start, this.test.end, JSON.stringify( this.testValue ) );\n\n\t\t\t\t// TODO if no block-scoped declarations, remove enclosing\n\t\t\t\t// curlies and dedent block (if there is a block)\n\n\t\t\t\tif ( this.hoistedVars ) {\n\t\t\t\t\tvar names = this.hoistedVars\n\t\t\t\t\t\t.map( function (name) {\n\t\t\t\t\t\t\tvar declaration = this$1.scope.findDeclaration( name );\n\t\t\t\t\t\t\treturn declaration.activated ? declaration.getName() : null;\n\t\t\t\t\t\t})\n\t\t\t\t\t\t.filter( Boolean );\n\n\t\t\t\t\tif ( names.length > 0 ) {\n\t\t\t\t\t\tcode.insertLeft( this.start, (\"var \" + (names.join( ', ' )) + \";\\n\\n\") );\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif ( this.testValue ) {\n\t\t\t\t\tcode.remove( this.start, this.consequent.start );\n\t\t\t\t\tcode.remove( this.consequent.end, this.end );\n\t\t\t\t\tthis.consequent.render( code, es );\n\t\t\t\t}\n\n\t\t\t\telse {\n\t\t\t\t\tcode.remove( this.start, this.alternate ? this.alternate.start : this.next || this.end );\n\n\t\t\t\t\tif ( this.alternate ) {\n\t\t\t\t\t\tthis.alternate.render( code, es );\n\t\t\t\t\t}\n\n\t\t\t\t\telse if ( statementsWithIfStatements.has( this.parent.type ) ) {\n\t\t\t\t\t\tcode.insertRight( this.start, '{}' );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\telse {\n\t\t\tStatement$$1.prototype.render.call( this, code, es );\n\t\t}\n\t};\n\n\treturn IfStatement;\n}(Statement));\n\nvar ImportDeclaration = (function (Node) {\n\tfunction ImportDeclaration () {\n\t\tNode.apply(this, arguments);\n\t}\n\n\tif ( Node ) ImportDeclaration.__proto__ = Node;\n\tImportDeclaration.prototype = Object.create( Node && Node.prototype );\n\tImportDeclaration.prototype.constructor = ImportDeclaration;\n\n\tImportDeclaration.prototype.bind = function bind () {\n\t\t// noop\n\t\t// TODO do the inter-module binding setup here?\n\t};\n\n\tImportDeclaration.prototype.initialise = function initialise () {\n\t\tthis.isImportDeclaration = true;\n\t};\n\n\tImportDeclaration.prototype.render = function render ( code ) {\n\t\tcode.remove( this.start, this.next || this.end );\n\t};\n\n\treturn ImportDeclaration;\n}(Node$1));\n\nvar Literal = (function (Node) {\n\tfunction Literal () {\n\t\tNode.apply(this, arguments);\n\t}\n\n\tif ( Node ) Literal.__proto__ = Node;\n\tLiteral.prototype = Object.create( Node && Node.prototype );\n\tLiteral.prototype.constructor = Literal;\n\n\tLiteral.prototype.getValue = function getValue () {\n\t\treturn this.value;\n\t};\n\n\tLiteral.prototype.gatherPossibleValues = function gatherPossibleValues ( values ) {\n\t\tvalues.add( this );\n\t};\n\n\tLiteral.prototype.render = function render ( code ) {\n\t\tif ( typeof this.value === 'string' ) {\n\t\t\tcode.indentExclusionRanges.push([ this.start + 1, this.end - 1 ]);\n\t\t}\n\t};\n\n\treturn Literal;\n}(Node$1));\n\nvar operators$1 = {\n\t'&&': function ( left, right ) { return left && right; },\n\t'||': function ( left, right ) { return left || right; }\n};\n\nvar LogicalExpression = (function (Node) {\n\tfunction LogicalExpression () {\n\t\tNode.apply(this, arguments);\n\t}\n\n\tif ( Node ) LogicalExpression.__proto__ = Node;\n\tLogicalExpression.prototype = Object.create( Node && Node.prototype );\n\tLogicalExpression.prototype.constructor = LogicalExpression;\n\n\tLogicalExpression.prototype.getValue = function getValue () {\n\t\tvar leftValue = this.left.getValue();\n\t\tif ( leftValue === UNKNOWN ) return UNKNOWN;\n\n\t\tvar rightValue = this.right.getValue();\n\t\tif ( rightValue === UNKNOWN ) return UNKNOWN;\n\n\t\treturn operators$1[ this.operator ]( leftValue, rightValue );\n\t};\n\n\treturn LogicalExpression;\n}(Node$1));\n\nvar validProp = /^[a-zA-Z_$][a-zA-Z_$0-9]*$/;\n\nvar Keypath = function Keypath ( node ) {\n\tvar this$1 = this;\n\n\tthis.parts = [];\n\n\twhile ( node.type === 'MemberExpression' ) {\n\t\tvar prop = node.property;\n\n\t\tif ( node.computed  ) {\n\t\t\tif ( prop.type !== 'Literal' || typeof prop.value !== 'string' || !validProp.test( prop.value ) ) {\n\t\t\t\tthis$1.computed = true;\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\tthis$1.parts.unshift( prop );\n\t\tnode = node.object;\n\t}\n\n\tthis.root = node;\n};\n\nvar MemberExpression = (function (Node) {\n\tfunction MemberExpression () {\n\t\tNode.apply(this, arguments);\n\t}\n\n\tif ( Node ) MemberExpression.__proto__ = Node;\n\tMemberExpression.prototype = Object.create( Node && Node.prototype );\n\tMemberExpression.prototype.constructor = MemberExpression;\n\n\tMemberExpression.prototype.bind = function bind ( scope ) {\n\t\tvar this$1 = this;\n\n\t\t// if this resolves to a namespaced declaration, prepare\n\t\t// to replace it\n\t\t// TODO this code is a bit inefficient\n\t\tvar keypath = new Keypath( this );\n\n\t\tif ( !keypath.computed && keypath.root.type === 'Identifier' ) {\n\t\t\tvar declaration = scope.findDeclaration( keypath.root.name );\n\n\t\t\twhile ( declaration.isNamespace && keypath.parts.length ) {\n\t\t\t\tvar exporterId = declaration.module.id;\n\n\t\t\t\tvar part = keypath.parts[0];\n\t\t\t\tdeclaration = declaration.module.traceExport( part.name || part.value );\n\n\t\t\t\tif ( !declaration ) {\n\t\t\t\t\tthis$1.module.warn({\n\t\t\t\t\t\tcode: 'MISSING_EXPORT',\n\t\t\t\t\t\tmessage: (\"'\" + (part.name || part.value) + \"' is not exported by '\" + (relativeId( exporterId )) + \"'\"),\n\t\t\t\t\t\turl: \"https://github.com/rollup/rollup/wiki/Troubleshooting#name-is-not-exported-by-module\"\n\t\t\t\t\t}, part.start );\n\t\t\t\t\tthis$1.replacement = 'undefined';\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tkeypath.parts.shift();\n\t\t\t}\n\n\t\t\tif ( keypath.parts.length ) {\n\t\t\t\tNode.prototype.bind.call( this, scope );\n\t\t\t\treturn; // not a namespaced declaration\n\t\t\t}\n\n\t\t\tthis.declaration = declaration;\n\n\t\t\tif ( declaration.isExternal ) {\n\t\t\t\tdeclaration.module.suggestName( keypath.root.name );\n\t\t\t}\n\t\t}\n\n\t\telse {\n\t\t\tNode.prototype.bind.call( this, scope );\n\t\t}\n\t};\n\n\tMemberExpression.prototype.gatherPossibleValues = function gatherPossibleValues ( values ) {\n\t\tvalues.add( UNKNOWN ); // TODO\n\t};\n\n\tMemberExpression.prototype.render = function render ( code, es ) {\n\t\tif ( this.declaration ) {\n\t\t\tvar name = this.declaration.getName( es );\n\t\t\tif ( name !== this.name ) code.overwrite( this.start, this.end, name, true );\n\t\t}\n\n\t\telse if ( this.replacement ) {\n\t\t\tcode.overwrite( this.start, this.end, this.replacement, true );\n\t\t}\n\n\t\tNode.prototype.render.call( this, code, es );\n\t};\n\n\tMemberExpression.prototype.run = function run ( scope ) {\n\t\tif ( this.declaration ) this.declaration.activate();\n\t\tNode.prototype.run.call( this, scope );\n\t};\n\n\treturn MemberExpression;\n}(Node$1));\n\nvar NewExpression = (function (Node) {\n\tfunction NewExpression () {\n\t\tNode.apply(this, arguments);\n\t}\n\n\tif ( Node ) NewExpression.__proto__ = Node;\n\tNewExpression.prototype = Object.create( Node && Node.prototype );\n\tNewExpression.prototype.constructor = NewExpression;\n\n\tNewExpression.prototype.hasEffects = function hasEffects ( scope ) {\n\t\treturn callHasEffects( scope, this.callee, true );\n\t};\n\n\treturn NewExpression;\n}(Node$1));\n\nvar ObjectExpression = (function (Node) {\n\tfunction ObjectExpression () {\n\t\tNode.apply(this, arguments);\n\t}\n\n\tif ( Node ) ObjectExpression.__proto__ = Node;\n\tObjectExpression.prototype = Object.create( Node && Node.prototype );\n\tObjectExpression.prototype.constructor = ObjectExpression;\n\n\tObjectExpression.prototype.gatherPossibleValues = function gatherPossibleValues ( values ) {\n\t\tvalues.add( OBJECT );\n\t};\n\n\treturn ObjectExpression;\n}(Node$1));\n\nvar ReturnStatement = (function (Node) {\n\tfunction ReturnStatement () {\n\t\tNode.apply(this, arguments);\n\t}if ( Node ) ReturnStatement.__proto__ = Node;\n\tReturnStatement.prototype = Object.create( Node && Node.prototype );\n\tReturnStatement.prototype.constructor = ReturnStatement;\n\n\t\n\n\treturn ReturnStatement;\n}(Node$1));\n\nvar TemplateLiteral = (function (Node) {\n\tfunction TemplateLiteral () {\n\t\tNode.apply(this, arguments);\n\t}\n\n\tif ( Node ) TemplateLiteral.__proto__ = Node;\n\tTemplateLiteral.prototype = Object.create( Node && Node.prototype );\n\tTemplateLiteral.prototype.constructor = TemplateLiteral;\n\n\tTemplateLiteral.prototype.render = function render ( code, es ) {\n\t\tcode.indentExclusionRanges.push([ this.start, this.end ]);\n\t\tNode.prototype.render.call( this, code, es );\n\t};\n\n\treturn TemplateLiteral;\n}(Node$1));\n\nvar ThisExpression = (function (Node) {\n\tfunction ThisExpression () {\n\t\tNode.apply(this, arguments);\n\t}\n\n\tif ( Node ) ThisExpression.__proto__ = Node;\n\tThisExpression.prototype = Object.create( Node && Node.prototype );\n\tThisExpression.prototype.constructor = ThisExpression;\n\n\tThisExpression.prototype.initialise = function initialise ( scope ) {\n\t\tvar lexicalBoundary = scope.findLexicalBoundary();\n\n\t\tif ( lexicalBoundary.isModuleScope ) {\n\t\t\tthis.alias = this.module.context;\n\t\t\tif ( this.alias === 'undefined' ) {\n\t\t\t\tthis.module.warn({\n\t\t\t\t\tcode: 'THIS_IS_UNDEFINED',\n\t\t\t\t\tmessage: \"The 'this' keyword is equivalent to 'undefined' at the top level of an ES module, and has been rewritten\",\n\t\t\t\t\turl: \"https://github.com/rollup/rollup/wiki/Troubleshooting#this-is-undefined\"\n\t\t\t\t}, this.start );\n\t\t\t}\n\t\t}\n\t};\n\n\tThisExpression.prototype.render = function render ( code ) {\n\t\tif ( this.alias ) {\n\t\t\tcode.overwrite( this.start, this.end, this.alias, true );\n\t\t}\n\t};\n\n\treturn ThisExpression;\n}(Node$1));\n\nvar ThrowStatement = (function (Node) {\n\tfunction ThrowStatement () {\n\t\tNode.apply(this, arguments);\n\t}\n\n\tif ( Node ) ThrowStatement.__proto__ = Node;\n\tThrowStatement.prototype = Object.create( Node && Node.prototype );\n\tThrowStatement.prototype.constructor = ThrowStatement;\n\n\tThrowStatement.prototype.hasEffects = function hasEffects () {\n\t\treturn true;\n\t};\n\n\treturn ThrowStatement;\n}(Node$1));\n\nvar operators$2 = {\n\t\"-\": function (value) { return -value; },\n\t\"+\": function (value) { return +value; },\n\t\"!\": function (value) { return !value; },\n\t\"~\": function (value) { return ~value; },\n\ttypeof: function (value) { return typeof value; },\n\tvoid: function () { return undefined; },\n\tdelete: function () { return UNKNOWN; }\n};\n\nvar UnaryExpression = (function (Node) {\n\tfunction UnaryExpression () {\n\t\tNode.apply(this, arguments);\n\t}\n\n\tif ( Node ) UnaryExpression.__proto__ = Node;\n\tUnaryExpression.prototype = Object.create( Node && Node.prototype );\n\tUnaryExpression.prototype.constructor = UnaryExpression;\n\n\tUnaryExpression.prototype.bind = function bind ( scope ) {\n\t\tif ( this.value === UNKNOWN ) Node.prototype.bind.call( this, scope );\n\t};\n\n\tUnaryExpression.prototype.getValue = function getValue () {\n\t\tvar argumentValue = this.argument.getValue();\n\t\tif ( argumentValue === UNKNOWN ) return UNKNOWN;\n\n\t\treturn operators$2[ this.operator ]( argumentValue );\n\t};\n\n\tUnaryExpression.prototype.hasEffects = function hasEffects ( scope ) {\n\t\treturn this.operator === 'delete' || this.argument.hasEffects( scope );\n\t};\n\n\tUnaryExpression.prototype.initialise = function initialise ( scope ) {\n\t\tthis.value = this.getValue();\n\t\tif ( this.value === UNKNOWN ) Node.prototype.initialise.call( this, scope );\n\t};\n\n\treturn UnaryExpression;\n}(Node$1));\n\nvar UpdateExpression = (function (Node) {\n\tfunction UpdateExpression () {\n\t\tNode.apply(this, arguments);\n\t}\n\n\tif ( Node ) UpdateExpression.__proto__ = Node;\n\tUpdateExpression.prototype = Object.create( Node && Node.prototype );\n\tUpdateExpression.prototype.constructor = UpdateExpression;\n\n\tUpdateExpression.prototype.bind = function bind ( scope ) {\n\t\tvar subject = this.argument;\n\n\t\tthis.subject = subject;\n\t\tdisallowIllegalReassignment( scope, this.argument );\n\n\t\tif ( subject.type === 'Identifier' ) {\n\t\t\tvar declaration = scope.findDeclaration( subject.name );\n\t\t\tdeclaration.isReassigned = true;\n\n\t\t\tif ( declaration.possibleValues ) {\n\t\t\t\tdeclaration.possibleValues.add( NUMBER );\n\t\t\t}\n\t\t}\n\n\t\tNode.prototype.bind.call( this, scope );\n\t};\n\n\tUpdateExpression.prototype.hasEffects = function hasEffects ( scope ) {\n\t\treturn isUsedByBundle( scope, this.subject );\n\t};\n\n\tUpdateExpression.prototype.initialise = function initialise ( scope ) {\n\t\tthis.scope = scope;\n\n\t\tthis.module.bundle.dependentExpressions.push( this );\n\t\tNode.prototype.initialise.call( this, scope );\n\t};\n\n\tUpdateExpression.prototype.isUsedByBundle = function isUsedByBundle$1 () {\n\t\treturn isUsedByBundle( this.scope, this.subject );\n\t};\n\n\treturn UpdateExpression;\n}(Node$1));\n\nvar DeclaratorProxy = function DeclaratorProxy ( name, declarator, isTopLevel, init ) {\n\tthis.name = name;\n\tthis.declarator = declarator;\n\n\tthis.activated = false;\n\tthis.isReassigned = false;\n\tthis.exportName = null;\n\n\tthis.duplicates = [];\n\tthis.possibleValues = new Set( init ? [ init ] : null );\n};\n\nDeclaratorProxy.prototype.activate = function activate () {\n\tthis.activated = true;\n\tthis.declarator.activate();\n\tthis.duplicates.forEach( function (dupe) { return dupe.activate(); } );\n};\n\nDeclaratorProxy.prototype.addReference = function addReference () {\n\t/* noop? */\n};\n\nDeclaratorProxy.prototype.gatherPossibleValues = function gatherPossibleValues ( values ) {\n\tthis.possibleValues.forEach( function (value) { return values.add( value ); } );\n};\n\nDeclaratorProxy.prototype.getName = function getName ( es ) {\n\t// TODO desctructuring...\n\tif ( es ) return this.name;\n\tif ( !this.isReassigned || !this.exportName ) return this.name;\n\n\treturn (\"exports.\" + (this.exportName));\n};\n\nDeclaratorProxy.prototype.toString = function toString () {\n\treturn this.name;\n};\n\nvar VariableDeclarator = (function (Node) {\n\tfunction VariableDeclarator () {\n\t\tNode.apply(this, arguments);\n\t}\n\n\tif ( Node ) VariableDeclarator.__proto__ = Node;\n\tVariableDeclarator.prototype = Object.create( Node && Node.prototype );\n\tVariableDeclarator.prototype.constructor = VariableDeclarator;\n\n\tVariableDeclarator.prototype.activate = function activate () {\n\t\tif ( this.activated ) return;\n\t\tthis.activated = true;\n\n\t\tthis.run( this.findScope() );\n\n\t\t// if declaration is inside a block, ensure that the block\n\t\t// is marked for inclusion\n\t\tif ( this.parent.kind === 'var' ) {\n\t\t\tvar node = this.parent.parent;\n\t\t\twhile ( /Statement/.test( node.type ) ) {\n\t\t\t\tnode.shouldInclude = true;\n\t\t\t\tnode = node.parent;\n\t\t\t}\n\t\t}\n\t};\n\n\tVariableDeclarator.prototype.hasEffects = function hasEffects ( scope ) {\n\t\treturn this.init && this.init.hasEffects( scope );\n\t};\n\n\tVariableDeclarator.prototype.initialise = function initialise ( scope ) {\n\t\tvar this$1 = this;\n\n\t\tthis.proxies = new Map();\n\n\t\tvar lexicalBoundary = scope.findLexicalBoundary();\n\n\t\tvar init = this.init ?\n\t\t\t( this.id.type === 'Identifier' ? this.init : UNKNOWN ) : // TODO maybe UNKNOWN is unnecessary\n\t\t\tnull;\n\n\t\textractNames( this.id ).forEach( function (name) {\n\t\t\tvar proxy = new DeclaratorProxy( name, this$1, lexicalBoundary.isModuleScope, init );\n\n\t\t\tthis$1.proxies.set( name, proxy );\n\t\t\tscope.addDeclaration( name, proxy, this$1.parent.kind === 'var' );\n\t\t});\n\n\t\tNode.prototype.initialise.call( this, scope );\n\t};\n\n\tVariableDeclarator.prototype.render = function render ( code, es ) {\n\t\tvar this$1 = this;\n\n\t\textractNames( this.id ).forEach( function (name) {\n\t\t\tvar declaration = this$1.proxies.get( name );\n\n\t\t\tif ( !es && declaration.exportName && declaration.isReassigned ) {\n\t\t\t\tif ( this$1.init ) {\n\t\t\t\t\tcode.overwrite( this$1.start, this$1.id.end, declaration.getName( es ) );\n\t\t\t\t} else if ( this$1.module.bundle.treeshake ) {\n\t\t\t\t\tcode.remove( this$1.start, this$1.end );\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tNode.prototype.render.call( this, code, es );\n\t};\n\n\treturn VariableDeclarator;\n}(Node$1));\n\nfunction getSeparator ( code, start ) {\n\tvar c = start;\n\n\twhile ( c > 0 && code[ c - 1 ] !== '\\n' ) {\n\t\tc -= 1;\n\t\tif ( code[c] === ';' || code[c] === '{' ) return '; ';\n\t}\n\n\tvar lineStart = code.slice( c, start ).match( /^\\s*/ )[0];\n\n\treturn (\";\\n\" + lineStart);\n}\n\nvar forStatement = /^For(?:Of|In)?Statement/;\n\nvar VariableDeclaration = (function (Node) {\n\tfunction VariableDeclaration () {\n\t\tNode.apply(this, arguments);\n\t}\n\n\tif ( Node ) VariableDeclaration.__proto__ = Node;\n\tVariableDeclaration.prototype = Object.create( Node && Node.prototype );\n\tVariableDeclaration.prototype.constructor = VariableDeclaration;\n\n\tVariableDeclaration.prototype.initialise = function initialise ( scope ) {\n\t\tthis.scope = scope;\n\t\tNode.prototype.initialise.call( this, scope );\n\t};\n\n\tVariableDeclaration.prototype.render = function render ( code, es ) {\n\t\tvar this$1 = this;\n\n\t\tvar treeshake = this.module.bundle.treeshake;\n\n\t\tvar shouldSeparate = false;\n\t\tvar separator;\n\n\t\tif ( this.scope.isModuleScope && !forStatement.test( this.parent.type ) ) {\n\t\t\tshouldSeparate = true;\n\t\t\tseparator = getSeparator( this.module.code, this.start );\n\t\t}\n\n\t\tvar c = this.start;\n\t\tvar empty = true;\n\n\t\tvar loop = function ( i ) {\n\t\t\tvar declarator = this$1.declarations[i];\n\n\t\t\tvar prefix = empty ? '' : separator; // TODO indentation\n\n\t\t\tif ( declarator.id.type === 'Identifier' ) {\n\t\t\t\tvar proxy = declarator.proxies.get( declarator.id.name );\n\t\t\t\tvar isExportedAndReassigned = !es && proxy.exportName && proxy.isReassigned;\n\n\t\t\t\tif ( isExportedAndReassigned ) {\n\t\t\t\t\tif ( declarator.init ) {\n\t\t\t\t\t\tif ( shouldSeparate ) code.overwrite( c, declarator.start, prefix );\n\t\t\t\t\t\tc = declarator.end;\n\t\t\t\t\t\tempty = false;\n\t\t\t\t\t}\n\t\t\t\t} else if ( !treeshake || proxy.activated ) {\n\t\t\t\t\tif ( shouldSeparate ) code.overwrite( c, declarator.start, (\"\" + prefix + (this$1.kind) + \" \") ); // TODO indentation\n\t\t\t\t\tc = declarator.end;\n\t\t\t\t\tempty = false;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\telse {\n\t\t\t\tvar exportAssignments = [];\n\t\t\t\tvar activated = false;\n\n\t\t\t\textractNames( declarator.id ).forEach( function (name) {\n\t\t\t\t\tvar proxy = declarator.proxies.get( name );\n\t\t\t\t\tvar isExportedAndReassigned = !es && proxy.exportName && proxy.isReassigned;\n\n\t\t\t\t\tif ( isExportedAndReassigned ) {\n\t\t\t\t\t\t// code.overwrite( c, declarator.start, prefix );\n\t\t\t\t\t\t// c = declarator.end;\n\t\t\t\t\t\t// empty = false;\n\t\t\t\t\t\texportAssignments.push( 'TODO' );\n\t\t\t\t\t} else if ( declarator.activated ) {\n\t\t\t\t\t\tactivated = true;\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\tif ( !treeshake || activated ) {\n\t\t\t\t\tif ( shouldSeparate ) code.overwrite( c, declarator.start, (\"\" + prefix + (this$1.kind) + \" \") ); // TODO indentation\n\t\t\t\t\tc = declarator.end;\n\t\t\t\t\tempty = false;\n\t\t\t\t}\n\n\t\t\t\tif ( exportAssignments.length ) {\n\t\t\t\t\tthrow new Error( 'TODO' );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tdeclarator.render( code, es );\n\t\t};\n\n\t\tfor ( var i = 0; i < this.declarations.length; i += 1 ) loop( i );\n\n\t\tif ( treeshake && empty ) {\n\t\t\tcode.remove( this.leadingCommentStart || this.start, this.next || this.end );\n\t\t} else {\n\t\t\t// always include a semi-colon (https://github.com/rollup/rollup/pull/1013),\n\t\t\t// unless it's a var declaration in a loop head\n\t\t\tvar needsSemicolon = !forStatement.test( this.parent.type );\n\n\t\t\tif ( this.end > c ) {\n\t\t\t\tcode.overwrite( c, this.end, needsSemicolon ? ';' : '' );\n\t\t\t} else if ( needsSemicolon  ) {\n\t\t\t\tthis.insertSemicolon( code );\n\t\t\t}\n\t\t}\n\t};\n\n\treturn VariableDeclaration;\n}(Node$1));\n\nvar nodes = {\n\tArrayExpression: ArrayExpression,\n\tArrowFunctionExpression: ArrowFunctionExpression,\n\tAssignmentExpression: AssignmentExpression,\n\tBinaryExpression: BinaryExpression,\n\tBlockStatement: BlockStatement,\n\tCallExpression: CallExpression,\n\tClassDeclaration: ClassDeclaration,\n\tClassExpression: ClassExpression,\n\tConditionalExpression: ConditionalExpression,\n\tDoWhileStatement: Statement,\n\tEmptyStatement: EmptyStatement,\n\tExportAllDeclaration: ExportAllDeclaration,\n\tExportDefaultDeclaration: ExportDefaultDeclaration,\n\tExportNamedDeclaration: ExportNamedDeclaration,\n\tExpressionStatement: ExpressionStatement,\n\tForStatement: ForStatement,\n\tForInStatement: ForInStatement,\n\tForOfStatement: ForOfStatement,\n\tFunctionDeclaration: FunctionDeclaration,\n\tFunctionExpression: FunctionExpression,\n\tIdentifier: Identifier,\n\tIfStatement: IfStatement,\n\tImportDeclaration: ImportDeclaration,\n\tLiteral: Literal,\n\tLogicalExpression: LogicalExpression,\n\tMemberExpression: MemberExpression,\n\tNewExpression: NewExpression,\n\tObjectExpression: ObjectExpression,\n\tReturnStatement: ReturnStatement,\n\tSwitchStatement: Statement,\n\tTemplateLiteral: TemplateLiteral,\n\tThisExpression: ThisExpression,\n\tThrowStatement: ThrowStatement,\n\tTryStatement: Statement,\n\tUnaryExpression: UnaryExpression,\n\tUpdateExpression: UpdateExpression,\n\tVariableDeclarator: VariableDeclarator,\n\tVariableDeclaration: VariableDeclaration,\n\tWhileStatement: Statement\n};\n\nvar keys$1 = {\n\tProgram: [ 'body' ],\n\tLiteral: []\n};\n\nvar newline = /\\n/;\n\nfunction enhance ( ast, module, comments ) {\n\tenhanceNode( ast, module, module, module.magicString );\n\n\tvar comment = comments.shift();\n\n\tfor ( var node of ast.body ) {\n\t\tif ( comment && ( comment.start < node.start ) ) {\n\t\t\tnode.leadingCommentStart = comment.start;\n\t\t}\n\n\t\twhile ( comment && comment.end < node.end ) comment = comments.shift();\n\n\t\t// if the next comment is on the same line as the end of the node,\n\t\t// treat is as a trailing comment\n\t\tif ( comment && !newline.test( module.code.slice( node.end, comment.start ) ) ) {\n\t\t\tnode.trailingCommentEnd = comment.end; // TODO is node.trailingCommentEnd used anywhere?\n\t\t\tcomment = comments.shift();\n\t\t}\n\n\t\tnode.initialise( module.scope );\n\t}\n}\n\nfunction enhanceNode ( raw, parent, module, code ) {\n\tif ( !raw ) return;\n\n\tif ( 'length' in raw ) {\n\t\tfor ( var i = 0; i < raw.length; i += 1 ) {\n\t\t\tenhanceNode( raw[i], parent, module, code );\n\t\t}\n\n\t\treturn;\n\t}\n\n\t// with e.g. shorthand properties, key and value are\n\t// the same node. We don't want to enhance an object twice\n\tif ( raw.__enhanced ) return;\n\traw.__enhanced = true;\n\n\tif ( !keys$1[ raw.type ] ) {\n\t\tkeys$1[ raw.type ] = Object.keys( raw ).filter( function (key) { return typeof raw[ key ] === 'object'; } );\n\t}\n\n\traw.parent = parent;\n\traw.module = module;\n\traw.keys = keys$1[ raw.type ];\n\n\tcode.addSourcemapLocation( raw.start );\n\tcode.addSourcemapLocation( raw.end );\n\n\tfor ( var key of keys$1[ raw.type ] ) {\n\t\tenhanceNode( raw[ key ], raw, module, code );\n\t}\n\n\tvar type = nodes[ raw.type ] || Node$1;\n\traw.__proto__ = type.prototype;\n}\n\nfunction clone ( node ) {\n\tif ( !node ) return node;\n\tif ( typeof node !== 'object' ) return node;\n\n\tif ( Array.isArray( node ) ) {\n\t\tvar cloned$1 = new Array( node.length );\n\t\tfor ( var i = 0; i < node.length; i += 1 ) cloned$1[i] = clone( node[i] );\n\t\treturn cloned$1;\n\t}\n\n\tvar cloned = {};\n\tfor ( var key in node ) {\n\t\tcloned[ key ] = clone( node[ key ] );\n\t}\n\n\treturn cloned;\n}\n\nvar ModuleScope = (function (Scope$$1) {\n\tfunction ModuleScope ( module ) {\n\t\tScope$$1.call(this, {\n\t\t\tisBlockScope: false,\n\t\t\tisLexicalBoundary: true,\n\t\t\tisModuleScope: true,\n\t\t\tparent: module.bundle.scope\n\t\t});\n\n\t\tthis.module = module;\n\t}\n\n\tif ( Scope$$1 ) ModuleScope.__proto__ = Scope$$1;\n\tModuleScope.prototype = Object.create( Scope$$1 && Scope$$1.prototype );\n\tModuleScope.prototype.constructor = ModuleScope;\n\n\tModuleScope.prototype.deshadow = function deshadow ( names ) {\n\t\tvar this$1 = this;\n\n\t\tnames = new Set( names );\n\n\t\tforOwn( this.module.imports, function (specifier) {\n\t\t\tif ( specifier.module.isExternal ) return;\n\n\t\t\tspecifier.module.getExports().forEach( function (name) {\n\t\t\t\tnames.add( name );\n\t\t\t});\n\n\t\t\tif ( specifier.name !== '*' ) {\n\t\t\t\tvar declaration = specifier.module.traceExport( specifier.name );\n\t\t\t\tif ( !declaration ) {\n\t\t\t\t\tthis$1.module.warn({\n\t\t\t\t\t\tcode: 'NON_EXISTENT_EXPORT',\n\t\t\t\t\t\tmessage: (\"Non-existent export '\" + (specifier.name) + \"' is imported from \" + (relativeId( specifier.module.id )))\n\t\t\t\t\t}, specifier.specifier.start );\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tvar name = declaration.getName( true );\n\t\t\t\tif ( name !== specifier.name ) {\n\t\t\t\t\tnames.add( declaration.getName( true ) );\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tScope$$1.prototype.deshadow.call( this, names );\n\t};\n\n\tModuleScope.prototype.findDeclaration = function findDeclaration ( name ) {\n\t\tif ( this.declarations[ name ] ) {\n\t\t\treturn this.declarations[ name ];\n\t\t}\n\n\t\treturn this.module.trace( name ) || this.parent.findDeclaration( name );\n\t};\n\n\tModuleScope.prototype.findLexicalBoundary = function findLexicalBoundary () {\n\t\treturn this;\n\t};\n\n\treturn ModuleScope;\n}(Scope));\n\nfunction tryParse ( module, acornOptions ) {\n\ttry {\n\t\treturn parse( module.code, assign({\n\t\t\tecmaVersion: 8,\n\t\t\tsourceType: 'module',\n\t\t\tonComment: function ( block, text, start, end ) { return module.comments.push({ block: block, text: text, start: start, end: end }); },\n\t\t\tpreserveParens: false\n\t\t}, acornOptions ));\n\t} catch ( err ) {\n\t\tmodule.error({\n\t\t\tcode: 'PARSE_ERROR',\n\t\t\tmessage: err.message.replace( / \\(\\d+:\\d+\\)$/, '' )\n\t\t}, err.pos );\n\t}\n}\n\nvar Module = function Module (ref) {\n\tvar this$1 = this;\n\tvar id = ref.id;\n\tvar code = ref.code;\n\tvar originalCode = ref.originalCode;\n\tvar originalSourceMap = ref.originalSourceMap;\n\tvar ast = ref.ast;\n\tvar sourceMapChain = ref.sourceMapChain;\n\tvar resolvedIds = ref.resolvedIds;\n\tvar bundle = ref.bundle;\n\n\tthis.code = code;\n\tthis.id = id;\n\tthis.bundle = bundle;\n\tthis.originalCode = originalCode;\n\tthis.originalSourceMap = originalSourceMap;\n\tthis.sourceMapChain = sourceMapChain;\n\n\tthis.comments = [];\n\n\ttimeStart( 'ast' );\n\n\tif ( ast ) {\n\t\t// prevent mutating the provided AST, as it may be reused on\n\t\t// subsequent incremental rebuilds\n\t\tthis.ast = clone( ast );\n\t\tthis.astClone = ast;\n\t} else {\n\t\tthis.ast = tryParse( this, bundle.acornOptions ); // TODO what happens to comments if AST is provided?\n\t\tthis.astClone = clone( this.ast );\n\t}\n\n\ttimeEnd( 'ast' );\n\n\tthis.excludeFromSourcemap = /\\0/.test( id );\n\tthis.context = bundle.getModuleContext( id );\n\n\t// all dependencies\n\tthis.sources = [];\n\tthis.dependencies = [];\n\tthis.resolvedIds = resolvedIds || blank();\n\n\t// imports and exports, indexed by local name\n\tthis.imports = blank();\n\tthis.exports = blank();\n\tthis.exportsAll = blank();\n\tthis.reexports = blank();\n\n\tthis.exportAllSources = [];\n\tthis.exportAllModules = null;\n\n\t// By default, `id` is the filename. Custom resolvers and loaders\n\t// can change that, but it makes sense to use it for the source filename\n\tthis.magicString = new MagicString( code, {\n\t\tfilename: this.excludeFromSourcemap ? null : id, // don't include plugin helpers in sourcemap\n\t\tindentExclusionRanges: []\n\t});\n\n\t// remove existing sourceMappingURL comments\n\tthis.comments = this.comments.filter(function (comment) {\n\t\t//only one line comment can contain source maps\n\t\tvar isSourceMapComment = !comment.block && SOURCEMAPPING_URL_RE.test(comment.text);\n\t\tif (isSourceMapComment) {\n\t\t\tthis$1.magicString.remove(comment.start, comment.end );\n\t\t}\n\t\treturn !isSourceMapComment;\n\t});\n\n\tthis.declarations = blank();\n\tthis.type = 'Module'; // TODO only necessary so that Scope knows this should be treated as a function scope... messy\n\tthis.scope = new ModuleScope( this );\n\n\ttimeStart( 'analyse' );\n\n\tthis.analyse();\n\n\ttimeEnd( 'analyse' );\n\n\tthis.strongDependencies = [];\n};\n\nModule.prototype.addExport = function addExport ( node ) {\n\t\tvar this$1 = this;\n\n\tvar source = node.source && node.source.value;\n\n\t// export { name } from './other.js'\n\tif ( source ) {\n\t\tif ( !~this.sources.indexOf( source ) ) this.sources.push( source );\n\n\t\tif ( node.type === 'ExportAllDeclaration' ) {\n\t\t\t// Store `export * from '...'` statements in an array of delegates.\n\t\t\t// When an unknown import is encountered, we see if one of them can satisfy it.\n\t\t\tthis.exportAllSources.push( source );\n\t\t}\n\n\t\telse {\n\t\t\tnode.specifiers.forEach( function (specifier) {\n\t\t\t\tvar name = specifier.exported.name;\n\n\t\t\t\tif ( this$1.exports[ name ] || this$1.reexports[ name ] ) {\n\t\t\t\t\tthis$1.error({\n\t\t\t\t\t\tcode: 'DUPLICATE_EXPORT',\n\t\t\t\t\t\tmessage: (\"A module cannot have multiple exports with the same name ('\" + name + \"')\")\n\t\t\t\t\t}, specifier.start );\n\t\t\t\t}\n\n\t\t\t\tthis$1.reexports[ name ] = {\n\t\t\t\t\tstart: specifier.start,\n\t\t\t\t\tsource: source,\n\t\t\t\t\tlocalName: specifier.local.name,\n\t\t\t\t\tmodule: null // filled in later\n\t\t\t\t};\n\t\t\t});\n\t\t}\n\t}\n\n\t// export default function foo () {}\n\t// export default foo;\n\t// export default 42;\n\telse if ( node.type === 'ExportDefaultDeclaration' ) {\n\t\tvar identifier = ( node.declaration.id && node.declaration.id.name ) || node.declaration.name;\n\n\t\tif ( this.exports.default ) {\n\t\t\tthis.error({\n\t\t\t\tcode: 'DUPLICATE_EXPORT',\n\t\t\t\tmessage: \"A module can only have one default export\"\n\t\t\t}, node.start );\n\t\t}\n\n\t\tthis.exports.default = {\n\t\t\tlocalName: 'default',\n\t\t\tidentifier: identifier\n\t\t};\n\n\t\t// create a synthetic declaration\n\t\t//this.declarations.default = new SyntheticDefaultDeclaration( node, identifier || this.basename() );\n\t}\n\n\t// export var { foo, bar } = ...\n\t// export var foo = 42;\n\t// export var a = 1, b = 2, c = 3;\n\t// export function foo () {}\n\telse if ( node.declaration ) {\n\t\tvar declaration = node.declaration;\n\n\t\tif ( declaration.type === 'VariableDeclaration' ) {\n\t\t\tdeclaration.declarations.forEach( function (decl) {\n\t\t\t\textractNames( decl.id ).forEach( function (localName) {\n\t\t\t\t\tthis$1.exports[ localName ] = { localName: localName };\n\t\t\t\t});\n\t\t\t});\n\t\t} else {\n\t\t\t// export function foo () {}\n\t\t\tvar localName = declaration.id.name;\n\t\t\tthis.exports[ localName ] = { localName: localName };\n\t\t}\n\t}\n\n\t// export { foo, bar, baz }\n\telse {\n\t\tif ( node.specifiers.length ) {\n\t\t\tnode.specifiers.forEach( function (specifier) {\n\t\t\t\tvar localName = specifier.local.name;\n\t\t\t\tvar exportedName = specifier.exported.name;\n\n\t\t\t\tif ( this$1.exports[ exportedName ] || this$1.reexports[ exportedName ] ) {\n\t\t\t\t\tthis$1.error({\n\t\t\t\t\t\tcode: 'DUPLICATE_EXPORT',\n\t\t\t\t\t\tmessage: (\"A module cannot have multiple exports with the same name ('\" + exportedName + \"')\")\n\t\t\t\t\t}, specifier.start );\n\t\t\t\t}\n\n\t\t\t\tthis$1.exports[ exportedName ] = { localName: localName };\n\t\t\t});\n\t\t} else {\n\t\t\t// TODO is this really necessary? `export {}` is valid JS, and\n\t\t\t// might be used as a hint that this is indeed a module\n\t\t\tthis.warn({\n\t\t\t\tcode: 'EMPTY_EXPORT',\n\t\t\t\tmessage: \"Empty export declaration\"\n\t\t\t}, node.start );\n\t\t}\n\t}\n};\n\nModule.prototype.addImport = function addImport ( node ) {\n\t\tvar this$1 = this;\n\n\tvar source = node.source.value;\n\n\tif ( !~this.sources.indexOf( source ) ) this.sources.push( source );\n\n\tnode.specifiers.forEach( function (specifier) {\n\t\tvar localName = specifier.local.name;\n\n\t\tif ( this$1.imports[ localName ] ) {\n\t\t\tthis$1.error({\n\t\t\t\tcode: 'DUPLICATE_IMPORT',\n\t\t\t\tmessage: (\"Duplicated import '\" + localName + \"'\")\n\t\t\t}, specifier.start );\n\t\t}\n\n\t\tvar isDefault = specifier.type === 'ImportDefaultSpecifier';\n\t\tvar isNamespace = specifier.type === 'ImportNamespaceSpecifier';\n\n\t\tvar name = isDefault ? 'default' : isNamespace ? '*' : specifier.imported.name;\n\t\tthis$1.imports[ localName ] = { source: source, specifier: specifier, name: name, module: null };\n\t});\n};\n\nModule.prototype.analyse = function analyse () {\n\t\tvar this$1 = this;\n\n\tenhance( this.ast, this, this.comments );\n\n\t// discover this module's imports and exports\n\tvar lastNode;\n\n\tfor ( var node of this.ast.body ) {\n\t\tif ( node.isImportDeclaration ) {\n\t\t\tthis$1.addImport( node );\n\t\t} else if ( node.isExportDeclaration ) {\n\t\t\tthis$1.addExport( node );\n\t\t}\n\n\t\tif ( lastNode ) lastNode.next = node.leadingCommentStart || node.start;\n\t\tlastNode = node;\n\t}\n};\n\nModule.prototype.basename = function basename$1 () {\n\tvar base = path.basename( this.id );\n\tvar ext = path.extname( this.id );\n\n\treturn makeLegalIdentifier( ext ? base.slice( 0, -ext.length ) : base );\n};\n\nModule.prototype.bindImportSpecifiers = function bindImportSpecifiers () {\n\t\tvar this$1 = this;\n\n\t[ this.imports, this.reexports ].forEach( function (specifiers) {\n\t\tkeys( specifiers ).forEach( function (name) {\n\t\t\tvar specifier = specifiers[ name ];\n\n\t\t\tvar id = this$1.resolvedIds[ specifier.source ];\n\t\t\tspecifier.module = this$1.bundle.moduleById.get( id );\n\t\t});\n\t});\n\n\tthis.exportAllModules = this.exportAllSources.map( function (source) {\n\t\tvar id = this$1.resolvedIds[ source ];\n\t\treturn this$1.bundle.moduleById.get( id );\n\t});\n\n\tthis.sources.forEach( function (source) {\n\t\tvar id = this$1.resolvedIds[ source ];\n\t\tvar module = this$1.bundle.moduleById.get( id );\n\n\t\tif ( !module.isExternal ) this$1.dependencies.push( module );\n\t});\n};\n\nModule.prototype.bindReferences = function bindReferences () {\n\t\tvar this$1 = this;\n\n\tfor ( var node of this.ast.body ) {\n\t\tnode.bind( this$1.scope );\n\t}\n\n\t// if ( this.declarations.default ) {\n\t// if ( this.exports.default.identifier ) {\n\t// \tconst declaration = this.trace( this.exports.default.identifier );\n\t// \tif ( declaration ) this.declarations.default.bind( declaration );\n\t// }\n\t// }\n};\n\nModule.prototype.error = function error$1 ( props, pos ) {\n\tif ( pos !== undefined ) {\n\t\tprops.pos = pos;\n\n\t\tvar ref = locate( this.code, pos, { offsetLine: 1 });\n\t\t\tvar line = ref.line;\n\t\t\tvar column = ref.column; // TODO trace sourcemaps\n\n\t\tprops.loc = { file: this.id, line: line, column: column };\n\t\tprops.frame = getCodeFrame( this.code, line, column );\n\t}\n\n\terror( props );\n};\n\nModule.prototype.findParent = function findParent () {\n\t// TODO what does it mean if we're here?\n\treturn null;\n};\n\nModule.prototype.findScope = function findScope () {\n\treturn this.scope;\n};\n\nModule.prototype.getExports = function getExports () {\n\tvar exports = blank();\n\n\tkeys( this.exports ).forEach( function (name) {\n\t\texports[ name ] = true;\n\t});\n\n\tkeys( this.reexports ).forEach( function (name) {\n\t\texports[ name ] = true;\n\t});\n\n\tthis.exportAllModules.forEach( function (module) {\n\t\tif ( module.isExternal ) {\n\t\t\texports[ (\"*\" + (module.id)) ] = true;\n\t\t\treturn;\n\t\t}\n\n\t\tmodule.getExports().forEach( function (name) {\n\t\t\t\tif ( name !== 'default' ) exports[ name ] = true;\n\t\t});\n\t});\n\n\treturn keys( exports );\n};\n\nModule.prototype.namespace = function namespace () {\n\tif ( !this.declarations['*'] ) {\n\t\tthis.declarations['*'] = new SyntheticNamespaceDeclaration( this );\n\t}\n\n\treturn this.declarations['*'];\n};\n\nModule.prototype.render = function render ( es, legacy ) {\n\tvar magicString = this.magicString.clone();\n\n\tfor ( var node of this.ast.body ) {\n\t\tnode.render( magicString, es );\n\t}\n\n\tif ( this.namespace().needsNamespaceBlock ) {\n\t\tmagicString.append( '\\n\\n' + this.namespace().renderBlock( es, legacy, '\\t' ) ); // TODO use correct indentation\n\t}\n\n\treturn magicString.trim();\n};\n\nModule.prototype.run = function run () {\n\t\tvar this$1 = this;\n\n\tfor ( var node of this.ast.body ) {\n\t\tif ( node.hasEffects( this$1.scope ) ) {\n\t\t\tnode.run( this$1.scope );\n\t\t}\n\t}\n};\n\nModule.prototype.toJSON = function toJSON () {\n\treturn {\n\t\tid: this.id,\n\t\tdependencies: this.dependencies.map( function (module) { return module.id; } ),\n\t\tcode: this.code,\n\t\toriginalCode: this.originalCode,\n\t\toriginalSourceMap: this.originalSourceMap,\n\t\tast: this.astClone,\n\t\tsourceMapChain: this.sourceMapChain,\n\t\tresolvedIds: this.resolvedIds\n\t};\n};\n\nModule.prototype.trace = function trace ( name ) {\n\t// TODO this is slightly circular\n\tif ( name in this.scope.declarations ) {\n\t\treturn this.scope.declarations[ name ];\n\t}\n\n\tif ( name in this.imports ) {\n\t\t\tvar importDeclaration = this.imports[ name ];\n\t\tvar otherModule = importDeclaration.module;\n\n\t\tif ( importDeclaration.name === '*' && !otherModule.isExternal ) {\n\t\t\treturn otherModule.namespace();\n\t\t}\n\n\t\tvar declaration = otherModule.traceExport( importDeclaration.name );\n\n\t\tif ( !declaration ) {\n\t\t\tthis.error({\n\t\t\t\tcode: 'MISSING_EXPORT',\n\t\t\t\tmessage: (\"'\" + (importDeclaration.name) + \"' is not exported by \" + (relativeId( otherModule.id ))),\n\t\t\t\turl: \"https://github.com/rollup/rollup/wiki/Troubleshooting#name-is-not-exported-by-module\"\n\t\t\t}, importDeclaration.specifier.start );\n\t\t}\n\n\t\treturn declaration;\n\t}\n\n\treturn null;\n};\n\nModule.prototype.traceExport = function traceExport ( name ) {\n\t\tvar this$1 = this;\n\n\t// export * from 'external'\n\tif ( name[0] === '*' ) {\n\t\tvar module = this.bundle.moduleById.get( name.slice( 1 ) );\n\t\treturn module.traceExport( '*' );\n\t}\n\n\t// export { foo } from './other.js'\n\tvar reexportDeclaration = this.reexports[ name ];\n\tif ( reexportDeclaration ) {\n\t\tvar declaration = reexportDeclaration.module.traceExport( reexportDeclaration.localName );\n\n\t\tif ( !declaration ) {\n\t\t\tthis.error({\n\t\t\t\tcode: 'MISSING_EXPORT',\n\t\t\t\tmessage: (\"'\" + (reexportDeclaration.localName) + \"' is not exported by \" + (relativeId( reexportDeclaration.module.id ))),\n\t\t\t\turl: \"https://github.com/rollup/rollup/wiki/Troubleshooting#name-is-not-exported-by-module\"\n\t\t\t}, reexportDeclaration.start );\n\t\t}\n\n\t\treturn declaration;\n\t}\n\n\tvar exportDeclaration = this.exports[ name ];\n\tif ( exportDeclaration ) {\n\t\tvar name$1 = exportDeclaration.localName;\n\t\tvar declaration$1 = this.trace( name$1 );\n\n\t\treturn declaration$1 || this.bundle.scope.findDeclaration( name$1 );\n\t}\n\n\tif ( name === 'default' ) return;\n\n\tfor ( var i = 0; i < this.exportAllModules.length; i += 1 ) {\n\t\tvar module$1 = this$1.exportAllModules[i];\n\t\tvar declaration$2 = module$1.traceExport( name );\n\n\t\tif ( declaration$2 ) return declaration$2;\n\t}\n};\n\nModule.prototype.warn = function warn ( warning, pos ) {\n\tif ( pos !== undefined ) {\n\t\twarning.pos = pos;\n\n\t\tvar ref = locate( this.code, pos, { offsetLine: 1 });\n\t\t\tvar line = ref.line;\n\t\t\tvar column = ref.column; // TODO trace sourcemaps\n\n\t\twarning.loc = { file: this.id, line: line, column: column };\n\t\twarning.frame = getCodeFrame( this.code, line, column );\n\t}\n\n\tthis.bundle.warn( warning );\n};\n\nvar ExternalModule = function ExternalModule ( id, relativePath ) {\n\tthis.id = id;\n\tthis.path = relativePath;\n\n\tthis.name = makeLegalIdentifier( relativePath );\n\n\tthis.nameSuggestions = blank();\n\tthis.mostCommonSuggestion = 0;\n\n\tthis.isExternal = true;\n\tthis.declarations = blank();\n\n\tthis.exportsNames = false;\n};\n\nExternalModule.prototype.suggestName = function suggestName ( name ) {\n\tif ( !this.nameSuggestions[ name ] ) this.nameSuggestions[ name ] = 0;\n\tthis.nameSuggestions[ name ] += 1;\n\n\tif ( this.nameSuggestions[ name ] > this.mostCommonSuggestion ) {\n\t\tthis.mostCommonSuggestion = this.nameSuggestions[ name ];\n\t\tthis.name = name;\n\t}\n};\n\nExternalModule.prototype.traceExport = function traceExport ( name ) {\n\tif ( name !== 'default' && name !== '*' ) this.exportsNames = true;\n\tif ( name === '*' ) this.exportsNamespace = true;\n\n\treturn this.declarations[ name ] || (\n\t\tthis.declarations[ name ] = new ExternalDeclaration( this, name )\n\t);\n};\n\nfunction getName ( x ) {\n\treturn x.name;\n}\n\nfunction quotePath ( x ) {\n\treturn (\"'\" + (x.path) + \"'\");\n}\n\nfunction req ( x ) {\n\treturn (\"require('\" + (x.path) + \"')\");\n}\n\nfunction getInteropBlock ( bundle, options ) {\n\treturn bundle.externalModules\n\t\t.map( function (module) {\n\t\t\tif ( !module.declarations.default || options.interop === false ) return null;\n\n\t\t\tif ( module.exportsNamespace ) {\n\t\t\t\treturn ((bundle.varOrConst) + \" \" + (module.name) + \"__default = \" + (module.name) + \"['default'];\");\n\t\t\t}\n\n\t\t\tif ( module.exportsNames ) {\n\t\t\t\treturn ((bundle.varOrConst) + \" \" + (module.name) + \"__default = 'default' in \" + (module.name) + \" ? \" + (module.name) + \"['default'] : \" + (module.name) + \";\");\n\t\t\t}\n\n\t\t\treturn ((module.name) + \" = 'default' in \" + (module.name) + \" ? \" + (module.name) + \"['default'] : \" + (module.name) + \";\");\n\t\t})\n\t\t.filter( Boolean )\n\t\t.join( '\\n' );\n}\n\nfunction getExportBlock ( bundle, exportMode, mechanism ) {\n\tif ( mechanism === void 0 ) mechanism = 'return';\n\n\tvar entryModule = bundle.entryModule;\n\n\tif ( exportMode === 'default' ) {\n\t\treturn (mechanism + \" \" + (entryModule.traceExport( 'default' ).getName( false )) + \";\");\n\t}\n\n\treturn entryModule.getExports()\n\t\t.map( function (name) {\n\t\t\tif ( name[0] === '*' ) {\n\t\t\t\t// export all from external\n\t\t\t\tvar id = name.slice( 1 );\n\t\t\t\tvar module = bundle.moduleById.get( id );\n\n\t\t\t\treturn (\"Object.keys(\" + (module.name) + \").forEach(function (key) { exports[key] = \" + (module.name) + \"[key]; });\");\n\t\t\t}\n\n\t\t\tvar prop = name === 'default' ? \"['default']\" : (\".\" + name);\n\t\t\tvar declaration = entryModule.traceExport( name );\n\n\t\t\tvar lhs = \"exports\" + prop;\n\t\t\tvar rhs = declaration ?\n\t\t\t\tdeclaration.getName( false ) :\n\t\t\t\tname; // exporting a global\n\n\t\t\t// prevent `exports.count = exports.count`\n\t\t\tif ( lhs === rhs ) return null;\n\n\t\t\treturn (lhs + \" = \" + rhs + \";\");\n\t\t})\n\t\t.filter( Boolean )\n\t\t.join( '\\n' );\n}\n\nvar esModuleExport = \"Object.defineProperty(exports, '__esModule', { value: true });\";\n\nvar builtins$1 = {\n\tprocess: true,\n\tevents: true,\n\tstream: true,\n\tutil: true,\n\tpath: true,\n\tbuffer: true,\n\tquerystring: true,\n\turl: true,\n\tstring_decoder: true,\n\tpunycode: true,\n\thttp: true,\n\thttps: true,\n\tos: true,\n\tassert: true,\n\tconstants: true,\n\ttimers: true,\n\tconsole: true,\n\tvm: true,\n\tzlib: true,\n\ttty: true,\n\tdomain: true\n};\n\n// Creating a browser bundle that depends on Node.js built-in modules ('util'). You might need to include https://www.npmjs.com/package/rollup-plugin-node-builtins\n\nfunction warnOnBuiltins ( bundle ) {\n\tvar externalBuiltins = bundle.externalModules\n\t\t.filter( function (mod) { return mod.id in builtins$1; } )\n\t\t.map( function (mod) { return mod.id; } );\n\n\tif ( !externalBuiltins.length ) return;\n\n\tvar detail = externalBuiltins.length === 1 ?\n\t\t(\"module ('\" + (externalBuiltins[0]) + \"')\") :\n\t\t(\"modules (\" + (externalBuiltins.slice( 0, -1 ).map( function (name) { return (\"'\" + name + \"'\"); } ).join( ', ' )) + \" and '\" + (externalBuiltins.pop()) + \"')\");\n\n\tbundle.warn({\n\t\tcode: 'MISSING_NODE_BUILTINS',\n\t\tmessage: (\"Creating a browser bundle that depends on Node.js built-in \" + detail + \". You might need to include https://www.npmjs.com/package/rollup-plugin-node-builtins\")\n\t});\n}\n\nfunction amd ( bundle, magicString, ref, options ) {\n\tvar exportMode = ref.exportMode;\n\tvar indentString = ref.indentString;\n\tvar intro = ref.intro;\n\tvar outro = ref.outro;\n\n\twarnOnBuiltins( bundle );\n\tvar deps = bundle.externalModules.map( quotePath );\n\tvar args = bundle.externalModules.map( getName );\n\n\tif ( exportMode === 'named' ) {\n\t\targs.unshift( \"exports\" );\n\t\tdeps.unshift( \"'exports'\" );\n\t}\n\n\tvar params =\n\t\t( options.moduleId ? (\"'\" + (options.moduleId) + \"', \") : \"\" ) +\n\t\t( deps.length ? (\"[\" + (deps.join( ', ' )) + \"], \") : \"\" );\n\n\tvar useStrict = options.useStrict !== false ? \" 'use strict';\" : \"\";\n\tvar wrapperStart = \"define(\" + params + \"function (\" + (args.join( ', ' )) + \") {\" + useStrict + \"\\n\\n\";\n\n\t// var foo__default = 'default' in foo ? foo['default'] : foo;\n\tvar interopBlock = getInteropBlock( bundle, options );\n\tif ( interopBlock ) magicString.prepend( interopBlock + '\\n\\n' );\n\n\tif ( intro ) magicString.prepend( intro );\n\n\tvar exportBlock = getExportBlock( bundle, exportMode );\n\tif ( exportBlock ) magicString.append( '\\n\\n' + exportBlock );\n\tif ( exportMode === 'named' && options.legacy !== true ) magicString.append( (\"\\n\\n\" + esModuleExport) );\n\tif ( outro ) magicString.append( outro );\n\n\treturn magicString\n\t\t.indent( indentString )\n\t\t.append( '\\n\\n});' )\n\t\t.prepend( wrapperStart );\n}\n\nfunction cjs ( bundle, magicString, ref, options ) {\n\tvar exportMode = ref.exportMode;\n\tvar intro = ref.intro;\n\tvar outro = ref.outro;\n\n\tintro = ( options.useStrict === false ? intro : (\"'use strict';\\n\\n\" + intro) ) +\n\t        ( exportMode === 'named' && options.legacy !== true ? (esModuleExport + \"\\n\\n\") : '' );\n\n\tvar needsInterop = false;\n\n\tvar varOrConst = bundle.varOrConst;\n\tvar interop = options.interop !== false;\n\n\t// TODO handle empty imports, once they're supported\n\tvar importBlock = bundle.externalModules\n\t\t.map( function (module) {\n\t\t\tif ( interop && module.declarations.default ) {\n\t\t\t\tif ( module.exportsNamespace ) {\n\t\t\t\t\treturn varOrConst + \" \" + (module.name) + \" = require('\" + (module.path) + \"');\" +\n\t\t\t\t\t\t\"\\n\" + varOrConst + \" \" + (module.name) + \"__default = \" + (module.name) + \"['default'];\";\n\t\t\t\t}\n\n\t\t\t\tneedsInterop = true;\n\n\t\t\t\tif ( module.exportsNames ) {\n\t\t\t\t\treturn varOrConst + \" \" + (module.name) + \" = require('\" + (module.path) + \"');\" +\n\t\t\t\t\t\t\"\\n\" + varOrConst + \" \" + (module.name) + \"__default = _interopDefault(\" + (module.name) + \");\";\n\t\t\t\t}\n\n\t\t\t\treturn (varOrConst + \" \" + (module.name) + \" = _interopDefault(require('\" + (module.path) + \"'));\");\n\t\t\t} else {\n\t\t\t\tvar activated = Object.keys( module.declarations )\n\t\t\t\t\t.filter( function (name) { return module.declarations[ name ].activated; } );\n\n\t\t\t\treturn activated.length ?\n\t\t\t\t\t(varOrConst + \" \" + (module.name) + \" = require('\" + (module.path) + \"');\") :\n\t\t\t\t\t(\"require('\" + (module.path) + \"');\");\n\t\t\t}\n\t\t})\n\t\t.join( '\\n' );\n\n\tif ( needsInterop ) {\n\t\tintro += \"function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }\\n\\n\";\n\t}\n\n\tif ( importBlock ) {\n\t\tintro += importBlock + '\\n\\n';\n\t}\n\n\tmagicString.prepend( intro );\n\n\tvar exportBlock = getExportBlock( bundle, exportMode, 'module.exports =' );\n\tif ( exportBlock ) magicString.append( '\\n\\n' + exportBlock );\n\tif ( outro ) magicString.append( outro );\n\n\treturn magicString;\n}\n\nfunction notDefault ( name ) {\n\treturn name !== 'default';\n}\n\nfunction es ( bundle, magicString, ref ) {\n\tvar intro = ref.intro;\n\tvar outro = ref.outro;\n\n\tvar importBlock = bundle.externalModules\n\t\t.filter( function (module) {\n\t\t\tvar imported = keys( module.declarations );\n\t\t\treturn imported.length !== 1 || imported[0][0] !== '*';\n\t\t})\n\t\t.map( function (module) {\n\t\t\tvar specifiers = [];\n\t\t\tvar specifiersList = [specifiers];\n\t\t\tvar importedNames = keys( module.declarations )\n\t\t\t\t.filter( function (name) { return name !== '*' && name !== 'default'; } )\n\t\t\t\t.filter( function (name) { return module.declarations[ name ].activated; } )\n\t\t\t\t.map( function (name) {\n\t\t\t\t\tif ( name[0] === '*' ) {\n\t\t\t\t\t\treturn (\"* as \" + (module.name));\n\t\t\t\t\t}\n\n\t\t\t\t\tvar declaration = module.declarations[ name ];\n\n\t\t\t\t\tif ( declaration.name === declaration.safeName ) return declaration.name;\n\t\t\t\t\treturn ((declaration.name) + \" as \" + (declaration.safeName));\n\t\t\t\t})\n\t\t\t\t.filter( Boolean );\n\n\t\t\tif ( module.declarations.default ) {\n\t\t\t\tif ( module.exportsNamespace ) {\n\t\t\t\t\tspecifiersList.push([ ((module.name) + \"__default\") ]);\n\t\t\t\t} else {\n\t\t\t\t\tspecifiers.push( module.name );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tvar namespaceSpecifier = module.declarations['*'] ? (\"* as \" + (module.name)) : null; // TODO prevent unnecessary namespace import, e.g form/external-imports\n\t\t\tvar namedSpecifier = importedNames.length ? (\"{ \" + (importedNames.sort().join( ', ' )) + \" }\") : null;\n\n\t\t\tif ( namespaceSpecifier && namedSpecifier ) {\n\t\t\t\t// Namespace and named specifiers cannot be combined.\n\t\t\t\tspecifiersList.push( [namespaceSpecifier] );\n\t\t\t\tspecifiers.push( namedSpecifier );\n\t\t\t} else if ( namedSpecifier ) {\n\t\t\t\tspecifiers.push( namedSpecifier );\n\t\t\t} else if ( namespaceSpecifier ) {\n\t\t\t\tspecifiers.push( namespaceSpecifier );\n\t\t\t}\n\n\t\t\treturn specifiersList\n\t\t\t\t.map( function (specifiers) { return specifiers.length ?\n\t\t\t\t\t\t(\"import \" + (specifiers.join( ', ' )) + \" from '\" + (module.path) + \"';\") :\n\t\t\t\t\t\t(\"import '\" + (module.path) + \"';\"); }\n\t\t\t\t)\n\t\t\t\t.join( '\\n' );\n\t\t})\n\t\t.join( '\\n' );\n\n\tif ( importBlock ) intro += importBlock + '\\n\\n';\n\tif ( intro ) magicString.prepend( intro );\n\n\tvar module = bundle.entryModule;\n\n\tvar exportAllDeclarations = [];\n\n\tvar specifiers = module.getExports()\n\t\t.filter( notDefault )\n\t\t.map( function (name) {\n\t\t\tvar declaration = module.traceExport( name );\n\t\t\tvar rendered = declaration.getName( true );\n\n\t\t\tif ( name[0] === '*' ) {\n\t\t\t\t// export * from 'external'\n\t\t\t\texportAllDeclarations.push( (\"export * from '\" + (name.slice( 1 )) + \"';\") );\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\treturn rendered === name ?\n\t\t\t\tname :\n\t\t\t\t(rendered + \" as \" + name);\n\t\t})\n\t\t.filter( Boolean );\n\n\tvar exportBlock = specifiers.length ? (\"export { \" + (specifiers.join(', ')) + \" };\") : '';\n\n\tvar defaultExport = module.exports.default || module.reexports.default;\n\tif ( defaultExport ) {\n\t\texportBlock += \"export default \" + (module.traceExport( 'default' ).getName( true )) + \";\";\n\t}\n\n\tif ( exportBlock ) magicString.append( '\\n\\n' + exportBlock.trim() );\n\tif ( exportAllDeclarations.length ) magicString.append( '\\n\\n' + exportAllDeclarations.join( '\\n' ).trim() );\n\tif ( outro ) magicString.append( outro );\n\n\treturn magicString.trim();\n}\n\nfunction getGlobalNameMaker ( globals, bundle, fallback ) {\n\tif ( fallback === void 0 ) fallback = null;\n\n\tvar fn = typeof globals === 'function' ? globals : function (id) { return globals[ id ]; };\n\n\treturn function ( module ) {\n\t\tvar name = fn( module.id );\n\t\tif ( name ) return name;\n\n\t\tif ( Object.keys( module.declarations ).length > 0 ) {\n\t\t\tbundle.warn({\n\t\t\t\tcode: 'MISSING_GLOBAL_NAME',\n\t\t\t\tmessage: (\"No name was provided for external module '\" + (module.id) + \"' in options.globals – guessing '\" + (module.name) + \"'\")\n\t\t\t});\n\n\t\t\treturn module.name;\n\t\t}\n\n\t\treturn fallback;\n\t};\n}\n\n// Generate strings which dereference dotted properties, but use array notation `['prop-deref']`\n// if the property name isn't trivial\nvar shouldUseDot = /^[a-zA-Z$_][a-zA-Z0-9$_]*$/;\n\nfunction property ( prop ) {\n\treturn shouldUseDot.test( prop ) ? (\".\" + prop) : (\"['\" + prop + \"']\");\n}\n\nfunction keypath ( keypath ) {\n\treturn keypath.split( '.' ).map( property ).join( '' );\n}\n\nfunction trimEmptyImports ( modules ) {\n\tvar i = modules.length;\n\n\twhile ( i-- ) {\n\t\tvar module = modules[i];\n\t\tif ( Object.keys( module.declarations ).length > 0 ) {\n\t\t\treturn modules.slice( 0, i + 1 );\n\t\t}\n\t}\n\n\treturn [];\n}\n\nfunction setupNamespace ( keypath$$1 ) {\n\tvar parts = keypath$$1.split( '.' );\n\n\tparts.pop();\n\n\tvar acc = 'this';\n\n\treturn parts\n\t\t.map( function (part) { return ( acc += property( part ), (acc + \" = \" + acc + \" || {};\") ); } )\n\t\t.join( '\\n' ) + '\\n';\n}\n\nvar thisProp = function (name) { return (\"this\" + (keypath( name ))); };\n\nfunction iife ( bundle, magicString, ref, options ) {\n\tvar exportMode = ref.exportMode;\n\tvar indentString = ref.indentString;\n\tvar intro = ref.intro;\n\tvar outro = ref.outro;\n\n\tvar globalNameMaker = getGlobalNameMaker( options.globals || blank(), bundle, 'null' );\n\n\tvar name = options.moduleName;\n\tvar isNamespaced = name && ~name.indexOf( '.' );\n\n\twarnOnBuiltins( bundle );\n\n\tvar external = trimEmptyImports( bundle.externalModules );\n\tvar dependencies = external.map( globalNameMaker );\n\tvar args = external.map( getName );\n\n\tif ( exportMode !== 'none' && !name ) {\n\t\terror({\n\t\t\tcode: 'INVALID_OPTION',\n\t\t\tmessage: \"You must supply options.moduleName for IIFE bundles\"\n\t\t});\n\t}\n\n\tif ( exportMode === 'named' ) {\n\t\tdependencies.unshift( (\"(\" + (thisProp(name)) + \" = \" + (thisProp(name)) + \" || {})\") );\n\t\targs.unshift( 'exports' );\n\t}\n\n\tvar useStrict = options.useStrict !== false ? (indentString + \"'use strict';\\n\\n\") : \"\";\n\n\tvar wrapperIntro = \"(function (\" + args + \") {\\n\" + useStrict;\n\tvar wrapperOutro = \"\\n\\n}(\" + dependencies + \"));\";\n\n\tif ( exportMode === 'default' ) {\n\t\twrapperIntro = ( isNamespaced ? thisProp(name) : ((bundle.varOrConst) + \" \" + name) ) + \" = \" + wrapperIntro;\n\t}\n\n\tif ( isNamespaced ) {\n\t\twrapperIntro = setupNamespace( name ) + wrapperIntro;\n\t}\n\n\t// var foo__default = 'default' in foo ? foo['default'] : foo;\n\tvar interopBlock = getInteropBlock( bundle, options );\n\tif ( interopBlock ) magicString.prepend( interopBlock + '\\n\\n' );\n\n\tif ( intro ) magicString.prepend( intro );\n\n\tvar exportBlock = getExportBlock( bundle, exportMode );\n\tif ( exportBlock ) magicString.append( '\\n\\n' + exportBlock );\n\tif ( outro ) magicString.append( outro );\n\n\treturn magicString\n\t\t.indent( indentString )\n\t\t.prepend( wrapperIntro )\n\t\t.append( wrapperOutro );\n}\n\nfunction globalProp ( name ) {\n\tif ( !name ) return 'null';\n\treturn (\"global\" + (keypath( name )));\n}\n\nfunction setupNamespace$1 ( name ) {\n\tvar parts = name.split( '.' );\n\tvar last = property( parts.pop() );\n\n\tvar acc = 'global';\n\treturn parts\n\t\t.map( function (part) { return ( acc += property( part ), (acc + \" = \" + acc + \" || {}\") ); } )\n\t\t.concat( (\"\" + acc + last) )\n\t\t.join( ', ' );\n}\n\nvar wrapperOutro = '\\n\\n})));';\n\nfunction umd ( bundle, magicString, ref, options ) {\n\tvar exportMode = ref.exportMode;\n\tvar indentString = ref.indentString;\n\tvar intro = ref.intro;\n\tvar outro = ref.outro;\n\n\tif ( exportMode !== 'none' && !options.moduleName ) {\n\t\terror({\n\t\t\tcode: 'INVALID_OPTION',\n\t\t\tmessage: 'You must supply options.moduleName for UMD bundles'\n\t\t});\n\t}\n\n\twarnOnBuiltins( bundle );\n\n\tvar globalNameMaker = getGlobalNameMaker( options.globals || blank(), bundle );\n\n\tvar amdDeps = bundle.externalModules.map( quotePath );\n\tvar cjsDeps = bundle.externalModules.map( req );\n\n\tvar trimmed = trimEmptyImports( bundle.externalModules );\n\tvar globalDeps = trimmed.map( function (module) { return globalProp( globalNameMaker( module ) ); } );\n\tvar args = trimmed.map( getName );\n\n\tif ( exportMode === 'named' ) {\n\t\tamdDeps.unshift( \"'exports'\" );\n\t\tcjsDeps.unshift( \"exports\" );\n\t\tglobalDeps.unshift( (\"(\" + (setupNamespace$1(options.moduleName)) + \" = \" + (globalProp(options.moduleName)) + \" || {})\") );\n\n\t\targs.unshift( 'exports' );\n\t}\n\n\tvar amdParams =\n\t\t( options.moduleId ? (\"'\" + (options.moduleId) + \"', \") : \"\" ) +\n\t\t( amdDeps.length ? (\"[\" + (amdDeps.join( ', ' )) + \"], \") : \"\" );\n\n\tvar cjsExport = exportMode === 'default' ? \"module.exports = \" : \"\";\n\tvar defaultExport = exportMode === 'default' ? ((setupNamespace$1(options.moduleName)) + \" = \") : '';\n\n\tvar useStrict = options.useStrict !== false ? \" 'use strict';\" : \"\";\n\n\tvar globalExport = options.noConflict === true ?\n\t\t(\"(function() {\\n\\t\\t\\t\\tvar current = \" + (globalProp(options.moduleName)) + \";\\n\\t\\t\\t\\tvar exports = factory(\" + globalDeps + \");\\n\\t\\t\\t\\t\" + (globalProp(options.moduleName)) + \" = exports;\\n\\t\\t\\t\\texports.noConflict = function() { \" + (globalProp(options.moduleName)) + \" = current; return exports; };\\n\\t\\t\\t})()\") : (\"(\" + defaultExport + \"factory(\" + globalDeps + \"))\");\n\n\tvar wrapperIntro =\n\t\t(\"(function (global, factory) {\\n\\t\\t\\ttypeof exports === 'object' && typeof module !== 'undefined' ? \" + cjsExport + \"factory(\" + (cjsDeps.join( ', ' )) + \") :\\n\\t\\t\\ttypeof define === 'function' && define.amd ? define(\" + amdParams + \"factory) :\\n\\t\\t\\t\" + globalExport + \";\\n\\t\\t}(this, (function (\" + args + \") {\" + useStrict + \"\\n\\n\\t\\t\").replace( /^\\t\\t/gm, '' ).replace( /^\\t/gm, indentString || '\\t' );\n\n\t// var foo__default = 'default' in foo ? foo['default'] : foo;\n\tvar interopBlock = getInteropBlock( bundle, options );\n\tif ( interopBlock ) magicString.prepend( interopBlock + '\\n\\n' );\n\n\tif ( intro ) magicString.prepend( intro );\n\n\tvar exportBlock = getExportBlock( bundle, exportMode );\n\tif ( exportBlock ) magicString.append( '\\n\\n' + exportBlock );\n\tif ( exportMode === 'named' && options.legacy !== true ) magicString.append( (\"\\n\\n\" + esModuleExport) );\n\tif ( outro ) magicString.append( outro );\n\n\treturn magicString\n\t\t.trim()\n\t\t.indent( indentString )\n\t\t.append( wrapperOutro )\n\t\t.prepend( wrapperIntro );\n}\n\nvar finalisers = { amd: amd, cjs: cjs, es: es, iife: iife, umd: umd };\n\nfunction ensureArray ( thing ) {\n\tif ( Array.isArray( thing ) ) return thing;\n\tif ( thing == undefined ) return [];\n\treturn [ thing ];\n}\n\nfunction load ( id ) {\n\treturn fs.readFileSync( id, 'utf-8' );\n}\n\nfunction findFile ( file ) {\n\ttry {\n\t\tvar stats = fs.lstatSync( file );\n\t\tif ( stats.isSymbolicLink() ) return findFile( fs.realpathSync( file ) );\n\t\tif ( stats.isFile() ) {\n\t\t\t// check case\n\t\t\tvar name = path.basename( file );\n\t\t\tvar files = fs.readdirSync( path.dirname( file ) );\n\n\t\t\tif ( ~files.indexOf( name ) ) return file;\n\t\t}\n\t} catch ( err ) {\n\t\t// suppress\n\t}\n}\n\nfunction addJsExtensionIfNecessary ( file ) {\n\treturn findFile( file ) || findFile( file + '.js' );\n}\n\nfunction resolveId ( importee, importer ) {\n\tif ( typeof process === 'undefined' ) {\n\t\terror({\n\t\t\tcode: 'MISSING_PROCESS',\n\t\t\tmessage: \"It looks like you're using Rollup in a non-Node.js environment. This means you must supply a plugin with custom resolveId and load functions\",\n\t\t\turl: 'https://github.com/rollup/rollup/wiki/Plugins'\n\t\t});\n\t}\n\n\t// absolute paths are left untouched\n\tif ( isAbsolute( importee ) ) return addJsExtensionIfNecessary( path.resolve( importee ) );\n\n\t// if this is the entry point, resolve against cwd\n\tif ( importer === undefined ) return addJsExtensionIfNecessary( path.resolve( process.cwd(), importee ) );\n\n\t// external modules are skipped at this stage\n\tif ( importee[0] !== '.' ) return null;\n\n\treturn addJsExtensionIfNecessary( path.resolve( path.dirname( importer ), importee ) );\n}\n\n\nfunction makeOnwarn () {\n\tvar warned = blank();\n\n\treturn function (warning) {\n\t\tvar str = warning.toString();\n\t\tif ( str in warned ) return;\n\t\tconsole.error( str ); //eslint-disable-line no-console\n\t\twarned[ str ] = true;\n\t};\n}\n\nfunction badExports ( option, keys$$1 ) {\n\terror({\n\t\tcode: 'INVALID_EXPORT_OPTION',\n\t\tmessage: (\"'\" + option + \"' was specified for options.exports, but entry module has following exports: \" + (keys$$1.join(', ')))\n\t});\n}\n\nfunction getExportMode ( bundle, ref ) {\n\tvar exportMode = ref.exports;\n\tvar moduleName = ref.moduleName;\n\tvar format = ref.format;\n\n\tvar exportKeys = keys( bundle.entryModule.exports )\n\t\t.concat( keys( bundle.entryModule.reexports ) )\n\t\t.concat( bundle.entryModule.exportAllSources ); // not keys, but makes our job easier this way\n\n\tif ( exportMode === 'default' ) {\n\t\tif ( exportKeys.length !== 1 || exportKeys[0] !== 'default' ) {\n\t\t\tbadExports( 'default', exportKeys );\n\t\t}\n\t} else if ( exportMode === 'none' && exportKeys.length ) {\n\t\tbadExports( 'none', exportKeys );\n\t}\n\n\tif ( !exportMode || exportMode === 'auto' ) {\n\t\tif ( exportKeys.length === 0 ) {\n\t\t\texportMode = 'none';\n\t\t} else if ( exportKeys.length === 1 && exportKeys[0] === 'default' ) {\n\t\t\texportMode = 'default';\n\t\t} else {\n\t\t\tif ( bundle.entryModule.exports.default && format !== 'es') {\n\t\t\t\tbundle.warn({\n\t\t\t\t\tcode: 'MIXED_EXPORTS',\n\t\t\t\t\tmessage: (\"Using named and default exports together. Consumers of your bundle will have to use \" + (moduleName || 'bundle') + \"['default'] to access the default export, which may not be what you want. Use `exports: 'named'` to disable this warning\"),\n\t\t\t\t\turl: \"https://github.com/rollup/rollup/wiki/JavaScript-API#exports\"\n\t\t\t\t});\n\t\t\t}\n\t\t\texportMode = 'named';\n\t\t}\n\t}\n\n\tif ( !/(?:default|named|none)/.test( exportMode ) ) {\n\t\terror({\n\t\t\tcode: 'INVALID_EXPORT_OPTION',\n\t\t\tmessage: \"options.exports must be 'default', 'named', 'none', 'auto', or left unspecified (defaults to 'auto')\"\n\t\t});\n\t}\n\n\treturn exportMode;\n}\n\nfunction getIndentString ( magicString, options ) {\n\tif ( options.indent === true ) {\n\t\treturn magicString.getIndentString();\n\t}\n\n\treturn options.indent || '';\n}\n\nfunction transform ( bundle, source, id, plugins ) {\n\tvar sourceMapChain = [];\n\n\tvar originalSourceMap = typeof source.map === 'string' ? JSON.parse( source.map ) : source.map;\n\n\tif ( originalSourceMap && typeof originalSourceMap.mappings === 'string' ) {\n\t\toriginalSourceMap.mappings = decode( originalSourceMap.mappings );\n\t}\n\n\tvar originalCode = source.code;\n\tvar ast = source.ast;\n\n\tvar promise = Promise.resolve( source.code );\n\n\tplugins.forEach( function (plugin) {\n\t\tif ( !plugin.transform ) return;\n\n\t\tpromise = promise.then( function (previous) {\n\t\t\tfunction augment ( object, pos, code ) {\n\t\t\t\tif ( typeof object === 'string' ) {\n\t\t\t\t\tobject = { message: object };\n\t\t\t\t}\n\n\t\t\t\tif ( !object.code ) object.code = code;\n\n\t\t\t\tif ( pos !== undefined ) {\n\t\t\t\t\tobject.pos = pos;\n\t\t\t\t\tvar ref = locate( previous, pos, { offsetLine: 1 });\n\t\t\t\t\tvar line = ref.line;\n\t\t\t\t\tvar column = ref.column;\n\t\t\t\t\tobject.loc = { file: id, line: line, column: column };\n\t\t\t\t\tobject.frame = getCodeFrame( previous, line, column );\n\t\t\t\t}\n\n\t\t\t\treturn object;\n\t\t\t}\n\n\t\t\tvar err;\n\n\t\t\tvar context = {\n\t\t\t\twarn: function ( warning, pos ) {\n\t\t\t\t\twarning = augment( warning, pos, 'PLUGIN_WARNING' );\n\t\t\t\t\twarning.plugin = plugin.name;\n\t\t\t\t\twarning.id = id;\n\t\t\t\t\tbundle.warn( warning );\n\t\t\t\t},\n\n\t\t\t\terror: function error$1 ( e, pos ) {\n\t\t\t\t\terr = augment( e, pos, 'PLUGIN_ERROR' );\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tvar transformed;\n\n\t\t\ttry {\n\t\t\t\ttransformed = plugin.transform.call( context, previous, id );\n\t\t\t} catch ( err ) {\n\t\t\t\tcontext.error( err );\n\t\t\t}\n\n\t\t\treturn Promise.resolve( transformed )\n\t\t\t\t.then( function (result) {\n\t\t\t\t\tif ( err ) throw err;\n\n\t\t\t\t\tif ( result == null ) return previous;\n\n\t\t\t\t\tif ( typeof result === 'string' ) {\n\t\t\t\t\t\tresult = {\n\t\t\t\t\t\t\tcode: result,\n\t\t\t\t\t\t\tast: null,\n\t\t\t\t\t\t\tmap: null\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\n\t\t\t\t\t// `result.map` can only be a string if `result` isn't\n\t\t\t\t\telse if ( typeof result.map === 'string' ) {\n\t\t\t\t\t\tresult.map = JSON.parse( result.map );\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( result.map && typeof result.map.mappings === 'string' ) {\n\t\t\t\t\t\tresult.map.mappings = decode( result.map.mappings );\n\t\t\t\t\t}\n\n\t\t\t\t\tsourceMapChain.push( result.map || { missing: true, plugin: plugin.name }); // lil' bit hacky but it works\n\t\t\t\t\tast = result.ast;\n\n\t\t\t\t\treturn result.code;\n\t\t\t\t})\n\t\t\t\t.catch( function (err) {\n\t\t\t\t\terr.plugin = plugin.name;\n\t\t\t\t\terr.id = id;\n\t\t\t\t\terror( err );\n\t\t\t\t});\n\t\t});\n\t});\n\n\treturn promise.then( function (code) { return ({ code: code, originalCode: originalCode, originalSourceMap: originalSourceMap, ast: ast, sourceMapChain: sourceMapChain }); } );\n}\n\nfunction transformBundle ( code, plugins, sourceMapChain, options ) {\n\treturn plugins.reduce( function ( code, plugin ) {\n\t\tif ( !plugin.transformBundle ) return code;\n\n\t\tvar result;\n\n\t\ttry {\n\t\t\tresult = plugin.transformBundle( code, { format : options.format } );\n\t\t} catch ( err ) {\n\t\t\terror({\n\t\t\t\tcode: 'BAD_BUNDLE_TRANSFORMER',\n\t\t\t\tmessage: (\"Error transforming bundle\" + (plugin.name ? (\" with '\" + (plugin.name) + \"' plugin\") : '') + \": \" + (err.message)),\n\t\t\t\tplugin: plugin.name\n\t\t\t});\n\t\t}\n\n\t\tif ( result == null ) return code;\n\n\t\tif ( typeof result === 'string' ) {\n\t\t\tresult = {\n\t\t\t\tcode: result,\n\t\t\t\tmap: null\n\t\t\t};\n\t\t}\n\n\t\tvar map = typeof result.map === 'string' ? JSON.parse( result.map ) : result.map;\n\t\tif ( map && typeof map.mappings === 'string' ) {\n\t\t\tmap.mappings = decode( map.mappings );\n\t\t}\n\n\t\tsourceMapChain.push( map );\n\n\t\treturn result.code;\n\t}, code );\n}\n\nvar Source = function Source ( filename, content ) {\n\tthis.isOriginal = true;\n\tthis.filename = filename;\n\tthis.content = content;\n};\n\nSource.prototype.traceSegment = function traceSegment ( line, column, name ) {\n\treturn { line: line, column: column, name: name, source: this };\n};\n\nvar Link = function Link ( map, sources ) {\n\tthis.sources = sources;\n\tthis.names = map.names;\n\tthis.mappings = map.mappings;\n};\n\nLink.prototype.traceMappings = function traceMappings () {\n\t\tvar this$1 = this;\n\n\tvar sources = [];\n\tvar sourcesContent = [];\n\tvar names = [];\n\n\tvar mappings = this.mappings.map( function (line) {\n\t\tvar tracedLine = [];\n\n\t\tline.forEach( function (segment) {\n\t\t\tvar source = this$1.sources[ segment[1] ];\n\n\t\t\tif ( !source ) return;\n\n\t\t\tvar traced = source.traceSegment( segment[2], segment[3], this$1.names[ segment[4] ] );\n\n\t\t\tif ( traced ) {\n\t\t\t\tvar sourceIndex = null;\n\t\t\t\tvar nameIndex = null;\n\t\t\t\tsegment = [\n\t\t\t\t\tsegment[0],\n\t\t\t\t\tnull,\n\t\t\t\t\ttraced.line,\n\t\t\t\t\ttraced.column\n\t\t\t\t];\n\n\t\t\t\t// newer sources are more likely to be used, so search backwards.\n\t\t\t\tsourceIndex = sources.lastIndexOf( traced.source.filename );\n\t\t\t\tif ( sourceIndex === -1 ) {\n\t\t\t\t\tsourceIndex = sources.length;\n\t\t\t\t\tsources.push( traced.source.filename );\n\t\t\t\t\tsourcesContent[ sourceIndex ] = traced.source.content;\n\t\t\t\t} else if ( sourcesContent[ sourceIndex ] == null ) {\n\t\t\t\t\tsourcesContent[ sourceIndex ] = traced.source.content;\n\t\t\t\t} else if ( traced.source.content != null && sourcesContent[ sourceIndex ] !== traced.source.content ) {\n\t\t\t\t\terror({\n\t\t\t\t\t\tmessage: (\"Multiple conflicting contents for sourcemap source \" + (source.filename))\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\tsegment[1] = sourceIndex;\n\n\t\t\t\tif ( traced.name ) {\n\t\t\t\t\tnameIndex = names.indexOf( traced.name );\n\t\t\t\t\tif ( nameIndex === -1 ) {\n\t\t\t\t\t\tnameIndex = names.length;\n\t\t\t\t\t\tnames.push( traced.name );\n\t\t\t\t\t}\n\n\t\t\t\t\tsegment[4] = nameIndex;\n\t\t\t\t}\n\n\t\t\t\ttracedLine.push( segment );\n\t\t\t}\n\t\t});\n\n\t\treturn tracedLine;\n\t});\n\n\treturn { sources: sources, sourcesContent: sourcesContent, names: names, mappings: mappings };\n};\n\nLink.prototype.traceSegment = function traceSegment ( line, column, name ) {\n\t\tvar this$1 = this;\n\n\tvar segments = this.mappings[ line ];\n\n\tif ( !segments ) return null;\n\n\tfor ( var i = 0; i < segments.length; i += 1 ) {\n\t\tvar segment = segments[i];\n\n\t\tif ( segment[0] > column ) return null;\n\n\t\tif ( segment[0] === column ) {\n\t\t\tvar source = this$1.sources[ segment[1] ];\n\t\t\tif ( !source ) return null;\n\n\t\t\treturn source.traceSegment( segment[2], segment[3], this$1.names[ segment[4] ] || name );\n\t\t}\n\t}\n\n\treturn null;\n};\n\nfunction collapseSourcemaps ( bundle, file, map, modules, bundleSourcemapChain ) {\n\tvar moduleSources = modules.filter( function (module) { return !module.excludeFromSourcemap; } ).map( function (module) {\n\t\tvar sourceMapChain = module.sourceMapChain;\n\n\t\tvar source;\n\t\tif ( module.originalSourceMap == null ) {\n\t\t\tsource = new Source( module.id, module.originalCode );\n\t\t} else {\n\t\t\tvar sources = module.originalSourceMap.sources;\n\t\t\tvar sourcesContent = module.originalSourceMap.sourcesContent || [];\n\n\t\t\tif ( sources == null || ( sources.length <= 1 && sources[0] == null ) ) {\n\t\t\t\tsource = new Source( module.id, sourcesContent[0] );\n\t\t\t\tsourceMapChain = [ module.originalSourceMap ].concat( sourceMapChain );\n\t\t\t} else {\n\t\t\t\t// TODO indiscriminately treating IDs and sources as normal paths is probably bad.\n\t\t\t\tvar directory = path.dirname( module.id ) || '.';\n\t\t\t\tvar sourceRoot = module.originalSourceMap.sourceRoot || '.';\n\n\t\t\t\tvar baseSources = sources.map( function (source, i) {\n\t\t\t\t\treturn new Source( path.resolve( directory, sourceRoot, source ), sourcesContent[i] );\n\t\t\t\t});\n\n\t\t\t\tsource = new Link( module.originalSourceMap, baseSources );\n\t\t\t}\n\t\t}\n\n\t\tsourceMapChain.forEach( function (map) {\n\t\t\tif ( map.missing ) {\n\t\t\t\tbundle.warn({\n\t\t\t\t\tcode: 'SOURCEMAP_BROKEN',\n\t\t\t\t\tmessage: (\"Sourcemap is likely to be incorrect: a plugin\" + (map.plugin ? (\" ('\" + (map.plugin) + \"')\") : \"\") + \" was used to transform files, but didn't generate a sourcemap for the transformation. Consult the plugin documentation for help\"),\n\t\t\t\t\turl: \"https://github.com/rollup/rollup/wiki/Troubleshooting#sourcemap-is-likely-to-be-incorrect\"\n\t\t\t\t});\n\n\t\t\t\tmap = {\n\t\t\t\t\tnames: [],\n\t\t\t\t\tmappings: ''\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tsource = new Link( map, [ source ]);\n\t\t});\n\n\t\treturn source;\n\t});\n\n\tvar source = new Link( map, moduleSources );\n\n\tbundleSourcemapChain.forEach( function (map) {\n\t\tsource = new Link( map, [ source ] );\n\t});\n\n\tvar ref = source.traceMappings();\n\tvar sources = ref.sources;\n\tvar sourcesContent = ref.sourcesContent;\n\tvar names = ref.names;\n\tvar mappings = ref.mappings;\n\n\tif ( file ) {\n\t\tvar directory = path.dirname( file );\n\t\tsources = sources.map( function (source) { return path.relative( directory, source ); } );\n\n\t\tmap.file = path.basename( file );\n\t}\n\n\t// we re-use the `map` object because it has convenient toString/toURL methods\n\tmap.sources = sources;\n\tmap.sourcesContent = sourcesContent;\n\tmap.names = names;\n\tmap.mappings = encode( mappings );\n\n\treturn map;\n}\n\nfunction callIfFunction ( thing ) {\n\treturn typeof thing === 'function' ? thing() : thing;\n}\n\nvar SyntheticGlobalDeclaration = function SyntheticGlobalDeclaration ( name ) {\n\tthis.name = name;\n\tthis.isExternal = true;\n\tthis.isGlobal = true;\n\tthis.isReassigned = false;\n\n\tthis.activated = true;\n};\n\nSyntheticGlobalDeclaration.prototype.activate = function activate () {\n\t/* noop */\n};\n\nSyntheticGlobalDeclaration.prototype.addReference = function addReference ( reference ) {\n\treference.declaration = this;\n\tif ( reference.isReassignment ) this.isReassigned = true;\n};\n\nSyntheticGlobalDeclaration.prototype.gatherPossibleValues = function gatherPossibleValues ( values ) {\n\tvalues.add( UNKNOWN );\n};\n\nSyntheticGlobalDeclaration.prototype.getName = function getName () {\n\treturn this.name;\n};\n\nvar BundleScope = (function (Scope$$1) {\n\tfunction BundleScope () {\n\t\tScope$$1.apply(this, arguments);\n\t}\n\n\tif ( Scope$$1 ) BundleScope.__proto__ = Scope$$1;\n\tBundleScope.prototype = Object.create( Scope$$1 && Scope$$1.prototype );\n\tBundleScope.prototype.constructor = BundleScope;\n\n\tBundleScope.prototype.findDeclaration = function findDeclaration ( name ) {\n\t\tif ( !this.declarations[ name ] ) {\n\t\t\tthis.declarations[ name ] = new SyntheticGlobalDeclaration( name );\n\t\t}\n\n\t\treturn this.declarations[ name ];\n\t};\n\n\treturn BundleScope;\n}(Scope));\n\nvar Bundle$$1 = function Bundle$$1 ( options ) {\n\tvar this$1 = this;\n\n\tthis.cachedModules = new Map();\n\tif ( options.cache ) {\n\t\toptions.cache.modules.forEach( function (module) {\n\t\t\tthis$1.cachedModules.set( module.id, module );\n\t\t});\n\t}\n\n\tthis.plugins = ensureArray( options.plugins );\n\n\toptions = this.plugins.reduce( function ( acc, plugin ) {\n\t\tif ( plugin.options ) return plugin.options( acc ) || acc;\n\t\treturn acc;\n\t}, options);\n\n\tthis.entry = options.entry;\n\tthis.entryId = null;\n\tthis.entryModule = null;\n\n\tthis.treeshake = options.treeshake !== false;\n\n\tthis.resolveId = first(\n\t\t[ function (id) { return this$1.isExternal( id ) ? false : null; } ]\n\t\t\t.concat( this.plugins.map( function (plugin) { return plugin.resolveId; } ).filter( Boolean ) )\n\t\t\t.concat( resolveId )\n\t);\n\n\tvar loaders = this.plugins\n\t\t.map( function (plugin) { return plugin.load; } )\n\t\t.filter( Boolean );\n\tthis.hasLoaders = loaders.length !== 0;\n\tthis.load = first( loaders.concat( load ) );\n\n\tthis.getPath = typeof options.paths === 'function' ?\n\t\t( function (id) { return options.paths( id ) || this$1.getPathRelativeToEntryDirname( id ); } ) :\n\t\toptions.paths ?\n\t\t\t( function (id) { return options.paths.hasOwnProperty( id ) ? options.paths[ id ] : this$1.getPathRelativeToEntryDirname( id ); } ) :\n\t\t\tfunction (id) { return this$1.getPathRelativeToEntryDirname( id ); };\n\n\tthis.scope = new BundleScope();\n\t// TODO strictly speaking, this only applies with non-ES6, non-default-only bundles\n\t[ 'module', 'exports', '_interopDefault' ].forEach( function (name) {\n\t\tthis$1.scope.findDeclaration( name ); // creates global declaration as side-effect\n\t});\n\n\tthis.moduleById = new Map();\n\tthis.modules = [];\n\tthis.externalModules = [];\n\n\tthis.context = String( options.context );\n\n\tif ( typeof options.moduleContext === 'function' ) {\n\t\tthis.getModuleContext = function (id) { return options.moduleContext( id ) || this$1.context; };\n\t} else if ( typeof options.moduleContext === 'object' ) {\n\t\tvar moduleContext = new Map();\n\t\tObject.keys( options.moduleContext ).forEach( function (key) {\n\t\t\tmoduleContext.set( path.resolve( key ), options.moduleContext[ key ] );\n\t\t});\n\t\tthis.getModuleContext = function (id) { return moduleContext.get( id ) || this$1.context; };\n\t} else {\n\t\tthis.getModuleContext = function () { return this$1.context; };\n\t}\n\n\tif ( typeof options.external === 'function' ) {\n\t\tthis.isExternal = options.external;\n\t} else {\n\t\tvar ids = ensureArray( options.external );\n\t\tthis.isExternal = function (id) { return ids.indexOf( id ) !== -1; };\n\t}\n\n\tthis.onwarn = options.onwarn || makeOnwarn();\n\n\tthis.varOrConst = options.preferConst ? 'const' : 'var';\n\tthis.legacy = options.legacy;\n\tthis.acornOptions = options.acorn || {};\n\n\tthis.dependentExpressions = [];\n};\n\nBundle$$1.prototype.build = function build () {\n\t\tvar this$1 = this;\n\n\t// Phase 1 – discovery. We load the entry module and find which\n\t// modules it imports, and import those, until we have all\n\t// of the entry module's dependencies\n\treturn this.resolveId( this.entry, undefined )\n\t\t.then( function (id) {\n\t\t\tif ( id == null ) {\n\t\t\t\terror({\n\t\t\t\t\tcode: 'UNRESOLVED_ENTRY',\n\t\t\t\t\tmessage: (\"Could not resolve entry (\" + (this$1.entry) + \")\")\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tthis$1.entryId = id;\n\t\t\treturn this$1.fetchModule( id, undefined );\n\t\t})\n\t\t.then( function (entryModule) {\n\t\t\tthis$1.entryModule = entryModule;\n\n\t\t\t// Phase 2 – binding. We link references to their declarations\n\t\t\t// to generate a complete picture of the bundle\n\n\t\t\ttimeStart( 'phase 2' );\n\n\t\t\tthis$1.modules.forEach( function (module) { return module.bindImportSpecifiers(); } );\n\t\t\tthis$1.modules.forEach( function (module) { return module.bindReferences(); } );\n\n\t\t\ttimeEnd( 'phase 2' );\n\n\t\t\t// Phase 3 – marking. We 'run' each statement to see which ones\n\t\t\t// need to be included in the generated bundle\n\n\t\t\ttimeStart( 'phase 3' );\n\n\t\t\t// mark all export statements\n\t\t\tentryModule.getExports().forEach( function (name) {\n\t\t\t\tvar declaration = entryModule.traceExport( name );\n\n\t\t\t\tdeclaration.exportName = name;\n\t\t\t\tdeclaration.activate();\n\n\t\t\t\tif ( declaration.isNamespace ) {\n\t\t\t\t\tdeclaration.needsNamespaceBlock = true;\n\t\t\t\t}\n\t\t\t});\n\n\t\t\t// mark statements that should appear in the bundle\n\t\t\tif ( this$1.treeshake ) {\n\t\t\t\tthis$1.modules.forEach( function (module) {\n\t\t\t\t\tmodule.run();\n\t\t\t\t});\n\n\t\t\t\tvar settled = false;\n\t\t\t\twhile ( !settled ) {\n\t\t\t\t\tsettled = true;\n\n\t\t\t\t\tvar i = this$1.dependentExpressions.length;\n\t\t\t\t\twhile ( i-- ) {\n\t\t\t\t\t\tvar expression = this$1.dependentExpressions[i];\n\n\t\t\t\t\t\tvar statement = expression;\n\t\t\t\t\t\twhile ( statement.parent && !/Function/.test( statement.parent.type ) ) statement = statement.parent;\n\n\t\t\t\t\t\tif ( !statement || statement.ran ) {\n\t\t\t\t\t\t\tthis$1.dependentExpressions.splice( i, 1 );\n\t\t\t\t\t\t} else if ( expression.isUsedByBundle() ) {\n\t\t\t\t\t\t\tsettled = false;\n\t\t\t\t\t\t\tstatement.run( statement.findScope() );\n\t\t\t\t\t\t\tthis$1.dependentExpressions.splice( i, 1 );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\ttimeEnd( 'phase 3' );\n\n\t\t\t// Phase 4 – final preparation. We order the modules with an\n\t\t\t// enhanced topological sort that accounts for cycles, then\n\t\t\t// ensure that names are deconflicted throughout the bundle\n\n\t\t\ttimeStart( 'phase 4' );\n\n\t\t\t// while we're here, check for unused external imports\n\t\t\tthis$1.externalModules.forEach( function (module) {\n\t\t\t\tvar unused = Object.keys( module.declarations )\n\t\t\t\t\t.filter( function (name) { return name !== '*'; } )\n\t\t\t\t\t.filter( function (name) { return !module.declarations[ name ].activated; } );\n\n\t\t\t\tif ( unused.length === 0 ) return;\n\n\t\t\t\tvar names = unused.length === 1 ?\n\t\t\t\t\t(\"'\" + (unused[0]) + \"' is\") :\n\t\t\t\t\t((unused.slice( 0, -1 ).map( function (name) { return (\"'\" + name + \"'\"); } ).join( ', ' )) + \" and '\" + (unused.pop()) + \"' are\");\n\n\t\t\t\tthis$1.warn({\n\t\t\t\t\tcode: 'UNUSED_EXTERNAL_IMPORT',\n\t\t\t\t\tmessage: (names + \" imported from external module '\" + (module.id) + \"' but never used\")\n\t\t\t\t});\n\t\t\t});\n\n\t\t\tthis$1.orderedModules = this$1.sort();\n\t\t\tthis$1.deconflict();\n\n\t\t\ttimeEnd( 'phase 4' );\n\t\t});\n};\n\nBundle$$1.prototype.deconflict = function deconflict () {\n\tvar used = blank();\n\n\t// ensure no conflicts with globals\n\tkeys( this.scope.declarations ).forEach( function (name) { return used[ name ] = 1; } );\n\n\tfunction getSafeName ( name ) {\n\t\twhile ( used[ name ] ) {\n\t\t\tname += \"$\" + (used[name]++);\n\t\t}\n\n\t\tused[ name ] = 1;\n\t\treturn name;\n\t}\n\n\tvar toDeshadow = new Set();\n\n\tthis.externalModules.forEach( function (module) {\n\t\tvar safeName = getSafeName( module.name );\n\t\ttoDeshadow.add( safeName );\n\t\tmodule.name = safeName;\n\n\t\t// ensure we don't shadow named external imports, if\n\t\t// we're creating an ES6 bundle\n\t\tforOwn( module.declarations, function ( declaration, name ) {\n\t\t\tvar safeName = getSafeName( name );\n\t\t\ttoDeshadow.add( safeName );\n\t\t\tdeclaration.setSafeName( safeName );\n\t\t});\n\t});\n\n\tthis.modules.forEach( function (module) {\n\t\tforOwn( module.scope.declarations, function ( declaration ) {\n\t\t\tif ( declaration.isDefault && declaration.declaration.id ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tdeclaration.name = getSafeName( declaration.name );\n\t\t});\n\n\t\t// deconflict reified namespaces\n\t\tvar namespace = module.namespace();\n\t\tif ( namespace.needsNamespaceBlock ) {\n\t\t\tnamespace.name = getSafeName( namespace.name );\n\t\t}\n\t});\n\n\tthis.scope.deshadow( toDeshadow );\n};\n\nBundle$$1.prototype.fetchModule = function fetchModule ( id, importer ) {\n\t\tvar this$1 = this;\n\n\t// short-circuit cycles\n\tif ( this.moduleById.has( id ) ) return null;\n\tthis.moduleById.set( id, null );\n\n\treturn this.load( id )\n\t\t.catch( function (err) {\n\t\t\tvar msg = \"Could not load \" + id;\n\t\t\tif ( importer ) msg += \" (imported by \" + importer + \")\";\n\n\t\t\tmsg += \": \" + (err.message);\n\t\t\tthrow new Error( msg );\n\t\t})\n\t\t.then( function (source) {\n\t\t\tif ( typeof source === 'string' ) return source;\n\t\t\tif ( source && typeof source === 'object' && source.code ) return source;\n\n\t\t\t// TODO report which plugin failed\n\t\t\terror({\n\t\t\t\tcode: 'BAD_LOADER',\n\t\t\t\tmessage: (\"Error loading \" + (relativeId( id )) + \": plugin load hook should return a string, a { code, map } object, or nothing/null\")\n\t\t\t});\n\t\t})\n\t\t.then( function (source) {\n\t\t\tif ( typeof source === 'string' ) {\n\t\t\t\tsource = {\n\t\t\t\t\tcode: source,\n\t\t\t\t\tast: null\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tif ( this$1.cachedModules.has( id ) && this$1.cachedModules.get( id ).originalCode === source.code ) {\n\t\t\t\treturn this$1.cachedModules.get( id );\n\t\t\t}\n\n\t\t\treturn transform( this$1, source, id, this$1.plugins );\n\t\t})\n\t\t.then( function (source) {\n\t\t\tvar code = source.code;\n\t\t\t\tvar originalCode = source.originalCode;\n\t\t\t\tvar originalSourceMap = source.originalSourceMap;\n\t\t\t\tvar ast = source.ast;\n\t\t\t\tvar sourceMapChain = source.sourceMapChain;\n\t\t\t\tvar resolvedIds = source.resolvedIds;\n\n\t\t\tvar module = new Module({\n\t\t\t\tid: id,\n\t\t\t\tcode: code,\n\t\t\t\toriginalCode: originalCode,\n\t\t\t\toriginalSourceMap: originalSourceMap,\n\t\t\t\tast: ast,\n\t\t\t\tsourceMapChain: sourceMapChain,\n\t\t\t\t\tresolvedIds: resolvedIds,\n\t\t\t\tbundle: this$1\n\t\t\t});\n\n\t\t\tthis$1.modules.push( module );\n\t\t\tthis$1.moduleById.set( id, module );\n\n\t\t\treturn this$1.fetchAllDependencies( module ).then( function () {\n\t\t\t\tkeys( module.exports ).forEach( function (name) {\n\t\t\t\t\tif ( name !== 'default' ) {\n\t\t\t\t\t\tmodule.exportsAll[name] = module.id;\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\tmodule.exportAllSources.forEach( function (source) {\n\t\t\t\t\tvar id = module.resolvedIds[ source ];\n\t\t\t\t\tvar exportAllModule = this$1.moduleById.get( id );\n\t\t\t\t\tif ( exportAllModule.isExternal ) return;\n\n\t\t\t\t\tkeys( exportAllModule.exportsAll ).forEach( function (name) {\n\t\t\t\t\t\tif ( name in module.exportsAll ) {\n\t\t\t\t\t\t\tthis$1.warn({\n\t\t\t\t\t\t\t\tcode: 'NAMESPACE_CONFLICT',\n\t\t\t\t\t\t\t\tmessage: (\"Conflicting namespaces: \" + (relativeId( module.id )) + \" re-exports '\" + name + \"' from both \" + (relativeId( module.exportsAll[ name ] )) + \" and \" + (relativeId( exportAllModule.exportsAll[ name ] )) + \" (will be ignored)\")\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t  module.exportsAll[ name ] = exportAllModule.exportsAll[ name ];\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t\treturn module;\n\t\t\t});\n\t\t});\n};\n\nBundle$$1.prototype.fetchAllDependencies = function fetchAllDependencies ( module ) {\n\t\tvar this$1 = this;\n\n\treturn mapSequence( module.sources, function (source) {\n\t\tvar resolvedId = module.resolvedIds[ source ];\n\t\treturn ( resolvedId ? Promise.resolve( resolvedId ) : this$1.resolveId( source, module.id ) )\n\t\t\t.then( function (resolvedId) {\n\t\t\t\tvar externalId = resolvedId || (\n\t\t\t\t\tisRelative( source ) ? path.resolve( module.id, '..', source ) : source\n\t\t\t\t);\n\n\t\t\t\tvar isExternal = this$1.isExternal( externalId );\n\n\t\t\t\tif ( !resolvedId && !isExternal ) {\n\t\t\t\t\tif ( isRelative( source ) ) {\n\t\t\t\t\t\terror({\n\t\t\t\t\t\t\tcode: 'UNRESOLVED_IMPORT',\n\t\t\t\t\t\t\tmessage: (\"Could not resolve '\" + source + \"' from \" + (relativeId( module.id )))\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\n\t\t\t\t\tthis$1.warn({\n\t\t\t\t\t\tcode: 'UNRESOLVED_IMPORT',\n\t\t\t\t\t\tmessage: (\"'\" + source + \"' is imported by \" + (relativeId( module.id )) + \", but could not be resolved – treating it as an external dependency\"),\n\t\t\t\t\t\turl: 'https://github.com/rollup/rollup/wiki/Troubleshooting#treating-module-as-external-dependency'\n\t\t\t\t\t});\n\t\t\t\t\tisExternal = true;\n\t\t\t\t}\n\n\t\t\t\tif ( isExternal ) {\n\t\t\t\t\tmodule.resolvedIds[ source ] = externalId;\n\n\t\t\t\t\tif ( !this$1.moduleById.has( externalId ) ) {\n\t\t\t\t\t\tvar module$1 = new ExternalModule( externalId, this$1.getPath( externalId ) );\n\t\t\t\t\t\tthis$1.externalModules.push( module$1 );\n\t\t\t\t\t\tthis$1.moduleById.set( externalId, module$1 );\n\t\t\t\t\t}\n\n\t\t\t\t\tvar externalModule = this$1.moduleById.get( externalId );\n\n\t\t\t\t\t// add external declarations so we can detect which are never used\n\t\t\t\t\tObject.keys( module.imports ).forEach( function (name) {\n\t\t\t\t\t\tvar importDeclaration = module.imports[ name ];\n\t\t\t\t\t\tif ( importDeclaration.source !== source ) return;\n\n\t\t\t\t\t\texternalModule.traceExport( importDeclaration.name );\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\tif ( resolvedId === module.id ) {\n\t\t\t\t\t\t// need to find the actual import declaration, so we can provide\n\t\t\t\t\t\t// a useful error message. Bit hoop-jumpy but what can you do\n\t\t\t\t\t\tvar name = Object.keys( module.imports )\n\t\t\t\t\t\t\t.find( function (name) {\n\t\t\t\t\t\t\t\tvar declaration = module.imports[ name ];\n\t\t\t\t\t\t\t\treturn declaration.source === source;\n\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\tvar declaration = module.imports[ name ].specifier.parent;\n\n\t\t\t\t\t\tmodule.error({\n\t\t\t\t\t\t\tcode: 'CANNOT_IMPORT_SELF',\n\t\t\t\t\t\t\tmessage: \"A module cannot import itself\"\n\t\t\t\t\t\t}, declaration.start );\n\t\t\t\t\t}\n\n\t\t\t\t\tmodule.resolvedIds[ source ] = resolvedId;\n\t\t\t\t\treturn this$1.fetchModule( resolvedId, module.id );\n\t\t\t\t}\n\t\t\t});\n\t});\n};\n\nBundle$$1.prototype.getPathRelativeToEntryDirname = function getPathRelativeToEntryDirname ( resolvedId ) {\n\tif ( isRelative( resolvedId ) || isAbsolute( resolvedId ) ) {\n\t\tvar entryDirname = path.dirname( this.entryId );\n\t\tvar relativeToEntry = normalize( path.relative( entryDirname, resolvedId ) );\n\n\t\treturn isRelative( relativeToEntry ) ? relativeToEntry : (\"./\" + relativeToEntry);\n\t}\n\n\treturn resolvedId;\n};\n\nBundle$$1.prototype.render = function render ( options ) {\n\t\tvar this$1 = this;\n\t\tif ( options === void 0 ) options = {};\n\n\tif ( options.format === 'es6' ) {\n\t\tthis.warn({\n\t\t\tcode: 'DEPRECATED_ES6',\n\t\t\tmessage: 'The es6 format is deprecated – use `es` instead'\n\t\t});\n\n\t\toptions.format = 'es';\n\t}\n\n\t// Determine export mode - 'default', 'named', 'none'\n\tvar exportMode = getExportMode( this, options );\n\n\tvar magicString = new Bundle$2({ separator: '\\n\\n' });\n\tvar usedModules = [];\n\n\ttimeStart( 'render modules' );\n\n\tthis.orderedModules.forEach( function (module) {\n\t\tvar source = module.render( options.format === 'es', this$1.legacy );\n\n\t\tif ( source.toString().length ) {\n\t\t\tmagicString.addSource( source );\n\t\t\tusedModules.push( module );\n\t\t}\n\t});\n\n\tif ( !magicString.toString().trim() && this.entryModule.getExports().length === 0 ) {\n\t\tthis.warn({\n\t\t\tcode: 'EMPTY_BUNDLE',\n\t\t\tmessage: 'Generated an empty bundle'\n\t\t});\n\t}\n\n\ttimeEnd( 'render modules' );\n\n\tvar intro = [ options.intro ]\n\t\t.concat(\n\t\t\tthis.plugins.map( function (plugin) { return plugin.intro && plugin.intro(); } )\n\t\t)\n\t\t.filter( Boolean )\n\t\t.join( '\\n\\n' );\n\n\t\tif ( intro ) intro += '\\n\\n';\n\n\tvar outro = [ options.outro ]\n\t\t.concat(\n\t\t\tthis.plugins.map( function (plugin) { return plugin.outro && plugin.outro(); } )\n\t\t)\n\t\t.filter( Boolean )\n\t\t.join( '\\n\\n' );\n\n\tif ( outro ) outro = \"\\n\\n\" + outro;\n\n\t\tvar indentString = getIndentString( magicString, options );\n\n\tvar finalise = finalisers[ options.format ];\n\tif ( !finalise ) {\n\t\terror({\n\t\t\tcode: 'INVALID_OPTION',\n\t\t\tmessage: (\"You must specify an output type - valid options are \" + (keys( finalisers ).join( ', ' )))\n\t\t});\n\t}\n\n\ttimeStart( 'render format' );\n\n\tmagicString = finalise( this, magicString.trim(), { exportMode: exportMode, indentString: indentString, intro: intro, outro: outro }, options );\n\n\ttimeEnd( 'render format' );\n\n\tvar banner = [ options.banner ]\n\t\t.concat( this.plugins.map( function (plugin) { return plugin.banner; } ) )\n\t\t.map( callIfFunction )\n\t\t.filter( Boolean )\n\t\t.join( '\\n' );\n\n\tvar footer = [ options.footer ]\n\t\t.concat( this.plugins.map( function (plugin) { return plugin.footer; } ) )\n\t\t.map( callIfFunction )\n\t\t.filter( Boolean )\n\t\t.join( '\\n' );\n\n\tif ( banner ) magicString.prepend( banner + '\\n' );\n\tif ( footer ) magicString.append( '\\n' + footer );\n\n\tvar code = magicString.toString();\n\tvar map = null;\n\tvar bundleSourcemapChain = [];\n\n\tcode = transformBundle( code, this.plugins, bundleSourcemapChain, options );\n\n\tif ( options.sourceMap ) {\n\t\ttimeStart( 'sourceMap' );\n\n\t\tvar file = options.sourceMapFile || options.dest;\n\t\tif ( file ) file = path.resolve( typeof process !== 'undefined' ? process.cwd() : '', file );\n\n\t\tif ( this.hasLoaders || find( this.plugins, function (plugin) { return plugin.transform || plugin.transformBundle; } ) ) {\n\t\t\tmap = magicString.generateMap({});\n\t\t\tif ( typeof map.mappings === 'string' ) {\n\t\t\t\tmap.mappings = decode( map.mappings );\n\t\t\t}\n\t\t\tmap = collapseSourcemaps( this, file, map, usedModules, bundleSourcemapChain );\n\t\t} else {\n\t\t\tmap = magicString.generateMap({ file: file, includeContent: true });\n\t\t}\n\n\t\tmap.sources = map.sources.map( normalize );\n\n\t\ttimeEnd( 'sourceMap' );\n\t}\n\n\tif ( code[ code.length - 1 ] !== '\\n' ) code += '\\n';\n\treturn { code: code, map: map };\n};\n\nBundle$$1.prototype.sort = function sort () {\n\t\tvar this$1 = this;\n\n\tvar hasCycles;\n\tvar seen = {};\n\tvar ordered = [];\n\n\tvar stronglyDependsOn = blank();\n\tvar dependsOn = blank();\n\n\tthis.modules.forEach( function (module) {\n\t\tstronglyDependsOn[ module.id ] = blank();\n\t\tdependsOn[ module.id ] = blank();\n\t});\n\n\tthis.modules.forEach( function (module) {\n\t\tfunction processStrongDependency ( dependency ) {\n\t\t\tif ( dependency === module || stronglyDependsOn[ module.id ][ dependency.id ] ) return;\n\n\t\t\tstronglyDependsOn[ module.id ][ dependency.id ] = true;\n\t\t\tdependency.strongDependencies.forEach( processStrongDependency );\n\t\t}\n\n\t\tfunction processDependency ( dependency ) {\n\t\t\tif ( dependency === module || dependsOn[ module.id ][ dependency.id ] ) return;\n\n\t\t\tdependsOn[ module.id ][ dependency.id ] = true;\n\t\t\tdependency.dependencies.forEach( processDependency );\n\t\t}\n\n\t\tmodule.strongDependencies.forEach( processStrongDependency );\n\t\tmodule.dependencies.forEach( processDependency );\n\t});\n\n\tvar visit = function (module) {\n\t\tif ( seen[ module.id ] ) {\n\t\t\thasCycles = true;\n\t\t\treturn;\n\t\t}\n\n\t\tseen[ module.id ] = true;\n\n\t\tmodule.dependencies.forEach( visit );\n\t\tordered.push( module );\n\t};\n\n\tvisit( this.entryModule );\n\n\tif ( hasCycles ) {\n\t\tordered.forEach( function ( a, i ) {\n\t\t\tvar loop = function (  ) {\n\t\t\t\tvar b = ordered[i];\n\n\t\t\t\t// TODO reinstate this! it no longer works\n\t\t\t\t\tif ( stronglyDependsOn[ a.id ][ b.id ] ) {\n\t\t\t\t\t// somewhere, there is a module that imports b before a. Because\n\t\t\t\t\t// b imports a, a is placed before b. We need to find the module\n\t\t\t\t\t// in question, so we can provide a useful error message\n\t\t\t\t\tvar parent = '[[unknown]]';\n\t\t\t\t\tvar visited = {};\n\n\t\t\t\t\tvar findParent = function (module) {\n\t\t\t\t\t\tif ( dependsOn[ module.id ][ a.id ] && dependsOn[ module.id ][ b.id ] ) {\n\t\t\t\t\t\t\tparent = module.id;\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tvisited[ module.id ] = true;\n\t\t\t\t\t\tfor ( var i = 0; i < module.dependencies.length; i += 1 ) {\n\t\t\t\t\t\t\tvar dependency = module.dependencies[i];\n\t\t\t\t\t\t\tif ( !visited[ dependency.id ] && findParent( dependency ) ) return true;\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\n\t\t\t\t\tfindParent( this$1.entryModule );\n\n\t\t\t\t\t\tthis$1.onwarn(\n\t\t\t\t\t\t(\"Module \" + (a.id) + \" may be unable to evaluate without \" + (b.id) + \", but is included first due to a cyclical dependency. Consider swapping the import statements in \" + parent + \" to ensure correct ordering\")\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t};\n\n\t\t\t\tfor ( i += 1; i < ordered.length; i += 1 ) loop(  );\n\t\t});\n\t}\n\n\treturn ordered;\n};\n\nBundle$$1.prototype.warn = function warn ( warning ) {\n\twarning.toString = function () {\n\t\tvar str = '';\n\n\t\tif ( warning.plugin ) str += \"(\" + (warning.plugin) + \" plugin) \";\n\t\tif ( warning.loc ) str += (relativeId( warning.loc.file )) + \" (\" + (warning.loc.line) + \":\" + (warning.loc.column) + \") \";\n\t\tstr += warning.message;\n\n\t\treturn str;\n\t};\n\n\tthis.onwarn( warning );\n};\n\nvar VERSION = '0.41.6';\n\nvar ALLOWED_KEYS = [\n\t'acorn',\n\t'banner',\n\t'cache',\n\t'context',\n\t'dest',\n\t'entry',\n\t'exports',\n\t'external',\n\t'footer',\n\t'format',\n\t'globals',\n\t'indent',\n\t'interop',\n\t'intro',\n\t'legacy',\n\t'moduleContext',\n\t'moduleId',\n\t'moduleName',\n\t'noConflict',\n\t'onwarn',\n\t'outro',\n\t'paths',\n\t'plugins',\n\t'preferConst',\n\t'sourceMap',\n\t'sourceMapFile',\n\t'targets',\n\t'treeshake',\n\t'useStrict'\n];\n\nfunction checkOptions ( options ) {\n\tif ( !options || !options.entry ) {\n\t\treturn new Error( 'You must supply options.entry to rollup' );\n\t}\n\n\tif ( options.transform || options.load || options.resolveId || options.resolveExternal ) {\n\t\treturn new Error( 'The `transform`, `load`, `resolveId` and `resolveExternal` options are deprecated in favour of a unified plugin API. See https://github.com/rollup/rollup/wiki/Plugins for details' );\n\t}\n\n\tvar err = validateKeys( keys(options), ALLOWED_KEYS );\n\tif ( err ) return err;\n\n\treturn null;\n}\n\nfunction rollup ( options ) {\n\tvar err = checkOptions ( options );\n\tif ( err ) return Promise.reject( err );\n\n\tvar bundle = new Bundle$$1( options );\n\n\ttimeStart( '--BUILD--' );\n\n\treturn bundle.build().then( function () {\n\t\ttimeEnd( '--BUILD--' );\n\n\t\tfunction generate ( options ) {\n\t\t\tif ( options === void 0 ) options = {};\n\n\t\t\tif ( !options.format ) {\n\t\t\t\tbundle.warn({\n\t\t\t\t\tcode: 'MISSING_FORMAT',\n\t\t\t\t\tmessage: \"No format option was supplied – defaulting to 'es'\",\n\t\t\t\t\turl: \"https://github.com/rollup/rollup/wiki/JavaScript-API#format\"\n\t\t\t\t});\n\n\t\t\t\toptions.format = 'es';\n\t\t\t}\n\n\t\t\ttimeStart( '--GENERATE--' );\n\n\t\t\tvar rendered = bundle.render( options );\n\n\t\t\ttimeEnd( '--GENERATE--' );\n\n\t\t\tbundle.plugins.forEach( function (plugin) {\n\t\t\t\tif ( plugin.ongenerate ) {\n\t\t\t\t\tplugin.ongenerate( assign({\n\t\t\t\t\t\tbundle: result\n\t\t\t\t\t}, options ), rendered);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tflushTime();\n\n\t\t\treturn rendered;\n\t\t}\n\n\t\tvar result = {\n\t\t\timports: bundle.externalModules.map( function (module) { return module.id; } ),\n\t\t\texports: keys( bundle.entryModule.exports ),\n\t\t\tmodules: bundle.orderedModules.map( function (module) { return module.toJSON(); } ),\n\n\t\t\tgenerate: generate,\n\t\t\twrite: function (options) {\n\t\t\t\tif ( !options || !options.dest ) {\n\t\t\t\t\terror({\n\t\t\t\t\t\tcode: 'MISSING_OPTION',\n\t\t\t\t\t\tmessage: 'You must supply options.dest to bundle.write'\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\tvar dest = options.dest;\n\t\t\t\tvar output = generate( options );\n\t\t\t\tvar code = output.code;\n\t\t\t\tvar map = output.map;\n\n\t\t\t\tvar promises = [];\n\n\t\t\t\tif ( options.sourceMap ) {\n\t\t\t\t\tvar url;\n\n\t\t\t\t\tif ( options.sourceMap === 'inline' ) {\n\t\t\t\t\t\turl = map.toUrl();\n\t\t\t\t\t} else {\n\t\t\t\t\t\turl = (path.basename( dest )) + \".map\";\n\t\t\t\t\t\tpromises.push( writeFile$1( dest + '.map', map.toString() ) );\n\t\t\t\t\t}\n\n\t\t\t\t\tcode += \"//# \" + SOURCEMAPPING_URL + \"=\" + url + \"\\n\";\n\t\t\t\t}\n\n\t\t\t\tpromises.push( writeFile$1( dest, code ) );\n\t\t\t\treturn Promise.all( promises ).then( function () {\n\t\t\t\t\treturn mapSequence( bundle.plugins.filter( function (plugin) { return plugin.onwrite; } ), function (plugin) {\n\t\t\t\t\t\treturn Promise.resolve( plugin.onwrite( assign({\n\t\t\t\t\t\t\tbundle: result\n\t\t\t\t\t\t}, options ), output));\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t}\n\t\t};\n\n\t\treturn result;\n\t});\n}\n\nexports.VERSION = VERSION;\nexports.rollup = rollup;\n//# sourceMappingURL=rollup.js.map\n"}